initSidebarItems({"enum":[["ExitValue","The list of ways that a Task can exit, including possible return values and conditions."],["KillReason","The list of possible reasons that a given `Task` was killed prematurely."],["RunState","The set of possible runstates that a task can be in, e.g., runnable, blocked, exited, etc. "]],"fn":[["bootstrap_task","Bootstrap a new task from the current thread of execution."],["get_my_current_task","Returns a reference to the current task by using the `TaskLocalData` pointer stored in the thread-local storage (FS base model-specific register)."],["get_my_current_task_id","Returns the current Task’s id by using the `TaskLocalData` pointer stored in the thread-local storage (FS base model-specific register)."],["get_task","returns a shared reference to the `Task` specified by the given `task_id`"],["set_my_kill_handler","Sets the kill handler function for the current `Task`"]],"struct":[["PanicInfoOwned","Just like `core::panic::PanicInfo`, but with owned String types instead of &str references."],["RestartInfo","A data structure to hold data related to restart the function.  Presence of `RestartInfo` itself indicates the task will be restartable."],["TASKLIST","The list of all Tasks in the system."],["Task","A structure that contains contextual information for a thread of execution. "],["TaskRef","A shareable, cloneable reference to a `Task` that exposes more methods for task management, and accesses the enclosed `Task` by locking it. "]],"type":[["FailureCleanupFunction","The signature of a Task’s failure cleanup function."],["KillHandler","The function signature of the callback that will be invoked when a given Task panics or otherwise fails, e.g., a machine exception occurs."]]});