var searchIndex = JSON.parse('{\
"___Theseus_Crates___":{"doc":"Overview of Theseus","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"acpi":{"doc":"Code to parse the ACPI tables, based off of Redox. ","t":[5,5],"n":["get_acpi_tables","init"],"q":["acpi",""],"d":["Returns a reference to the singleton instance of all ACPI …","Parses the system’s ACPI tables "],"i":[0,0],"f":[[[],["mutex",6]],[[["pagetable",3]],[["result",4],["str",15]]]],"p":[]},\
"acpi_table":{"doc":"Definitions for the ACPI table","t":[6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11],"n":["AcpiSignature","AcpiTables","TableLocation","add_table_location","borrow","borrow","borrow_mut","borrow_mut","default","fmt","from","from","into","into","map_new_table","mapping","offset","slice_offset_and_length","table","table_location","table_mut","table_slice","table_slice_mut","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["acpi_table","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["All ACPI tables are identified by a 4-byte signature, …","The struct holding all ACPI tables and records of where …","A record that tracks where an ACPI Table exists in memory,…","Add the location and size details of a discovered ACPI …","","","","","","","","","","","Map the ACPI table that exists at the given …","Returns an immutable reference to the underlying …","The offset of the statically-sized part of the table, …","The offset and length of the dynamically-sized part of …","Returns a reference to the table that matches the …","Returns the location of the ACPI table based on the given …","Returns a mutable reference to the table that matches the …","Returns a reference to the dynamically-sized part at the …","Returns a mutable reference to the dynamically-sized part …","","","","","",""],"i":[0,0,0,1,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,1,1,1,1,1,2,1,2,1,2],"f":[null,null,null,[[["option",4],["acpisignature",6],["physicaladdress",3]],[["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[],["acpitables",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["pagetable",3],["physicaladdress",3]],[["str",15],["result",4]]],[[],["mappedpages",3]],null,null,[[["acpisignature",6]],[["str",15],["result",4]]],[[["acpisignature",6]],[["tablelocation",3],["option",4]]],[[["acpisignature",6]],[["str",15],["result",4]]],[[["acpisignature",6]],[["str",15],["result",4]]],[[["acpisignature",6]],[["str",15],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"AcpiTables"],[3,"TableLocation"]]},\
"acpi_table_handler":{"doc":"Handles ACPI tables based on signatures.","t":[5],"n":["acpi_table_handler"],"q":["acpi_table_handler"],"d":["The single arbiter of ACPI Table types,  which contains a …"],"i":[0],"f":[[[["acpitables",3],["physicaladdress",3],["acpisignature",6],["usize",15]],[["result",4],["str",15]]]],"p":[]},\
"ap_start":{"doc":"Routines for booting up secondary CPU cores,  aka …","t":[7,5,5],"n":["AP_READY_FLAG","insert_ap_stack","kstart_ap"],"q":["ap_start","",""],"d":["An atomic flag used for synchronizing progress between …","Insert a new stack that was allocated for the AP with the …","Entry to rust for an AP. The arguments must match the …"],"i":[0,0,0],"f":[null,[[["stack",3],["u8",15]]],[[["u16",15],["u8",15],["virtualaddress",3]]]],"p":[]},\
"apic":{"doc":"","t":[13,17,13,13,3,7,4,4,3,13,13,13,3,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,12,11,11,12,11,11,11,11,11,11,11,5,11,11,5,5,5,5,11,11,12,5,12,12,12,11,11,11,11,11,5,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,11,11,11,11,11,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["APIC","APIC_SPURIOUS_INTERRUPT_VECTOR","All","AllButMe","ApicRegisters","INTERRUPT_CHIP","InterruptChip","LapicIpiDestination","LocalApic","Me","One","PIC","RegisterArray","X2APIC","apic_id","arbitration_priority","as_icr_value","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_error","clear_pmi_mask","clone","clone_into","core_count","destination_format","eoi","eoi","eq","error","error_status","fmt","fmt","from","from","from","from","from","get_bsp_id","get_irr","get_isr","get_lapics","get_my_apic","get_my_apic_id","has_x2apic","icr","id","in_service_registers","init","interrupt_command_high","interrupt_command_low","interrupt_request_registers","into","into","into","into","into","is_bsp","is_bsp","lapic_id","lapic_version","logical_destination","lvt_cmci","lvt_error","lvt_lint0","lvt_lint1","lvt_perf_monitor","lvt_thermal","lvt_timer","new","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","processor","processor_priority","regs","remote_read","send_ipi","send_nmi_ipi","set_icr","set_ldr","set_nmi","spurious_interrupt_vector","task_priority","timer_current_count","timer_divide","timer_initial_count","to_owned","trigger_mode_registers","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version"],"q":["apic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Send IPI to all APICs, including myself","Send IPI to all APICs except for myself","A structure that offers access to APIC/xAPIC through its …","The interrupt chip that is currently configured on this …","","The possible destination shorthand values for IPI ICR.","This structure represents a single APIC in the system, …","Send IPI to my own (the current) APIC  ","Send IPI to a specific APIC ","","","","The APIC system id of this APIC.","","Convert the enum to a bitmask value to be used in the …","","","","","","","","","","","","Clears the interrupt mask bit in the apic performance …","","","Returns the number of processor core (local APICs) that …","","","","","","","","","","","","","","","Returns the values of the 8 request registers for this …","Returns the values of the 8 in-service registers for this …","Returns a reference to the list of LocalApics, one per …","Returns a reference to the LocalApic for the currently …","Returns the APIC ID of the currently executing processor …","Returns true if the machine has support for x2apic","","","","Initially maps the base APIC MMIO register frames so that …","","","","","","","","","Returns true if the currently executing processor core is …","Whether this <code>LocalApic</code> is the bootstrap processor (the …","This Lapic’s ID. Some systems allow setting the ID, but …","","","","","","","","","","This MUST be invoked from the AP core itself when it is …","","","The processor id of this APIC.","","Only exists for xapic, should be None for x2apic systems.","","Send an IPI to the cores specified by the given …","Send a NMI IPI to the cores specified by the given …","","","Set the NonMaskableInterrupt redirect for this LocalApic. …","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,2,2,0,0,0,0,0,2,2,1,0,1,3,4,2,2,3,1,4,5,2,3,1,4,5,3,3,1,1,0,4,3,4,1,3,4,3,1,2,3,1,4,5,0,3,3,0,0,0,0,3,3,4,0,4,4,4,2,3,1,4,5,0,3,4,4,4,4,4,4,4,4,4,4,3,4,5,3,4,3,4,3,3,3,3,3,4,4,4,4,4,1,4,2,3,1,4,5,2,3,1,4,5,2,3,1,4,5,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["interruptchip",4]],[[]],[[],["usize",15]],null,[[]],null,[[["interruptchip",4]],["bool",15]],[[],["u32",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["u8",15]]],[[]],[[]],[[],["atomicmap",3]],[[],[["option",4],["rwlockirqsafe",3]]],[[],["u8",15]],[[],["bool",15]],[[],["u64",15]],[[],["u8",15]],null,[[["pagetable",3]],[["result",4],["str",15]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[["pagetable",3],["bool",15],["u8",15],["u16",15]],[["localapic",3],["str",15],["result",4]]],[[]],[[]],null,null,null,null,[[["u8",15],["lapicipidestination",4]]],[[["lapicipidestination",4]]],[[["u64",15]]],[[["u32",15]]],[[["u8",15],["u16",15]],[["result",4],["str",15]]],null,null,null,null,null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]]],"p":[[4,"InterruptChip"],[4,"LapicIpiDestination"],[3,"LocalApic"],[3,"ApicRegisters"],[3,"RegisterArray"]]},\
"async_channel":{"doc":"An asynchronous channel for Inter-Task Communication …","t":[13,13,4,13,4,13,3,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChannelDisconnected","ChannelEmpty","ChannelError","ChannelFull","ChannelStatus","Connected","Receiver","ReceiverDisconnected","Sender","SenderDisconnected","WaitError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","drop","drop","eq","eq","fmt","fmt","from","from","from","from","into","into","into","into","is_disconnected","is_disconnected","ne","new_channel","receive","send","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_receive","try_send","type_id","type_id","type_id","type_id"],"q":["async_channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Occurs when one end of channel is dropped","Occurs when <code>try_receive</code> is performed on an empty channel","Error type for tracking different type of errors sender …","Occurs when <code>try_send</code> is performed on a full channel","Indicates whether channel is Connected or Disconnected","Channel is working. Initially channel is created with …","The receiver side of a channel.","Set to Disconnected when Receiver end is dropped.","The sender (transmit) side of a channel.","Set to Disconnected when Sender end is dropped.","Occurs when an error occur in <code>WaitQueue</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the channel is disconnected.","Returns true if the channel is disconnected.","","Create a new channel that allows senders and receivers to …","Receive a message, blocking until a message is available …","Send a message, blocking until space in the channel’s …","","","","","","","","","","","","Tries to receive a message, only succeeding if a message …","Tries to send the message, only succeeding if buffer …","","","",""],"i":[1,1,0,1,0,2,0,2,0,2,1,2,1,3,4,2,1,3,4,2,3,4,2,3,4,3,4,2,1,2,1,2,1,3,4,2,1,3,4,3,4,1,0,4,3,2,3,4,2,1,3,4,2,1,3,4,4,3,2,1,3,4],"f":[null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["channelstatus",4]],[[],["sender",3]],[[],["receiver",3]],[[]],[[]],[[]],[[]],[[]],[[["channelstatus",4]],["bool",15]],[[["channelerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["channelerror",4]],["bool",15]],[[["usize",15]]],[[],[["result",4],["channelerror",4]]],[[],[["channelerror",4],["result",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["channelerror",4]]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"ChannelError"],[4,"ChannelStatus"],[3,"Sender"],[3,"Receiver"]]},\
"ata":{"doc":"Support for accessing ATA drives (IDE).","t":[18,4,3,6,3,3,3,3,3,3,18,18,18,18,18,18,18,18,18,18,18,3,3,18,18,13,13,13,13,18,18,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,12,12,12,12,12,11,11,11,11,11,12,11,11,12,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,11,11,12,12,11,11,12,12,12,12,12,12,11,12,12,12,12,12,11,11,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,12,12,12,11],"n":["ADDRESS_MARK_NOT_FOUND","AtaDeviceType","AtaDrive","AtaDriveRef","AtaError","AtaFirmwareVersion","AtaIdentifyData","AtaModelNumber","AtaSerialNumber","AtaStatus","BAD_BLOCK","BUSY","COMMAND_ABORTED","CORRECTED_DATA","DATA_REQUEST_READY","DRIVE_READY","DRIVE_SEEK_COMPLETE","DRIVE_WRITE_FAULT","ERROR","ID_MARK_NOT_FOUND","INDEX","IdeController","IdeControllerIter","MEDIA_CHANGED","MEDIA_CHANGE_REQUEST","Pata","PataPi","Sata","SataPi","TRACK_0_NOT_FOUND","UNCORRECTABLE_DATA","additional_product_id","additional_supported","advanced_pio_modes","all","all","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","block_alignment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","cfa_power_mode1","checksum","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","command_set_active","command_set_active_ext","command_set_support","command_set_support_ext","contains","contains","current_acoustic_value","current_apm_level","current_media_serial_number","current_multi_sector_setting","current_sector_capacity","current_sectors_per_track","data_set_management_feature","default","default","default","default","devices","dsm_cap","empty","empty","enhanced_security_erase_unit","eq","eq","ext_command_supported","extend","extend","extended_num_of_user_addressable_sectors","firmware_version","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free_fall_control_sensitivity","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_iter","from_iter","general_configuration","hardware_reset_result","hash","hash","insert","insert","inter_seek_delay","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_iter","is_all","is_all","is_empty","is_empty","is_master","iter","major_revision","master_password_id","max_48_bit_lba","max_blocks_per_download_microcode","max_blocks_per_transfer","min_blocks_per_download_microcode","minimum_mw_transfer_cycle_time","minimum_pio_cycle_time","minimum_pio_cycle_time_io_ready","minor_revision","model_number","msn_support","multiword_dma_active","multiword_dma_support","ne","ne","new","next","nominal_form_factor","nominal_media_rotation_rate","normal_security_erase_unit","not","not","num_current_cylinders","num_current_heads","num_cylinders","num_heads","num_sectors_per_track","nv_cache_capabilities","nv_cache_size_lsw","nv_cache_size_msw","nv_cache_time_to_spin_up_in_seconds","partial_cmp","partial_cmp","physical_logical_sector_size","primary_master","primary_slave","queue_depth","read_pio","read_sectors","recommended_acoustic_value","recommended_mw_transfer_cycle_time","remove","remove","reserved_for_expanded_support_and_active","reserved_for_tlc_technical_report","reserved_for_world_wide_name_128","sct_command_transport","secondary_master","secondary_slave","sector_size_in_bytes","security_status","serial_ata_capabilities","serial_ata_features_enabled","serial_ata_features_supported","serial_number","set","set","signature","size_in_sectors","specific_configuration","stream_min_request_size","streaming_access_latency_dma_pio","streaming_perf_granularity","streaming_transfer_time","streaming_transfer_time_dma","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","toggle","toggle","translation_fields_valid","transport_major_version","transport_minor_version","trusted_computing","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ultra_dma_active","ultra_dma_support","user_addressable_sectors","vendor_unique1","vendor_unique2","words_per_logical_sector","world_wide_name","write_pio","write_read_verify_sector_count_mode","write_read_verify_sector_count_mode_2_only","write_read_verify_sector_count_mode_3_only","write_sectors"],"q":["atad":["","The possible types of drive devices that can be attached …","A single ATA drive, either a master or a slave,  which …","","The possible error values found in an ATA drive’s error …","An ATA drive’s firmware version is an 8-byte string.","Information that describes an ATA drive,  obtained from …","An ATA drive’s model number is a 40-byte string.","An ATA drive’s serial number is a 20-byte string.","The possible status values found in an ATA drive’s …","","When set, the drive’s port values are still changing, …","","","When <strong>cleared</strong>, the drive is ready for data to be …","When set, the drive is on. When cleared, the drive is …","","","","","","A single IDE controller has two buses with up to two …","Provides an iterator over all <code>AtaDrive</code>s in an …","","","A parallel ATA (PATA) drive, like a hard drive. This is …","A parallel ATA (PATA) drive that uses the packet …","A serial ATA (SATA) drive that is operating in legacy IDE …","A serial ATA (SATA) drive that that is operating in …","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","Returns an empty set of flags","Returns an empty set of flags","","","","MultiSectorSettingValid : 1; ReservedByte59 : 3; …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if this drive is the master, or <code>false</code> if it …","Returns an <code>Iterator</code> over all of the <code>AtaDrive</code>s  that exist …","","","Number of sectors in the drive, if using 48-bit LBA.  …","","Maximum number of blocks per transfer. Sometimes referred …","","","","","","","","","","","","Creates a new instance of an IDE controller based on the …","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","<code>[0:3]</code> Physical sector size (in logical sectors)","","","only the first 5 bits are used, others are reserved","Reads data from this drive starting at the given …","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","Returns the number of sectors in this drive.","","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","A bitmask of translation fields valid and free fall …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of sectors in the drive, if using 28-bit LBA.  …","","","","","Writes data from the provided <code>buffer</code> to this drive, …","","","",""],"i":[1,0,0,0,0,0,0,0,0,0,1,2,1,2,2,2,2,2,2,1,2,0,0,1,1,3,3,3,3,1,1,4,4,4,1,2,3,1,2,5,6,7,4,8,9,10,3,1,2,5,6,7,4,8,9,10,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,3,1,2,5,6,7,4,8,9,10,3,1,2,5,6,7,4,8,9,10,4,4,4,1,2,7,4,8,9,10,1,2,7,4,8,9,10,1,2,4,4,4,4,1,2,4,4,4,4,4,4,4,4,8,9,10,6,4,1,2,4,1,2,4,1,2,4,4,1,1,1,1,1,2,2,2,2,2,5,6,4,8,8,9,9,10,10,4,3,1,2,5,6,7,4,8,9,10,1,2,1,2,1,2,4,4,1,2,1,2,4,1,2,3,1,2,5,6,7,4,8,9,10,3,1,2,5,6,7,4,8,9,10,7,1,2,1,2,5,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,2,6,7,4,4,4,1,2,4,4,4,4,4,4,4,4,4,1,2,4,6,6,4,5,5,4,4,1,2,4,4,4,4,6,6,5,4,4,4,4,4,1,2,4,5,4,4,4,4,4,4,1,2,1,2,1,2,7,4,8,9,10,8,9,10,1,2,4,4,4,4,3,1,2,5,6,7,4,8,9,10,3,1,2,5,6,7,4,8,9,10,3,1,2,5,6,7,4,8,9,10,4,4,4,4,4,4,4,5,4,4,4,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ataerror",3]],[[],["atastatus",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["ataerror",3]],["ataerror",3]],[[["atastatus",3]],["atastatus",3]],[[["ataerror",3]]],[[["atastatus",3]]],[[["ataerror",3]],["ataerror",3]],[[["atastatus",3]],["atastatus",3]],[[["ataerror",3]]],[[["atastatus",3]]],[[],["u8",15]],[[],["u8",15]],[[["ataerror",3]],["ataerror",3]],[[["atastatus",3]],["atastatus",3]],[[["ataerror",3]]],[[["atastatus",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["ataerror",3]],[[],["atastatus",3]],[[],["idecontrolleriter",3]],[[],["ataidentifydata",3]],[[],["ataserialnumber",3]],[[],["atamodelnumber",3]],[[],["atafirmwareversion",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ataerror",3]],["ordering",4]],[[["atastatus",3]],["ordering",4]],null,null,null,null,[[["ataerror",3]],["bool",15]],[[["atastatus",3]],["bool",15]],null,null,null,null,null,null,null,[[],["ataidentifydata",3]],[[]],[[]],[[]],[[],[["box",3],["iterator",8]]],null,[[],["ataerror",3]],[[],["atastatus",3]],null,[[["ataerror",3]],["bool",15]],[[["atastatus",3]],["bool",15]],null,[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],[["option",4],["ataerror",3]]],[[["u8",15]],[["atastatus",3],["option",4]]],[[["u8",15]],["ataerror",3]],[[["u8",15]],["atastatus",3]],[[["intoiterator",8]],["ataerror",3]],[[["intoiterator",8]],["atastatus",3]],null,null,[[]],[[]],[[["ataerror",3]]],[[["atastatus",3]]],null,[[["ataerror",3]],["bool",15]],[[["atastatus",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[["box",3],["global",3]],[["global",3],["any",8],["box",3]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["idecontrolleriter",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ataerror",3]],["bool",15]],[[["atastatus",3]],["bool",15]],[[["pcidevice",3]],[["str",15],["idecontroller",3],["result",4]]],[[],["option",4]],null,null,null,[[],["ataerror",3]],[[],["atastatus",3]],null,null,null,null,null,null,null,null,null,[[["ataerror",3]],[["ordering",4],["option",4]]],[[["atastatus",3]],[["ordering",4],["option",4]]],null,null,null,null,[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[["usize",15]],[["result",4],["usize",15],["str",15]]],null,null,[[["ataerror",3]]],[[["atastatus",3]]],null,null,null,null,null,null,[[],["usize",15]],null,null,null,null,null,[[["ataerror",3],["bool",15]]],[[["bool",15],["atastatus",3]]],null,[[],["usize",15]],null,null,null,null,null,null,[[["ataerror",3]],["ataerror",3]],[[["atastatus",3]],["atastatus",3]],[[["ataerror",3]]],[[["atastatus",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["ataerror",3]]],[[["atastatus",3]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["usize",15]],[["result",4],["usize",15],["str",15]]],null,null,null,[[["usize",15]],[["result",4],["usize",15],["str",15]]]],"p":[[3,"AtaError"],[3,"AtaStatus"],[4,"AtaDeviceType"],[3,"AtaIdentifyData"],[3,"AtaDrive"],[3,"IdeController"],[3,"IdeControllerIter"],[3,"AtaSerialNumber"],[3,"AtaModelNumber"],[3,"AtaFirmwareVersion"]]},\
"block_allocator":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11],"n":["FixedSizeBlockAllocator","allocate","borrow","borrow_mut","deallocate","from","init","into","new","try_from","try_into","type_id"],"q":["block_allocator","","","","","","","","","","",""],"d":["","Allocates a chunk of the given size with the given …","","","Frees the given allocation. <code>ptr</code> must be a pointer returned…","","Initialize the allocator with the given heap bounds.","","Creates an empty FixedSizeBlockAllocator.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["layout",3]]],[[]],[[]],[[["layout",3]]],[[]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"FixedSizeBlockAllocator"]]},\
"block_cache":{"doc":"A caching layer for block based storage devices.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BlockCache","as_any","as_any_mut","borrow","borrow_mut","flush","from","into","into_any","new","read_block","try_from","try_into","type_id","write_block"],"q":["block_cache","","","","","","","","","","","","","",""],"d":["A cache to store read and written blocks from a storage …","","","","","Flushes the given block to the backing storage device.  …","","","","Creates a new <code>BlockCache</code> device ","An internal function that first checks the cache for a …","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["option",4],["usize",15]],[["result",4],["str",15]]],[[]],[[]],[[["global",3],["box",3]],[["global",3],["box",3],["any",8]]],[[["storagedeviceref",6]],["blockcache",3]],[[["blockcache",3],["usize",15]],[["str",15],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["cow",4],["usize",15]],[["result",4],["str",15]]]],"p":[[3,"BlockCache"]]},\
"block_io":{"doc":"Wrappers for converting block I/O operations from one …","t":[3,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11],"n":["BlockBounds","BlockIo","BlockSize","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","block_bounds","block_count","block_size_in_bytes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","first_block_offset","flush","from","from","from","into","into","into","into_any","into_any","into_any","is_first_block_aligned","is_last_block_aligned","last_block_offset","new","range","read","size_in_blocks","size_in_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write"],"q":["block_io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Block-wise bounds information for a data transfer (read …","A wrapper around a <code>StorageDevice</code> that supports reads and …","Information used to track the size of a block device. …","","","","","","","Calculates block-wise bounds based on a byte-wise offset …","The total number of blocks to be transferred, i.e., …","Number of bytes per block.","","","","","","","The offset into the first block (beginning bound) where …","Flushes the given block to the backing storage device.  …","","","","","","","","","","Returns true if the first block of the transfer is …","Returns true if the last block of the transfer is aligned …","The offset into the last block (ending bound) where the …","Creates a new <code>BlockIo</code> device ","A <code>Range</code> from the first block to the last block of the …","Reads data from this block storage device and places it …","Number of blocks in the device. Rounds up to include …","Size of the block device in bytes (may not be a multiple …","","","","","","","","","","Write data from the given <code>buffer</code> into this block storage …"],"i":[0,0,0,1,2,3,1,2,3,3,3,2,1,2,3,1,2,3,3,1,1,2,3,1,2,3,1,2,3,3,3,3,1,3,1,2,2,1,2,3,1,2,3,1,2,3,1],"f":[null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["blocksize",3],["usize",15]],[["blockbounds",3],["result",4],["str",15]]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["option",4],["usize",15]],[["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["global",3],["box",3]],[["any",8],["global",3],["box",3]]],[[["global",3],["box",3]],[["any",8],["global",3],["box",3]]],[[["global",3],["box",3]],[["any",8],["global",3],["box",3]]],[[],["bool",15]],[[],["bool",15]],null,[[["storagedeviceref",6]],["blockio",3]],null,[[["usize",15]],[["result",4],["usize",15],["str",15]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],[["result",4],["usize",15],["str",15]]]],"p":[[3,"BlockIo"],[3,"BlockSize"],[3,"BlockBounds"]]},\
"captain":{"doc":"The main initialization routine and setup logic of the …","t":[5],"n":["init"],"q":["captain"],"d":["Initialize the Captain, which is the main module that …"],"i":[0],"f":[[[["arc",3],["mappedpages",3],["mutexirqsafe",3],["stack",3],["vec",3],["virtualaddress",3]],[["result",4],["str",15]]]],"p":[]},\
"catch_unwind":{"doc":"Support for catching a panic while a panicked <code>Task</code> is …","t":[5],"n":["catch_unwind_with_arg"],"q":["catch_unwind"],"d":["Invokes the given closure <code>f</code>, catching a panic as it is …"],"i":[0],"f":[[[],[["killreason",4],["result",4]]]],"p":[]},\
"color":{"doc":"A simple representation of the standard RGB color model.","t":[17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BLACK","BLUE","BROWN","CYAN","Color","DARK_GRAY","GRAY","GREEN","LIGHT_BLUE","LIGHT_CYAN","LIGHT_GRAY","LIGHT_GREEN","MAGENTA","PINK","RED","TRANSPARENT","WHITE","YELLOW","blue","borrow","borrow_mut","clone","eq","fmt","from","green","into","new","red","set_transparency","transparency","try_from","try_into","type_id"],"q":["color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","This structure represents a color value in the standard …","","","","","","","","","","","","","","Returns the blue component of this <code>Color</code> as a <code>u8</code> value.","","","","","","","Returns the green component of this <code>Color</code> as a <code>u8</code> value.","","Creates a new <code>Color</code> structure from a 4 bytes ARGB …","Returns the red component of this <code>Color</code> as a <code>u8</code> value.","Sets the transparency of the color, in which <code>0</code> is opaque …","Returns the transparency component of this <code>Color</code> as a <code>u8</code> …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[]],[[]],[[],["color",3]],[[["color",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["u8",15]],[[]],[[["u32",15]],["color",3]],[[],["u8",15]],[[["u8",15]]],[[],["u8",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Color"]]},\
"compositor":{"doc":"This crate defines a trait of <code>Compositor</code>  . A compositor …","t":[8,8,3,10,11,11,10,12,11,11,10,10,12,11,11,11],"n":["CompositableRegion","Compositor","FramebufferUpdates","blend_buffers","borrow","borrow_mut","composite","coordinate_in_dest_framebuffer","from","into","row_range","size","src_framebuffer","try_from","try_into","type_id"],"q":["compositor","","","","","","","","","","","","","","",""],"d":["A <code>CompositableRegion</code> is an abstract region (i.e., a …","A compositor composites (combines or blends) a series of …","A source framebuffer to be composited, along with its …","Blends the pixels in the source framebuffer <code>src_fb</code> within …","","","Composites the framebuffers in the list of source …","The coordinate in the destination framebuffer where the …","","","Returns the range of rows covered by this region,  given …","Returns the number of pixels in the region.","The source framebuffer to be composited.","","",""],"i":[0,0,0,1,2,2,3,2,2,2,1,1,2,2,2,2],"f":[null,null,null,[[["coord",3],["framebuffer",3],["framebuffer",3],["usize",15],["range",3]],[["result",4],["str",15]]],[[]],[[]],[[["framebuffer",3]],[["result",4],["str",15]]],null,[[]],[[]],[[],[["range",3],["isize",15]]],[[],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[8,"CompositableRegion"],[3,"FramebufferUpdates"],[8,"Compositor"]]},\
"context_switch":{"doc":"This is a wrapper crate around all other context switch …","t":[3,11,11,5,11,11,11,11,11,11,11],"n":["Context","borrow","borrow_mut","context_switch","from","into","new","only_derive_is_allowed_to_implement_this_trait","try_from","try_into","type_id"],"q":["context_switch","","","","","","","","","",""],"d":["The registers saved before a context switch and restored …","","","Switches context from an SSE Task to another SSE Task.","","","Creates a new ContextSSE struct that will cause the …","","","",""],"i":[0,1,1,0,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]],["contextsse",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Context"]]},\
"context_switch_avx":{"doc":"This crate contains structures and routines for context …","t":[3,11,11,5,11,11,11,11,14,14,11,11,11],"n":["ContextAVX","borrow","borrow_mut","context_switch_avx","from","into","new","only_derive_is_allowed_to_implement_this_trait","restore_registers_avx","save_registers_avx","try_from","try_into","type_id"],"q":["context_switch_avx","","","","","","","","","","","",""],"d":["The registers saved before a context switch and restored …","","","Switches context from an AVX Task to another AVX Task.","","","Creates a new ContextAVX struct that will cause the …","","An assembly macro for restoring AVX registers by popping …","An assembly macro for saving AVX registers by pushing …","","",""],"i":[0,1,1,0,1,1,1,1,0,0,1,1,1],"f":[null,[[]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]],["contextavx",3]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"ContextAVX"]]},\
"context_switch_regular":{"doc":"This crate contains structures and routines for context …","t":[3,11,11,5,11,11,11,11,14,14,14,11,11,11],"n":["ContextRegular","borrow","borrow_mut","context_switch_regular","from","into","new","only_derive_is_allowed_to_implement_this_trait","restore_registers_regular","save_registers_regular","switch_stacks","try_from","try_into","type_id"],"q":["context_switch_regular","","","","","","","","","","","","",""],"d":["The registers saved before a context switch and restored …","","","Switches context from a regular Task to another regular …","","","Creates a new ContextRegular struct that will cause the …","","An assembly macro for saving regular x86_64 registers. by …","An assembly macro for saving regular x86_64 registers. by …","An assembly macro for switching stacks, which is the …","","",""],"i":[0,1,1,0,1,1,1,1,0,0,0,1,1,1],"f":[null,[[]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]],["contextregular",3]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"ContextRegular"]]},\
"context_switch_sse":{"doc":"This crate contains structures and routines for context …","t":[3,11,11,5,11,11,11,11,14,14,11,11,11],"n":["ContextSSE","borrow","borrow_mut","context_switch_sse","from","into","new","only_derive_is_allowed_to_implement_this_trait","restore_registers_sse","save_registers_sse","try_from","try_into","type_id"],"q":["context_switch_sse","","","","","","","","","","","",""],"d":["The registers saved before a context switch and restored …","","","Switches context from an SSE Task to another SSE Task.","","","Creates a new ContextSSE struct that will cause the …","","An assembly macro for saving regular x86_64 registers. by …","An assembly macro for saving regular x86_64 registers. by …","","",""],"i":[0,1,1,0,1,1,1,1,0,0,1,1,1],"f":[null,[[]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]],["contextsse",3]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"ContextSSE"]]},\
"crate_metadata":{"doc":"Defines types that contain metadata about crates loaded …","t":[13,13,17,4,17,13,13,13,13,13,3,3,3,17,17,3,13,17,4,6,6,3,6,17,13,13,6,3,6,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,12,12,12,12,12,12,12,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,5],"n":["Application","Bss","CRATE_HASH_DELIMITER","CrateType","DATA_BSS_SECTION_FLAGS","Data","EhFrame","Executable","GccExceptTable","Kernel","LoadedCrate","LoadedSection","LoadedSectionInner","MODULE_PREFIX_DELIMITER","RODATA_SECTION_FLAGS","RelocationEntry","Rodata","SECTION_HASH_DELIMITER","SectionType","Shndx","StrongCrateRef","StrongDependency","StrongSectionRef","TEXT_SECTION_FLAGS","Text","Userspace","WeakCrateRef","WeakDependent","WeakSectionRef","addend","address_range","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","copy_section_data_to","crate_name","crate_name_as_prefix","crate_name_without_hash","crates_dependent_on_me","crates_i_depend_on","data_pages","data_sections","data_sections_iter","debug_symbols_file","default","default_namespace_name","drop","eq","eq","eq","find_section","find_weak_dependent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_elf_relocation","from_module_name","get_function_section","get_type","global","global_sections","global_sections_iter","inner","into","into","into","into","into","into","into","into","is_absolute","is_data_or_bss","mapped_pages","mapped_pages_offset","name","name_without_hash","ne","new","object_file","offset","parent_crate","reexported_symbols","relocation","relocation","rodata_pages","section","section","section_name_without_hash","sections","sections_dependent_on_me","sections_i_depend_on","size","start_address","text_pages","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_dependencies","write_relocation"],"q":["crate_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A <code>bss</code> section is just like a data section, but is …","A crate’s name and its hash are separated by “-”, …","The type of a crate, based on its object file naming …","<code>.data</code> and <code>.bss</code> sections are read-write and non-executable.","A <code>data</code> section contains data that is both readable and …","The <code>.eh_frame</code> section contains information about stack …","","A <code>.gcc_except_table</code> section contains landing pads for …","","Represents a single crate whose object file has been  …","Represents a section that has been loaded and is part of …","The parts of a <code>LoadedSection</code> that may be mutable, i.e.,  …","The Theseus Makefile appends prefixes onto bootloader …","<code>.rodata</code> sections are read-only and non-executable.","The information necessary to calculate and write a …","An <code>rodata</code> section contains read-only data, i.e., …","A section’s demangled name and its hash are separated …","The possible types of sections that can be loaded from a …","A Section Header iNDeX (SHNDX), as specified by the ELF …","A Strong reference to a <code>LoadedCrate</code>.","A representation that the owner <code>A</code> of (a <code>LoadedSection</code> …","A Strong reference (<code>Arc</code>) to a <code>LoadedSection</code>.","<code>.text</code> sections are read-only and executable.","A <code>text</code> section contains executable code, i.e., functions. ","","A Weak reference to a <code>LoadedCrate</code>.","A representation that the <code>section</code> <code>A</code> in this struct …","A Weak reference (<code>Weak</code>) to a <code>LoadedSection</code>.","The value that is added to the source section’s address …","The range of <code>VirtualAddress</code>es covered by this section, …","","","","","","","","","","","","","","","","","","","","","","","","","Copies the actual data contents of this <code>LoadedSection</code> to …","The name of this crate.","Returns this crate name as a symbol prefix, including a …","Returns the substring of this crate’s name that …","Currently may contain duplicates!","Returns the set of crates that this crate depends on.  …","A tuple of:","The set of <code>.data</code> and <code>.bss</code> sections in this crate. The …","A convenience function to iterate over only the data …","The file that contains debug symbols for this crate.  …","","Returns the string suffix for use as the name  of the …","","","","","Returns the <strong>first</strong> <code>LoadedSection</code> that matches the given …","Returns the index of the first <code>WeakDependent</code> object in …","","","","","","","","","","","","","","","","","Returns a tuple of (CrateType, &str, &str) based on the …","Returns the <code>LoadedSection</code> of type <code>SectionType::Text</code> that …","Returns the type of this section.","Whether or not this section’s symbol was exported …","The set of global symbols in this crate, including …","A convenience function to iterate over only the global …","The inner contents of a section that could possibly change…","","","","","","","","","Returns true if the relocation type results in a …","Returns <code>true</code> if <code>Data</code> or <code>Bss</code>, otherwise <code>false</code>.","The <code>MappedPages</code> that cover this section.","The offset into the <code>mapped_pages</code> where this section starts","The full String name of this section, a fully-qualified …","Returns the substring of this section’s name that …","","Create a new <code>LoadedSection</code>, with an empty <code>dependencies</code> …","The object file that this crate was loaded from.","The offset from the starting virtual address of the …","The <code>LoadedCrate</code> object that contains/owns this section","The set of symbols that this crate’s global symbols are …","The details of the relocation action that was performed.","The details of the relocation action that was performed.","A tuple of:","A strong reference to the <code>LoadedSection</code> <code>B</code> that the owner …","A weak reference to the <code>LoadedSection</code> <code>A</code> that depends on …","Returns the substring of the given section’s name that …","A map containing all the sections in this crate. In …","The list of sections in foreign crates that depend on …","The list of sections in foreign crates that this section …","Returns the size in bytes of this section.","Returns the starting <code>VirtualAddress</code> of where this section …","A tuple of:","","","","","","","","","","","","","","","","","","","","","The type of this section, e.g., <code>.text</code>, <code>.rodata</code>, <code>.data</code>, …","The type of relocation calculation that is performed  to …","","","","","","","","","Same as [new()<code>](#method.new), but uses the given </code>…","Write an actual relocation entry."],"i":[1,2,0,0,0,2,2,1,2,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,1,0,0,0,3,4,5,4,1,2,6,7,8,3,5,4,1,2,6,7,8,3,2,7,8,3,2,7,8,3,4,5,5,5,5,5,5,5,5,5,6,1,5,1,2,3,5,4,5,4,1,2,7,8,3,5,4,1,2,6,7,8,3,3,1,5,4,4,5,5,4,5,4,1,2,6,7,8,3,3,2,4,4,4,4,3,4,5,3,4,5,7,8,5,7,8,4,5,6,6,4,4,5,2,7,8,3,5,4,1,2,6,7,8,3,5,4,1,2,6,7,8,3,4,3,5,4,1,2,6,7,8,3,4,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sectiontype",4]],[[],["strongdependency",3]],[[],["weakdependent",3]],[[],["relocationentry",3]],[[]],[[]],[[]],[[]],[[["loadedsection",3]],[["result",4],["str",15]]],null,[[],["string",3]],[[],["str",15]],[[],[["vec",3],["weakcrateref",6]]],[[],[["vec",3],["weakcrateref",6]]],null,null,[[]],null,[[],["loadedsectioninner",3]],[[],["str",15]],[[]],[[["cratetype",4]],["bool",15]],[[["sectiontype",4]],["bool",15]],[[["relocationentry",3]],["bool",15]],[[],[["option",4],["strongsectionref",6]]],[[["strongsectionref",6]],[["option",4],["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rela",3]],["relocationentry",3]],[[["str",15]],[["str",15],["result",4]]],[[["str",15]],[["option",4],["strongsectionref",6]]],[[],["sectiontype",4]],null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[],["str",15]],[[["relocationentry",3]],["bool",15]],[[["mutex",6],["arc",3],["string",3],["sectiontype",4],["usize",15],["weakcrateref",6],["bool",15],["virtualaddress",3]],["loadedsection",3]],null,null,null,null,null,null,null,null,null,[[["str",15]],["str",15]],null,null,null,[[],["usize",15]],[[],["virtualaddress",3]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["mutex",6],["arc",3],["string",3],["sectiontype",4],["usize",15],["weakcrateref",6],["vec",3],["bool",15],["virtualaddress",3],["weakdependent",3],["strongdependency",3],["vec",3]],["loadedsection",3]],[[["mappedpages",3],["virtualaddress",3],["bool",15],["relocationentry",3],["usize",15]],[["result",4],["str",15]]]],"p":[[4,"CrateType"],[4,"SectionType"],[3,"RelocationEntry"],[3,"LoadedSection"],[3,"LoadedCrate"],[3,"LoadedSectionInner"],[3,"StrongDependency"],[3,"WeakDependent"]]},\
"crate_name_utils":{"doc":"Utility functions for parsing and processing crate names …","t":[5,5,5,5,5],"n":["crate_name_from_path","get_containing_crate_name","get_containing_crate_name_ranges","is_valid_crate_name_char","replace_containing_crate_name"],"q":["crate_name_utils","","","",""],"d":["Returns the crate name that is derived from a crate …","Parses the given symbol string to try to find the name of …","Same as <code>get_containing_crate_name()</code>, but returns the …","Crate names must be only alphanumeric characters, an …","Replaces the <code>old_crate_name</code> substring in the given …"],"i":[0,0,0,0,0],"f":[[[["path",3]],["str",15]],[[["str",15]],[["str",15],["vec",3]]],[[["str",15]],[["vec",3],["range",3]]],[[["char",15]],["bool",15]],[[["str",15]],[["string",3],["option",4]]]],"p":[]},\
"crate_swap":{"doc":"Defines functions and types for crate swapping, used in …","t":[4,13,13,13,13,6,3,6,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["InvalidSwapRequest","NewCrateAbsolutePathNotFound","NewCratePathNotAbsolute","NewCratePrefixNotFound","OldCrateNotFound","StateTransferFunction","SwapRequest","SwapRequestList","borrow","borrow","borrow_mut","borrow_mut","clear_unloaded_crate_cache","eq","fmt","fmt","from","from","get_hash","hash","into","into","ne","new","swap_crates","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["crate_swap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The possible errors that can occur when trying to create …","The given absolute <code>Path</code> for the new crate object file …","The given <code>Path</code> for the new crate object file was not an …","A single crate object file could not be found by matching …","The old crate was not found in the old <code>CrateNamespace</code>. …","A state transfer function is an arbitrary function called …","This struct is used to specify the details of a …","A list of one or more <code>SwapRequest</code>s that is used by the …","","","","","Clears the cache of unloaded (swapped-out) crates saved …","","","","","","","","","","","Create a new <code>SwapRequest</code> that, when given to <code>swap_crates()</code>…","Swaps in new crates that can optionally replace existing …","","","","","",""],"i":[0,1,1,1,1,0,0,0,1,2,1,2,0,2,1,2,1,2,2,2,1,2,2,2,0,1,2,1,2,1,2],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["swaprequest",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[["swaprequest",3]],["bool",15]],[[["arc",3],["bool",15],["str",15],["cratenamespace",3],["option",4],["option",4],["intocrateobjectfile",4]],[["swaprequest",3],["result",4],["invalidswaprequest",4]]],[[["swaprequestlist",6],["option",4],["mmiref",6],["arc",3],["namespacedir",3],["bool",15],["vec",3],["string",3]],[["result",4],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"InvalidSwapRequest"],[3,"SwapRequest"]]},\
"debug_info":{"doc":"Support for DWARF debug information from ELF files.","t":[3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DebugSections","DebugSymbols","Loaded","Unloaded","borrow","borrow","borrow_mut","borrow_mut","debug_abbrev","debug_info","debug_line","debug_loc","debug_pubnames","debug_pubtypes","debug_ranges","debug_str","find_subprogram_containing","from","from","get_loaded","into","into","load","try_from","try_from","try_into","try_into","type_id","type_id","unload"],"q":["debug_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The set of debug sections that we need to use from a …","An enum describing the possible forms of debug …","The debug information has already been parsed from the …","Debug information that hasn’t yet been parsed from the …","","","","","Returns the <code>\\\".debug_abbrev\\\"</code> section.","Returns the <code>\\\".debug_info\\\"</code> section.","Returns the <code>\\\".debug_line\\\"</code> section.","Returns the <code>\\\".debug_loc\\\"</code> section.","Returns the <code>\\\".debug_pubnames\\\"</code> section.","Returns the <code>\\\".debug_pubtypes\\\"</code> section.","Returns the <code>\\\".debug_ranges\\\"</code> section.","Returns the <code>\\\".debug_str\\\"</code> section.","Finds the subprogram that contains the given instruction …","","","A convenience method for accessing the already-loaded …","","","Loads the debug symbols from the enclosed weak file …","","","","","","","Unloads these <code>DebugSymbols</code>, returning the enclosed …"],"i":[0,0,1,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,2,1,2,1,2,1,1],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[],[["debugabbrev",3],["endianslice",3]]],[[],[["endianslice",3],["debuginfo",3]]],[[],[["endianslice",3],["debugline",3]]],[[],[["option",4],["debugloc",3]]],[[],[["debugpubnames",3],["endianslice",3]]],[[],[["debugpubtypes",3],["endianslice",3]]],[[],[["debugranges",3],["endianslice",3]]],[[],[["debugstr",3],["endianslice",3]]],[[["virtualaddress",3]],[["result",6],["option",4]]],[[]],[[]],[[],[["option",4],["debugsections",3]]],[[]],[[]],[[["strongcrateref",6],["cratenamespace",3]],[["str",15],["debugsections",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["option",4],["debugsections",3]]]],"p":[[4,"DebugSymbols"],[3,"DebugSections"]]},\
"device_manager":{"doc":"","t":[5,5],"n":["early_init","init"],"q":["device_manager",""],"d":["This is for early-stage initialization of things like …","Initializes all other devices, such as the keyboard and …"],"i":[0,0],"f":[[[["memorymanagementinfo",3]],[["result",4],["str",15]]],[[["event",4],["queue",3]],[["result",4],["str",15]]]],"p":[]},\
"displayable":{"doc":"This crate defines a trait of <code>Displayable</code>. A displayable …","t":[8,10,10,10],"n":["Displayable","display","get_size","set_size"],"q":["displayable","","",""],"d":["The <code>Displayable</code> trait is an abstraction for any object …","Displays this <code>Displayable</code>’s content in the given …","Gets the size of the area occupied by the displayable.","Resizes the displayable area, but does not automatically …"],"i":[0,1,1,1],"f":[null,[[["coord",3],["framebuffer",3]],[["str",15],["result",4],["rectangle",3]]],[[]],[[["usize",15]]]],"p":[[8,"Displayable"]]},\
"e1000":{"doc":"","t":[3,17,17,11,11,11,5,11,11,11,11,11,11,11,0,11,11,11,3,11,11,12,12,12,5,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,5,12,12,12,12,12,11,11,11],"n":["E1000Nic","E1000_DEV","INTEL_VEND","borrow","borrow_mut","from","get_e1000_nic","get_received_frame","init","into","mac_address","poll_receive","send_packet","spoof_mac","test_e1000_driver","try_from","try_into","type_id","arp_packet","borrow","borrow_mut","dest1","dest2","dest3","dhcp_request_packet","from","h_type","hlen","into","oper","p_type","packet_type","plen","sha1","sha2","sha3","source1","source2","source3","spa1","spa2","test_e1000_nic_driver","tha1","tha2","tha3","tpa1","tpa2","try_from","try_into","type_id"],"q":["e1000","","","","","","","","","","","","","","","","","","e1000::test_e1000_driver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Struct representing an e1000 network interface card.","","","","","","Returns a reference to the E1000Nic wrapped in a …","","Initializes the new E1000 network interface card that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2],"f":[null,null,null,[[]],[[]],[[]],[[],[["mutexirqsafe",3],["option",4]]],[[],[["option",4],["receivedframe",3]]],[[["pcidevice",3]],[["mutexirqsafe",3],["str",15],["result",4]]],[[]],[[]],[[],[["result",4],["str",15]]],[[["transmitbuffer",3]],[["result",4],["str",15]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,null,null,[[],[["result",4],["str",15]]],[[]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15],["option",4]]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"E1000Nic"],[3,"arp_packet"]]},\
"entryflags_x86_64":{"doc":"This crate defines the structure of page table entry …","t":[18,18,18,3,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ACCESSED","DIRTY","EXCLUSIVE","EntryFlags","GLOBAL","HUGE_PAGE","NO_CACHE","NO_EXECUTE","PRESENT","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","cmp","contains","default","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_elf_program_flags","from_elf_section_flags","from_iter","from_multiboot2_section_flags","hash","insert","intersects","into","into_exclusive","into_huge","into_non_exclusive","into_writable","is_all","is_empty","is_exclusive","is_executable","is_huge","is_writable","ne","not","partial_cmp","remove","set","sub","sub_assign","toggle","try_from","try_into","type_id"],"q":["entryflags_x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The hardware will set this bit when the page is accessed.","The hardware will set this bit when the page has been …","Set this bit to indicate that the frame pointed to by …","Page table entry flags on the x86_64 architecture. ","Set this bit to indicate that this page is mapped across …","Set this bit if this page table entry represents a “huge…","If set, this page’s content is never cached, neither …","Set this bit to forbid execution of the mapped page. In …","If set, this page is currently “present” in memory.  …","If set, userspace (ring 3) can access this page. If not …","If set, writes to this page are allowed. If not set, this …","If set, writes to this page go directly through the cache …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns an empty set of flags","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Gets flags according to the properties of a program. ","Gets flags according to the properties of a section from …","","Gets flags according to the properties of a section from …","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the huge page …","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the writable …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if these flags are exclusive. ","Returns <code>true</code> if these flags are executable.","Returns <code>true</code> if the page the entry points to is a huge …","Returns <code>true</code> if the page is writable.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","",""],"i":[1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["entryflags",3]],[[["entryflags",3]],["entryflags",3]],[[["entryflags",3]]],[[["entryflags",3]],["entryflags",3]],[[["entryflags",3]]],[[],["u64",15]],[[["entryflags",3]],["entryflags",3]],[[["entryflags",3]]],[[]],[[]],[[],["entryflags",3]],[[["entryflags",3]],["ordering",4]],[[["entryflags",3]],["bool",15]],[[],["entryflags",3]],[[],["entryflags",3]],[[["entryflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]],[["entryflags",3],["option",4]]],[[["u64",15]],["entryflags",3]],[[["flags",3]],["entryflags",3]],[[["u64",15]],["entryflags",3]],[[["intoiterator",8]],["entryflags",3]],[[["elfsection",3]],["entryflags",3]],[[]],[[["entryflags",3]]],[[["entryflags",3]],["bool",15]],[[]],[[],["entryflags",3]],[[],["entryflags",3]],[[],["entryflags",3]],[[],["entryflags",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["entryflags",3]],["bool",15]],[[],["entryflags",3]],[[["entryflags",3]],[["ordering",4],["option",4]]],[[["entryflags",3]]],[[["entryflags",3],["bool",15]]],[[["entryflags",3]],["entryflags",3]],[[["entryflags",3]]],[[["entryflags",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"EntryFlags"]]},\
"environment":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,12],"n":["Environment","borrow","borrow_mut","default","from","get_wd_path","into","try_from","try_into","type_id","working_dir"],"q":["environment","","","","","","","","","",""],"d":["A structure that contains environment state for a given …","","","","","Gets the absolute file path of the working directory","","","","","The “current working directory”, i.e.,  where a task…"],"i":[0,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],["environment",3]],[[]],[[],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[3,"Environment"]]},\
"ethernet_smoltcp_device":{"doc":"This crate implements an interface/glue layer between our …","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["EthernetDevice","EthernetNetworkInterface","RxToken","TxToken","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","consume","consume","ethernet_addr","from","from","from","from","has_ip_addr","iface","into","into","into","into","ip_addrs","new","new","new_ipv4_interface","poll","receive","routes","routes_mut","set_ethernet_addr","transmit","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["ethernet_smoltcp_device","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An implementation of smoltcp’s <code>Device</code> trait, which …","A struct that implements the <code>NetworkInterface</code> trait for a …","The receive token type used by smoltcp,  which contains …","The transmit token type used by smoltcp, which contains …","","","","","","","","","","","","","","","","","","","","","","","","Creates a new instance of an ethernet network interface, …","Create a new instance of the <code>EthernetDevice</code>.","Creates a new ethernet network interface with an ipv4 …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,4,1,2,3,4,2,3,4,1,1,2,3,4,1,1,1,2,3,4,1,1,2,1,1,2,1,1,1,2,1,2,3,4,1,2,3,4,1,2,3,4],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["devicecapabilities",3]],[[["usize",15],["instant",3]],["result",6]],[[["instant",3]],["result",6]],[[],["ethernetaddress",3]],[[]],[[]],[[]],[[]],[[["ipaddress",4]],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[["mutexirqsafe",3],["option",4],["option",4],["into",8],["ipaddress",4],["ipcidr",4]],[["ethernetnetworkinterface",3],["result",4],["str",15]]],[[["mutexirqsafe",3]],["ethernetdevice",3]],[[["mutexirqsafe",3],["str",15]],[["ethernetnetworkinterface",3],["result",4],["str",15]]],[[["socketset",3],["instant",3]],[["bool",15],["result",6]]],[[],["option",4]],[[],["routes",3]],[[],["routes",3]],[[["ethernetaddress",3]]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"EthernetNetworkInterface"],[3,"EthernetDevice"],[3,"TxToken"],[3,"RxToken"]]},\
"event_types":{"doc":"","t":[4,13,13,3,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,12,11,11,11,12,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Event","ExitEvent","KeyboardEvent","KeyboardInputEvent","MouseMovementEvent","MousePositionEvent","MousePositionEvent","OutputEvent","WindowResizeEvent","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coordinate","default","fifth_button_hold","fmt","fmt","fmt","fourth_button_hold","from","from","from","gcoordinate","into","into","into","key_event","left_button_hold","new","new_keyboard_event","new_output_event","new_window_resize_event","right_button_hold","scrolling_down","scrolling_up","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["event_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","An input event from a keyboard","A keyboard event, indicating that one or more keys were …","An input event from a mouse","An event describing mouse position rather than movement …","The event tells application about mouse’s position …","An event indicating that another entity wants to print …","Tells an application that the window manager has resized …","","","","","","","","","","","","","the relative position in window","","whether the fifth button holds","","","","whether the fourth button holds","","","","the global position in window","","","","The key input event from i/o device","whether the left button holds","Create a new key board input event. <code>key</code> is the key input …","Create a new keyboard event","Create a new output event","Create a new window resize event","whether the right button holds","whether the mouse is scrolling down","whether the mouse is scrolling up","","","","","","","","","","","",""],"i":[0,1,1,0,1,0,1,1,1,2,1,3,2,1,3,2,1,3,2,1,3,2,2,2,2,1,3,2,2,1,3,2,2,1,3,3,2,3,1,1,1,2,2,2,2,1,3,2,1,3,2,1,3,2,1,3],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["mousepositionevent",3]],[[],["event",4]],[[],["keyboardinputevent",3]],[[]],[[]],[[]],null,[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,[[["keyevent",3]],["keyboardinputevent",3]],[[["keyevent",3]],["event",4]],[[],["event",4]],[[["rectangle",3]],["event",4]],null,null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Event"],[3,"MousePositionEvent"],[3,"KeyboardInputEvent"]]},\
"exceptions_early":{"doc":"Early exception handlers that do nothing but print an …","t":[5,5,5,5,5,5,5,5,5,5],"n":["breakpoint_handler","device_not_available_handler","divide_by_zero_handler","double_fault_handler","early_page_fault_handler","general_protection_fault_handler","init","invalid_opcode_handler","nmi_handler","segment_not_present_handler"],"q":["exceptions_early","","","","","","","","",""],"d":["exception 0x03","exception 0x07 see this: …","exception 0x00","","","","Initializes the given <code>IDT</code> with a basic set of early …","exception 0x06","exception 0x02",""],"i":[0,0,0,0,0,0,0,0,0,0],"f":[[[["exceptionstackframe",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3],["u64",15]]],[[["exceptionstackframe",3],["pagefaulterrorcode",3]]],[[["exceptionstackframe",3],["u64",15]]],[[["lockedidt",3],["option",4],["virtualaddress",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3],["u64",15]]]],"p":[]},\
"exceptions_full":{"doc":"Exception handlers that are task-aware, and will kill a …","t":[5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["bound_range_exceeded_handler","breakpoint_handler","debug_handler","device_not_available_handler","divide_by_zero_handler","double_fault_handler","general_protection_fault_handler","init","invalid_opcode_handler","invalid_tss_handler","overflow_handler","page_fault_handler","segment_not_present_handler"],"q":["exceptions_full","","","","","","","","","","","",""],"d":["","exception 0x03","exception 0x01","exception 0x07 see this: …","exception 0x00","exception 0x08","exception 0x0d","","exception 0x06","exception 0x0a","exception 0x04","exception 0x0e","exception 0x0b"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[["exceptionstackframe",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3],["u64",15]]],[[["exceptionstackframe",3],["u64",15]]],[[["lockedidt",3]]],[[["exceptionstackframe",3]]],[[["exceptionstackframe",3],["u64",15]]],[[["exceptionstackframe",3]]],[[["pagefaulterrorcode",3],["exceptionstackframe",3]]],[[["exceptionstackframe",3],["u64",15]]]],"p":[]},\
"fadt":{"doc":"Definitions for the ACPI RSDT and XSDT system tables.","t":[17,3,12,12,12,11,11,12,12,11,11,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,12,5,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12],"n":["FADT_SIGNATURE","Fadt","acpi_disable","acpi_enable","boot_architecture_flags","borrow","borrow_mut","c_state_control","century","clone","clone_into","day_alarm","dsdt","duty_offset","duty_width","firmware_ctrl","flags","flush_size","flush_stride","fmt","from","get","gpe0_block","gpe0_ength","gpe1_base","gpe1_block","gpe1_length","handle","header","into","month_alarm","only_derive_is_allowed_to_implement_this_trait","pm1_control_length","pm1_event_length","pm1a_control_block","pm1a_event_block","pm1b_control_block","pm1b_event_block","pm2_control_block","pm2_control_length","pm_timer_block","pm_timer_length","preferred_power_managament","pstate_control","s4_bios_req","sci_interrupt","smi_command_port","to_owned","try_from","try_into","type_id","worst_c2_latency","worst_c3_latency"],"q":["fadt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","The physical address of the DSDT table","","","","","","","","","Finds the FADT in the given <code>AcpiTables</code> and returns a …","","","","","","The handler for parsing the FADT table and adding it to …","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,[[]],[[]],null,null,[[],["fadt",3]],[[]],null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[]],[[["acpitables",3]],[["fadt",3],["option",4]]],null,null,null,null,null,[[["acpisignature",6],["acpitables",3],["usize",15],["physicaladdress",3]],[["result",4],["str",15]]],null,[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null],"p":[[3,"Fadt"]]},\
"fault_crate_swap":{"doc":"Defines support functions needed for swapping of …","t":[3,11,11,11,11,5,11,5,11,5,11,12,12,12,12,12,12,5,11,11,11,11],"n":["SwapRanges","borrow","borrow_mut","clone","clone_into","constant_offset_fix","default","do_self_swap","from","get_crate_to_swap","into","new_data","new_rodata","new_text","old_data","old_rodata","old_text","self_swap_handler","to_owned","try_from","try_into","type_id"],"q":["fault_crate_swap","","","","","","","","","","","","","","","","","","","","",""],"d":["A data structure to hold the ranges of memory used by the …","","","","","A support function for self swap of crate Iterates …","","For swapping of a crate from the identical object file in …","","This function returns the name of the crate to replace if …","","","","","","","","This function calls the crate swapping routine for a …","","","",""],"i":[0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1],"f":[null,[[]],[[]],[[],["swapranges",3]],[[]],[[["swapranges",3],["usize",15]],[["string",3],["result",4]]],[[],["swapranges",3]],[[["arc",3],["dirref",6],["str",15],["cratenamespace",3],["option",4],["string",3],["namespacedir",3],["bool",15],["vec",3]],[["swapranges",3],["string",3],["result",4]]],[[]],[[],[["option",4],["string",3]]],[[]],null,null,null,null,null,null,[[["str",15]],[["swapranges",3],["string",3],["result",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"SwapRanges"]]},\
"fault_log":{"doc":"This crate logs all the faults occuring within Theseus.  …","t":[13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,12,12,11,11,11,11,11,11,5,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,5,5,12,11,11,11,5,5,5,11,5,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BoundRangeExceeded","DeviceNotAvailable","DivideByZero","DoubleFault","FaultCrateReplaced","FaultEntry","FaultType","GeneralProtectionFault","InvalidOpCode","InvalidTSS","IterativelyCrateReplaced","MultipleFaultRecovery","NMI","None","Overflow","PageFault","Panic","RecoveryAction","SegmentNotPresent","TaskRestarted","UnknownException","action_taken","address_accessed","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_fault_log","clone","clone","clone","clone_into","clone_into","clone_into","core","crate_error_occured","eq","error_code","fault_type","fmt","fmt","fmt","from","from","from","from_exception_number","get_the_most_recent_match","instruction_pointer","into","into","into","log_exception","log_handled_fault","log_panic_entry","new","print_fault_log","remove_unhandled_exceptions","replaced_crates","running_app_crate","running_task","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["fault_log","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Crate where fault is observed is replaced, and then task …","A data structure to hold information about each fault. ","The possible faults (panics and exceptions) encountered  …","","","","Different Crate than the crate where fault is observed is …","This fault is handled as a recovery for different fault.  …","","No action taken on this fault.","","","","The different types of recovery procedures used for the  …","","Task restarted only. No crate replaced.","","Recovery Action taken as a result of the fault","For page faults the address the program attempted to …","","","","","","","Clears the log of faults so far occured in the system ","","","","","","","The core error occured","Crate the address at which exception occured located","","Error code returned with the exception","Type of fault","","","","","","","Utility function to get Fault type from exception number. ","Provides the most recent entry in the log for given crate …","Address at which exception occured","","","","Add a new exception instance to the fault log.  Generally …","Add a <code>FaultEntry</code> to fault log.","Add a new panic instance to the fault log. ","Returns an empty <code>FaultEntry</code> with only <code>fault_type</code> field …","Prints the fault log","Removes the unhandled faults from the fault log and …","List of crates reloaded from memory to recover from fault","If available the application crate that spawned the task","Task runnning immediately before the Exception","","","","","","","","","","","",""],"i":[1,1,1,1,2,0,0,1,1,1,2,2,1,2,1,1,1,0,1,2,1,3,3,1,2,3,1,2,3,0,1,2,3,1,2,3,3,3,2,3,3,1,2,3,1,2,3,0,0,3,1,2,3,0,0,0,3,0,0,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["faulttype",4]],[[],["recoveryaction",4]],[[],["faultentry",3]],[[]],[[]],[[]],null,null,[[["recoveryaction",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u8",15]],["faulttype",4]],[[["str",15]],[["option",4],["faultentry",3]]],null,[[]],[[]],[[]],[[["option",4],["option",4],["usize",15],["u8",15],["u64",15]]],[[["faultentry",3]]],[[["panicinfo",3]]],[[["faulttype",4]],["faultentry",3]],[[]],[[],[["faultentry",3],["vec",3]]],null,null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"FaultType"],[4,"RecoveryAction"],[3,"FaultEntry"]]},\
"first_application":{"doc":"This crate contains a simple routine to start the first …","t":[5],"n":["start"],"q":["first_application"],"d":["Starts the first applications that run in Theseus  by …"],"i":[0],"f":[[[],[["result",4],["str",15]]]],"p":[]},\
"font":{"doc":"","t":[17,17,7],"n":["CHARACTER_HEIGHT","CHARACTER_WIDTH","FONT_BASIC"],"q":["font","",""],"d":["The height of a character.","The width of a character.","The bitmap array of characters."],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"frame_allocator":{"doc":"Provides an allocator for physical memory frames. The …","t":[3,3,13,4,3,13,13,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11],"n":["AllocatedFrames","DeferredAllocAction","Free","MemoryRegionType","PhysicalMemoryRegion","Reserved","Unknown","allocate_frames","allocate_frames_at","allocate_frames_by_bytes","allocate_frames_by_bytes_at","allocate_frames_by_bytes_deferred","allocate_frames_deferred","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","drop","drop","empty","eq","fmt","fmt","fmt","frames","from","from","from","from","init","into","into","into","into","merge","new","split","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id"],"q":["frame_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a range of allocated <code>PhysicalAddress</code>es, …","A series of pending actions related to frame allocator …","Memory that is available for any general purpose.","Types of physical memory. See each variant’s …","A region of physical memory.","Memory that is reserved for special use and is only ever …","Memory of an unknown type. This is a default value that …","Allocates the given number of frames with no constraints …","Allocates the given number of frames starting at …","Allocates frames with no constraints on the starting …","Allocates frames starting at the given <code>PhysicalAddress</code> …","Similar to <code>allocated_frames_deferred()</code>, but accepts a …","The core frame allocation routine that allocates the …","","","","","","","","","","","","","","","","","Returns an empty AllocatedFrames object that performs no …","","","","","","","","","","Initialize the frame allocator with the given list of …","","","","","Merges the given <code>AllocatedFrames</code> object <code>ap</code> into this …","","Splits this <code>AllocatedFrames</code> into two separate …","","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,1,1,0,0,0,0,0,0,2,3,4,1,2,3,4,1,4,1,4,1,2,4,2,3,2,1,2,4,1,4,2,3,4,1,0,2,3,4,1,2,4,2,4,1,2,3,4,1,2,3,4,1,4,2,3,4,1],"f":[null,null,null,null,null,null,null,[[["usize",15]],[["allocatedframes",3],["option",4]]],[[["physicaladdress",3],["usize",15]],[["str",15],["result",4],["allocatedframes",3]]],[[["usize",15]],[["allocatedframes",3],["option",4]]],[[["physicaladdress",3],["usize",15]],[["str",15],["result",4],["allocatedframes",3]]],[[["option",4],["physicaladdress",3],["usize",15]],[["str",15],["result",4]]],[[["option",4],["physicaladdress",3],["usize",15]],[["str",15],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["physicalmemoryregion",3]],[[],["memoryregiontype",4]],[[]],[[]],[[],["framerange",3]],[[],["framerange",3]],[[]],[[]],[[],["allocatedframes",3]],[[["memoryregiontype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[],[["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[["allocatedframes",3]],[["allocatedframes",3],["result",4]]],[[["memoryregiontype",4],["framerange",3]],["physicalmemoryregion",3]],[[["frame",3]],[["allocatedframes",3],["result",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"MemoryRegionType"],[3,"AllocatedFrames"],[3,"DeferredAllocAction"],[3,"PhysicalMemoryRegion"]]},\
"framebuffer":{"doc":"This crate defines a <code>Framebuffer</code> structure, which is …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,0,11,11,11,3,8,3,12,10,11,11,12,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,10,11,11],"n":["Framebuffer","borrow","borrow_mut","buffer","buffer_mut","composite_buffer","contains","draw_pixel","fill","from","get_hash","get_pixel","get_size","hash","index_of","init","into","new","overlaps_with","overwrite_pixel","pixel","try_from","try_into","type_id","AlphaPixel","Pixel","RGBPixel","alpha","blend","blend","blend","blue","blue","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","composite_buffer","composite_buffer","composite_buffer","fmt","fmt","from","from","from","from","get_hash","get_hash","green","green","hash","hash","into","into","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","red","red","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","weight_blend","weight_blend","weight_blend"],"q":["framebuffer","","","","","","","","","","","","","","","","","","","","","","","","framebuffer::pixel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A framebuffer is a region of memory interpreted as a 2-D …","","","Returns a reference to the mapped memory of the buffer","Returns a mutable reference to the mapped memory of the …","Composites <code>src</code> to the buffer starting from <code>index</code>.","Checks if the given <code>coordinate</code> is within the framebuffer…","Draw a pixel at the given 1coordinate1.  The <code>pixel</code> will …","Fills (overwrites) the entire framebuffer with the given …","","","Returns the pixel value at the given <code>coordinate</code> in this …","Returns the <code>(width, height)</code> of this framebuffer.","","Returns the index of the given <code>coordinate</code> in this …","Initializes the final framebuffer based on VESA graphics …","","Creates a new framebuffer with rectangular dimensions of …","Checks if a framebuffer overlaps with an area.","Overwites a pixel at the given coordinate in this …","Defines the <code>Pixel</code> trait as well as basic pixel formats, …","","","","An Alpha Pixel is a pixel with an alpha channel","A pixel provides methods to blend with others.","An RGB Pixel is a pixel with no extra channel.","","blend with another pixel considering their extra channel.","","","","","","","","","","","","","Composites the <code>src</code> pixel slice to the <code>dest</code> pixel slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blend two pixels linearly with weights, as <code>blend</code> for …","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,2,3,4,2,4,2,4,2,4,2,4,2,4,2,3,4,2,4,2,4,4,2,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,3,4,2],"f":[null,[[]],[[]],[[],["boxrefmut",6]],[[],["boxrefmut",6]],[[["usize",15]]],[[["coord",3]],["bool",15]],[[["coord",3]]],[[]],[[]],[[],["u64",15]],[[["coord",3]],["option",4]],[[]],[[]],[[["coord",3]],[["option",4],["usize",15]]],[[],[["result",4],["framebuffer",3],["str",15]]],[[]],[[["option",4],["usize",15],["physicaladdress",3]],[["result",4],["framebuffer",3],["str",15]]],[[["usize",15],["coord",3]],["bool",15]],[[["coord",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["rgbpixel",3]],[[],["alphapixel",3]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["color",3]]],[[]],[[["color",3]]],[[]],[[],["u64",15]],[[],["u64",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]]],"p":[[3,"Framebuffer"],[3,"AlphaPixel"],[8,"Pixel"],[3,"RGBPixel"]]},\
"framebuffer_compositor":{"doc":"This crate defines a framebuffer compositor.","t":[17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CACHE_BLOCK_HEIGHT","CacheBlock","FRAME_COMPOSITOR","FrameCompositor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","composite","deref","from","from","from","initialize","into","into","into","overlaps_with","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["framebuffer_compositor","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The height of a cache block. In every iteration the …","A <code>CacheBlock</code> represents the cached …","The instance of the framebuffer compositor.","The framebuffer compositor structure. It caches …","","","","","","","","","","","","","","","","Checks if a cache block overlaps with another one","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,2,3,1,2,3,3,1,2,3,1,1,2,3,1,2,3,1,2,3],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["framebuffer",3]],[["result",4],["str",15]]],[[],["mutex",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cacheblock",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"CacheBlock"],[3,"FrameCompositor"],[3,"FRAME_COMPOSITOR"]]},\
"framebuffer_drawer":{"doc":"This crate contains a series of basic draw functions to …","t":[5,5,5,5],"n":["draw_circle","draw_line","draw_rectangle","fill_rectangle"],"q":["framebuffer_drawer","","",""],"d":["Draw a circle in the framebuffer. <code>coordinate</code> is the …","Draws a line in a framebuffer. The part exceeding the …","Draws a rectangle in a framebuffer. The part exceeding …","Fills a rectangle in a framebuffer with color. The part …"],"i":[0,0,0,0],"f":[[[["framebuffer",3],["pixel",8],["usize",15],["coord",3]]],[[["framebuffer",3],["coord",3],["pixel",8]]],[[["framebuffer",3],["pixel",8],["usize",15],["coord",3]]],[[["framebuffer",3],["pixel",8],["usize",15],["coord",3]]]],"p":[]},\
"framebuffer_printer":{"doc":"This crate contains functions to print strings in a …","t":[5,5,5],"n":["fill_blank","print_ascii_character","print_string"],"q":["framebuffer_printer","",""],"d":["Fill a blank text area (left, top, right, bottom) with …","Prints a character to the framebuffer at position (line, …","Prints a string in a framebuffer. Returns (column, line, …"],"i":[0,0,0],"f":[[[["framebuffer",3],["pixel",8],["rectangle",3]]],[[["usize",15],["framebuffer",3],["pixel",8],["u8",15],["coord",3]]],[[["str",15],["framebuffer",3],["usize",15],["pixel",8],["coord",3]]]],"p":[]},\
"fs_node":{"doc":"Defines traits for Files and Directories within the …","t":[13,6,8,8,13,4,6,8,6,6,10,11,11,11,11,11,10,11,11,11,11,10,11,10,11,10,11,10,10,10,10,11,10,11,11,11,11,10],"n":["Dir","DirRef","Directory","File","File","FileOrDir","FileRef","FsNode","WeakDirRef","WeakFileRef","as_mapping","borrow","borrow_mut","clone","clone_into","from","get","get_absolute_path","get_absolute_path","get_dir","get_file","get_name","get_name","get_parent_dir","get_parent_dir","insert","into","list","read","remove","set_parent_dir","set_parent_dir","size","to_owned","try_from","try_into","type_id","write"],"q":["fs_node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A reference to any type that implements the Directory …","Trait for directories, implementors of Directory must …","","","Allows us to return a generic type that can be matched by …","A reference to any type that implements the File trait.","A trait that covers any filesystem node, both files and …","A weak reference to any type that implements the …","A weak reference to any type that implements the File …","Returns a view of this file as an immutable memory-mapped …","","","","","","Gets either the file or directory in this <code>Directory</code>  on …","Recursively gets the absolute pathname as a String","","Like [<code>get()</code>], but only looks for directories matching the …","Like [<code>get()</code>], but only looks for files matching the given …","Returns the string name of the node","","Returns the parent directory of the current node.","","Inserts the given new file or directory into this …","","Lists the names of the nodes in this directory.","Reads the contents of this file starting at the given …","Removes a file or directory from this directory and …","Sets this node’s parent directory. This is useful for …","","Returns the size in bytes of this file.","","","","","Writes the given <code>buffer</code> to this file starting at the …"],"i":[1,0,0,0,1,0,0,0,0,0,2,1,1,1,1,1,3,4,1,3,3,4,1,4,1,3,1,3,2,3,4,1,2,1,1,1,1,2],"f":[null,null,null,null,null,null,null,null,null,null,[[],[["result",4],["str",15],["mappedpages",3]]],[[]],[[]],[[],["fileordir",4]],[[]],[[]],[[["str",15]],[["option",4],["fileordir",4]]],[[],["string",3]],[[],["string",3]],[[["str",15]],[["dirref",6],["option",4]]],[[["str",15]],[["fileref",6],["option",4]]],[[],["string",3]],[[],["string",3]],[[],[["dirref",6],["option",4]]],[[],[["dirref",6],["option",4]]],[[["fileordir",4]],[["str",15],["option",4],["result",4]]],[[]],[[],[["vec",3],["string",3]]],[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[["fileordir",4]],[["option",4],["fileordir",4]]],[[["weakdirref",6]]],[[["weakdirref",6]]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],[["result",4],["usize",15],["str",15]]]],"p":[[4,"FileOrDir"],[8,"File"],[8,"Directory"],[8,"FsNode"]]},\
"gdt":{"doc":"","t":[4,4,3,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,5,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AvailableSegmentSelector","Descriptor","Gdt","KernelCode","KernelData","SystemSegment","Tss","UserCode32","UserCode64","UserData32","UserData64","UserSegment","add_entry","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create_and_load_tss_gdt","create_gdt","fmt","from","from","from","get_segment_selector","into","into","into","kernel_code_segment","kernel_data_segment","load","new","to_string","try_from","try_from","try_from","try_into","try_into","try_into","tss_segment","type_id","type_id","type_id","user_code_32_segment","user_code_64_segment","user_data_32_segment","user_data_64_segment"],"q":["gdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The GDT SegmentSelectors available in Theseus. Use this …","We need 6 GDT segments even for 64-bit: …","The Global Descriptor Table, as specified by the x86_64 …","","","SystemSegment is used only for TSS","","","","","","UserSegment is used for both code and data segments,  in …","","","","","","","","This function first creates and sets up a new TSS with …","Creates and sets up a new GDT that refers to the given <code>TSS</code>…","","","","","Stupid hack because SegmentSelector is not …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,2,1,1,1,1,1,2,3,1,3,2,1,3,2,0,0,3,1,3,2,0,1,3,2,2,2,3,3,3,1,3,2,1,3,2,2,1,3,2,2,2,2,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["descriptor",4],["privilegelevel",4]],["segmentselector",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["virtualaddress",3],["u8",15]]],[[["taskstatesegment",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[["availablesegmentselector",4]],["segmentselector",3]],[[]],[[]],[[]],[[],["descriptor",4]],[[],["descriptor",4]],[[]],[[],["gdt",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["taskstatesegment",3]],["descriptor",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["descriptor",4]],[[],["descriptor",4]],[[],["descriptor",4]],[[],["descriptor",4]]],"p":[[4,"AvailableSegmentSelector"],[4,"Descriptor"],[3,"Gdt"]]},\
"heap":{"doc":"The global allocator for the system.  It starts off as a …","t":[7,17,3,11,11,11,11,11,11,5,11,5,11,11,11],"n":["GLOBAL_ALLOCATOR","HEAP_FLAGS","Heap","alloc","borrow","borrow_mut","dealloc","empty","from","init_single_heap","into","set_allocator","try_from","try_into","type_id"],"q":["heap","","","","","","","","","","","","","",""],"d":["","The heap mapped pages should be writable","The heap which is used as a global allocator for the …","","","","","Returns a heap in which only an empty initial allocator …","","Initializes the single heap, which is the first heap used …","","Sets a new default allocator to be used by the global …","","",""],"i":[0,0,0,1,1,1,1,1,1,0,1,0,1,1,1],"f":[null,null,null,[[["layout",3]]],[[]],[[]],[[["layout",3]]],[[],["heap",3]],[[]],[[["usize",15]]],[[]],[[["globalalloc",8],["box",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Heap"]]},\
"heapfile":{"doc":"An implementation of in-memory files, backed by heap …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["HeapFile","as_mapping","borrow","borrow_mut","from","from_vec","get_name","get_parent_dir","into","new","read","set_parent_dir","size","try_from","try_into","type_id","write"],"q":["heapfile","","","","","","","","","","","","","","","",""],"d":["A file in memory that is backed by the heap, i.e., a <code>Vec</code>.","","","","","Creates a new <code>HeapFile</code> in the given <code>parent</code> directory with …","","","","Creates a new file with empty content in the given <code>parent</code> …","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],[["mappedpages",3],["str",15],["result",4]]],[[]],[[]],[[]],[[["dirref",6],["string",3],["vec",3],["u8",15]],[["fileref",6],["str",15],["result",4]]],[[],["string",3]],[[],[["option",4],["dirref",6]]],[[]],[[["dirref",6],["string",3]],[["fileref",6],["str",15],["result",4]]],[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[["weakdirref",6]]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],[["result",4],["usize",15],["str",15]]]],"p":[[3,"HeapFile"]]},\
"hpet":{"doc":"Support for the x86 HPET: High Precision Event Timer.","t":[17,3,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,12,11,11,5,5,5,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["HPET_SIGNATURE","Hpet","HpetAcpiTable","HpetTimer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","comparator_value","configuration_and_capability","counter_period_femtoseconds","enable_counter","from","from","from","fsb_interrupt_route","general_capabilities_and_id","general_configuration","general_interrupt_status","get","get_counter","get_hpet","get_hpet_mut","handle","init_hpet","into","into","into","main_counter_value","num_timers","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","timers","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vendor_id"],"q":["hpet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A structure that offers access to HPET through its I/O …","The structure of the HPET ACPI table.","A structure that wraps HPET I/O register for each timer …","","","","","","","This timer’s Comparator Value register.","This timer’s Configuration and Capability register.","Returns the period of the HPET counter in femtoseconds, …","Turns on or off the main counter","","","","This timer’s FSB Interrupt Route register. Some info …","The General Capabilities and ID Register, at offset 0x0.","The General Configuration Register, at offset 0x10.","The General Interrupt Status Register, at offset 0x20.","Finds the HPET in the given <code>AcpiTables</code> and returns a …","Returns the HPET’s main counter value","Returns a reference to the HPET timer structure, wrapped …","Returns a mutable reference to the HPET timer structure, …","The handler for parsing the HPET table and adding it to …","Initializes the HPET counter-based timer based on the …","","","","The Main Counter Value Register, at offset 0xF0.","","","","","The timers (comparators) available for separate. There is …","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,2,2,1,1,1,2,3,2,1,1,1,3,1,0,0,0,3,1,2,3,1,1,1,2,3,1,1,2,3,1,2,3,1,2,3,1],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["u32",15]],[[["bool",15]]],[[]],[[]],[[]],null,null,null,null,[[["acpitables",3]],[["option",4],["hpetacpitable",3]]],[[],["u64",15]],[[],[["option",4],["rwlockreadguard",3]]],[[],[["rwlockwriteguard",6],["option",4]]],[[["acpisignature",6],["usize",15],["physicaladdress",3],["acpitables",3]],[["result",4],["str",15]]],[[["pagetable",3]],[["str",15],["result",4],["rwlock",6]]],[[]],[[]],[[]],null,[[],["u8",15]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u16",15]]],"p":[[3,"Hpet"],[3,"HpetTimer"],[3,"HpetAcpiTable"]]},\
"http_client":{"doc":"Functions for creating and sending HTTP requests and …","t":[3,6,3,11,11,11,11,11,11,5,11,11,11,12,11,11,11,12,12,5,12,11,11,11,11,11,11],"n":["ConnectedTcpSocket","HttpRequest","HttpResponse","as_result","as_result_err_str","borrow","borrow","borrow_mut","borrow_mut","check_http_request","from","from","header_bytes","header_length","into","into","new","packet","reason","send_request","status_code","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["http_client","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A convenience struct that packages together a connected …","TODO: create a proper HttpRequest type with header …","An HttpResponse that has been fully received from a …","Returns the content of this <code>HttpResponse</code> as a <code>Result</code>,  in …","A convenience function that just returns a standard Err …","","","","","Checks to see if the provided HTTP request can be …","","","","The length of all headers","","","Create a new <code>ConnectedTcpSocket</code> with the given necessary …","The actual array of raw bytes received from the server,  …","The reason, e.g., “OK”, “File not found”","Sends the given HTTP request over the network via the …","The status code, e.g., 200, 404","","","","","",""],"i":[0,0,0,1,1,1,2,1,2,0,1,2,1,1,1,2,2,1,1,0,1,1,2,1,2,1,2],"f":[null,null,null,[[],["result",4]],[[],[["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],null,[[]],[[]],[[["sockethandle",3],["networkinterfaceref",6],["socketset",3]],[["result",4],["connectedtcpsocket",3],["str",15]]],null,null,[[["option",4],["connectedtcpsocket",3],["u64",15],["httprequest",6]],[["result",4],["httpresponse",3],["str",15]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"HttpResponse"],[3,"ConnectedTcpSocket"]]},\
"intel_ethernet":{"doc":"Definitions of descriptor types and type aliases for NIC …","t":[0,3,3,3,3,17,17,8,17,17,17,17,17,17,17,17,17,17,17,8,11,11,11,11,11,11,11,11,12,12,12,12,12,12,10,11,11,12,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,10,11,11,11,11,11,11,11,11,10,11,11,12,12,11,11,11,11,12,12,12,12,12,10,11,11,10,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11],"n":["descriptors","AdvancedRxDescriptor","AdvancedTxDescriptor","LegacyRxDescriptor","LegacyTxDescriptor","RX_STATUS_DD","RX_STATUS_EOP","RxDescriptor","TX_CMD_DEXT","TX_CMD_EOP","TX_CMD_IC","TX_CMD_IDE","TX_CMD_IFCS","TX_CMD_RPS","TX_CMD_RS","TX_CMD_VLE","TX_DTYP_ADV","TX_PAYLEN_SHIFT","TX_STATUS_DD","TxDescriptor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum","cmd","cso","css","data_len","dcmd","descriptor_done","descriptor_done","descriptor_done","dtyp_mac_rsv","end_of_packet","end_of_packet","end_of_packet","errors","fmt","fmt","fmt","from","from","from","from","get_ext_error","get_ext_status","get_fdf_id","get_hdr_len","get_packet_type","get_pkt_len","get_rsccnt","get_rss_hash","get_rss_type","get_sph","get_vlan_tag","header_buffer_address","init","init","init","init","init","init","into","into","into","into","length","length","length","length","length","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","packet_buffer_address","packet_buffer_address","paylen_popts_cc_idx_sta","phys_addr","phys_addr","reset_status","reset_status","reset_status","send","send","send","set_packet_address","set_packet_address","set_packet_address","status","status","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vlan","vlan","wait_for_packet_tx","wait_for_packet_tx","wait_for_packet_tx"],"q":["intel_ethernet","intel_ethernet::descriptors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The different descriptor types used by Intel NICs. …","Advanced Receive Descriptor used in the Ixgbe driver. It …","Advanced Transmit Descriptor used in the Ixgbe driver. It …","This struct is a Legacy Receive Descriptor.  The driver …","This struct is a Legacy Transmit Descriptor.  It’s the …","Rx Status: Descriptor Done","Rx Status: End of Packet","A trait for the minimum set of functions needed to …","Tx Command: Descriptor Extension (Advanced format)","Tx Command: End of Packet","Tx Command: Insert Checksum","Tx Command: Interrupt Delay Enable","Tx Command: Insert MAC FCS","Tx Command: Report Packet Sent","Tx Command: Report Status","Tx Command: VLAN Packet Enable","Tx Descriptor Type: advanced","Tx Descriptor paylen shift The paylen is located at bit …","Tx Status: descriptor Done","A trait for the minimum set of functions needed to …","","","","","","","","","Checksum value of the packet after the IP header till the …","Command bits","Checksum offset: where to insert the checksum from the …","Checksum start: where to begin computing the checksum, if …","Length of data buffer","Command bits","Returns true if the descriptor has a received packet …","","","dtyp (Descriptor Type) occupies bits [7:4], mac (option …","Returns true if the descriptor’s packet buffer is the …","","","Receive errors","","","","","","","","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Starting physcal address of the receive buffer for the …","Initializes a receive descriptor by clearing its status  …","Initializes a transmit descriptor by clearing all of its …","","","","","","","","","The length of the packet in the descriptor’s packet …","","","Length of the transmit buffer in bytes","Length of the receive buffer in bytes","","","","","Starting physcal address of the receive buffer for the …","Starting physical address of the receive buffer for the …","paylen (size in bytes of the data buffer in host memory, …","The starting physical address of the transmit buffer","The starting physical address of the receive buffer","Clears the status bits of the descriptor.","","","Updates the transmit descriptor to send the packet. We …","","","Updates the descriptor’s physical address.","","","Status bits","Status bits which tell if the descriptor has been used","","","","","","","","","","","","","Vlan tags ","Vlan tags","Polls the Descriptor Done bit until the packet has been …","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,2,1,1,1,4,4,5,2,3,4,5,2,3,2,1,2,3,1,2,3,4,3,3,3,3,3,3,3,3,3,3,3,3,5,6,1,2,3,4,1,2,3,4,5,2,3,1,2,1,2,3,4,3,4,4,1,2,5,2,3,6,1,4,5,2,3,1,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,6,1,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["bool",15]],[[],["u64",15]],null,[[["physicaladdress",3]]],[[]],[[]],[[["physicaladdress",3]]],[[["physicaladdress",3]]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[["physicaladdress",3],["u16",15]]],[[["physicaladdress",3],["u16",15]]],[[["physicaladdress",3],["u16",15]]],[[["physicaladdress",3]]],[[["physicaladdress",3]]],[[["physicaladdress",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]]],"p":[[3,"LegacyTxDescriptor"],[3,"LegacyRxDescriptor"],[3,"AdvancedRxDescriptor"],[3,"AdvancedTxDescriptor"],[8,"RxDescriptor"],[8,"TxDescriptor"]]},\
"interrupts":{"doc":"Basic interrupt handling structures and simple handler …","t":[7,7,5,5,5,5,5,5,5,5,5],"n":["APIC_TIMER_TICKS","IDT","deregister_interrupt","eoi","init","init_ap","init_handlers_apic","init_handlers_pic","is_exception_handler_with_error_code","register_interrupt","register_msi_interrupt"],"q":["interrupts","","","","","","","","","",""],"d":["","The single system-wide IDT Note: this could be per-core …","Returns an interrupt to the system by setting the handler …","Send an end of interrupt signal, which works for all …","initializes the interrupt subsystem and properly sets up …","Similar to <code>init()</code>, but for APs to call after the BSP has …","","","Returns <code>true</code> if the given address is the exception …","Registers an interrupt handler.  The function fails if …","Returns an interrupt number assigned by the OS and sets …"],"i":[0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[["u8",15],["handlerfunc",6]],[["result",4],["str",15]]],[[["option",4],["u8",15]]],[[["virtualaddress",3]],[["result",4],["lockedidt",3],["str",15]]],[[["u8",15],["virtualaddress",3]],[["result",4],["lockedidt",3],["str",15]]],[[]],[[]],[[["u64",15]],["bool",15]],[[["u8",15],["handlerfunc",6]],[["result",4],["str",15]]],[[["handlerfunc",6]],[["str",15],["u8",15],["result",4]]]],"p":[]},\
"ioapic":{"doc":"","t":[3,11,11,11,11,5,5,5,11,11,12,11,11,11,11,11,11,11,11],"n":["IoApic","arbitration_id","borrow","borrow_mut","from","get_first_ioapic","get_ioapic","get_ioapics","handles_irq","id","id","into","mask_irq","new","set_irq","try_from","try_into","type_id","version"],"q":["ioapic","","","","","","","","","","","","","","","","","",""],"d":["A representation of an IoApic (x86-specific interrupt …","gets this IoApic’s arbitration id.","","","","Returns the first <code>IoApic</code> that was created, if any, after …","If an <code>IoApic</code> with the given <code>id</code> exists, then lock it …","Returns a reference to the list of IoApics.","Returns whether this IoApic handles the given <code>irq_num</code>, …","gets this IoApic’s id.","The ID of this IoApic.","","Masks (disables) the given IRQ line.  NOTE: this function …","Creates a new IoApic struct from the given <code>id</code>, …","Set IRQ to an interrupt vector.","","","","gets this IoApic’s version."],"i":[0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["u32",15]],[[]],[[]],[[]],[[],[["option",4],["mutexguard",3]]],[[["u8",15]],[["option",4],["mutexguard",3]]],[[],["atomicmap",3]],[[["u32",15]],["bool",15]],[[],["u32",15]],null,[[]],[[["u8",15]]],[[["u32",15],["pagetable",3],["u8",15],["physicaladdress",3]],[["result",4],["str",15]]],[[["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u32",15]]],"p":[[3,"IoApic"]]},\
"ixgbe":{"doc":"An ixgbe driver for a 82599 10GbE Network Interface Card.","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,17,17,7,3,13,13,13,13,4,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,5,5],"n":["Buffer10KiB","Buffer11KiB","Buffer12KiB","Buffer13KiB","Buffer14KiB","Buffer15KiB","Buffer16KiB","Buffer1KiB","Buffer2KiB","Buffer3KiB","Buffer4KiB","Buffer5KiB","Buffer6KiB","Buffer7KiB","Buffer8KiB","Buffer9KiB","FilterProtocol","INTEL_82599","INTEL_VEND","IXGBE_NICS","IxgbeNic","LS100","LS1000","LS10000","LSUnknown","LinkSpeedMbps","Other","RxBufferSizeKiB","Sctp","Tcp","Udp","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","device_id","enable_rss","eq","from","from","from","from","get_ixgbe_nic","get_ixgbe_nics_list","get_received_frame","get_stats","init","into","into","into","into","link_speed","link_status","mac_address","mem_map_msix","poll_receive","send_packet","set_5_tuple_filter","spoof_mac","test_packets","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","virtual_function","create_dhcp_test_packet","create_raw_packet","dhcp_request_packet","create_virtual_nic"],"q":["ixgbe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ixgbe::test_packets","","","ixgbe::virtual_function"],"d":["","","","","","","","","","","","","","","","","Options for the filter protocol used in the 5-tuple …","Device ID for the 82599ES, used to identify the device …","Vendor ID for Intel","All the 82599 NICs found in the PCI space are initialized …","A struct representing an ixgbe network interface card.","","","","","Possible link speeds of the 82599 NIC","","The set of receive buffer sizes that are accepted by the …","","","","","","","","","","","","","","Returns the device id of the PCI device.","Enable multiple receive queues with RSS. Part of queue …","","","","","","Returns a reference to the IxgbeNic wrapped in a …","Returns a reference to the list of all initialized ixgbe …","","Returns the Rx and Tx statistics in the form: (Good Rx …","Store required values from the device’s PCI config …","","","","","Returns link speed in Mb/s","Returns value of (links, links2) registers","","Returns the memory mapped msix vector table","","","Sets the L3/L4 5-tuple filter which can do an exact match …","","A set of functions to create packets for testing the NIC …","","","","","","","","","","","","","","Interface for an application to request a <code>VirtualNIC</code> from …","Creates a <code>TransmitBuffer</code> containing a dhcp packet.","Creates a <code>TransmitBuffer</code> that contains a packet with only …","Sends a dhcp request packet on the ixgbe NIC.","Create a virtual NIC from the ixgbe device."],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,2,2,2,0,3,0,3,3,3,4,3,2,1,4,3,2,1,1,1,4,4,2,4,3,2,1,0,0,4,4,4,4,3,2,1,4,4,4,4,4,4,4,4,0,1,4,3,2,1,4,3,2,1,4,3,2,1,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rxbuffersizekib",4]],[[]],[[],["pcilocation",3]],[[["intelixgberegisters2",3],["intelixgberegisters3",3]],[["result",4],["str",15]]],[[["linkspeedmbps",4]],["bool",15]],[[]],[[]],[[]],[[]],[[["pcilocation",3]],[["result",4],["str",15],["mutexirqsafe",3]]],[[],[["option",4],["vec",3]]],[[],[["receivedframe",3],["option",4]]],[[]],[[["pcidevice",3],["option",4],["vec",3],["u16",15],["bool",15],["pcilocation",3],["linkspeedmbps",4],["rxbuffersizekib",4]],[["result",4],["str",15],["mutexirqsafe",3]]],[[]],[[]],[[]],[[]],[[],["linkspeedmbps",4]],[[]],[[]],[[["pcidevice",3]],[["str",15],["result",4],["boxrefmut",6]]],[[],[["result",4],["str",15]]],[[["transmitbuffer",3]],[["result",4],["str",15]]],[[["option",4],["filterprotocol",4],["u16",15],["option",4],["option",4],["u8",15]],[["str",15],["u8",15],["result",4]]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],[["result",4],["str",15],["transmitbuffer",3]]],[[],[["result",4],["str",15],["transmitbuffer",3]]],[[["pcilocation",3]],[["result",4],["str",15]]],[[["pcilocation",3],["usize",15],["vec",3]],[["str",15],["virtualnic",3],["result",4]]]],"p":[[4,"RxBufferSizeKiB"],[4,"LinkSpeedMbps"],[4,"FilterProtocol"],[3,"IxgbeNic"]]},\
"kernel_config":{"doc":"","t":[0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"n":["display","memory","time","FRAMEBUFFER_MAX_RESOLUTION","ADDRESSABILITY_PER_P4_ENTRY","BYTES_PER_ADDR","ENTRIES_PER_PAGE_TABLE","KERNEL_HEAP_INITIAL_SIZE","KERNEL_HEAP_MAX_SIZE","KERNEL_HEAP_P4_INDEX","KERNEL_HEAP_START","KERNEL_OFFSET","KERNEL_STACK_ALLOCATOR_BOTTOM","KERNEL_STACK_ALLOCATOR_TOP_ADDR","KERNEL_STACK_P4_INDEX","KERNEL_STACK_SIZE_IN_PAGES","KERNEL_TEXT_MAX_SIZE","KERNEL_TEXT_P4_INDEX","KERNEL_TEXT_START","MAX_PAGE_NUMBER","MAX_VIRTUAL_ADDRESS","P1_INDEX_SHIFT","P2_INDEX_SHIFT","P3_INDEX_SHIFT","P4_INDEX_SHIFT","PAGE_SHIFT","PAGE_SIZE","RECURSIVE_P4_INDEX","TEMPORARY_PAGE_VIRT_ADDR","USER_STACK_ALLOCATOR_BOTTOM","USER_STACK_ALLOCATOR_TOP_ADDR","USER_STACK_P4_INDEX","CONFIG_HEARTBEAT_PERIOD_MS","CONFIG_PIT_FREQUENCY_HZ","CONFIG_RTC_FREQUENCY_HZ","CONFIG_TIMESLICE_PERIOD_MICROSECONDS"],"q":["kernel_config","","","kernel_config::display","kernel_config::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","kernel_config::time","","",""],"d":["","WARNING: DO NOT USE ANY ADDRESS THAT MAPS TO THE SAME P4 …","","The maximum resolution <code>(width, height)</code> of the graphical …","Value: 512 GiB.","64-bit architecture results in 8 bytes per address.","Value: 512. ","","the kernel heap gets the whole 509th P4 entry.","Value: 509. The 509th entry is used for the kernel heap","The higher-half heap gets the 512GB address range …","The virtual address where the initial kernel (the …","the kernel stack allocator gets the 508th P4 entry of …","the highest actually usuable address in the kernel stack …","Value: 508. The 508th entry is used for all kernel stacks","","The size in bytes, not in pages.","Value: 511. The 511th entry is used for kernel text …","The kernel text region is where we load kernel modules.  …","","","Value: 0. Shift the Page number (not the address!) by …","Value: 9. Shift the Page number (not the address!) by …","Value: 18. Shift the Page number (not the address!) by …","Value: 27. Shift the Page number (not the address!) by …","The lower 12 bits of a virtual address correspond to the …","Page size is 4096 bytes, 4KiB pages.","Value: 510. The 510th entry is used for the recursive P4 …","","the userspace stack allocators (one per userspace task) …","the highest actually usuable address in each userspace …","Value: 507. The 507th entry is used for all userspace …","the heartbeat period in milliseconds","the chosen interrupt frequency (in Hertz) of the PIT …","the chosen interrupt frequency (in Hertz) of the RTC. …","The timeslice period, specified in microseconds."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[]},\
"keyboard":{"doc":"","t":[5,5],"n":["handle_keyboard_input","init"],"q":["keyboard",""],"d":["returns Ok(()) if everything was handled properly. …","Initialize the keyboard driver.  Arguments: a reference …"],"i":[0,0],"f":[[[["bool",15],["u8",15]],[["result",4],["str",15]]],[[["queue",3],["event",4]]]],"p":[]},\
"libterm":{"doc":"A basic terminal emulator library.","t":[17,17,13,4,3,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12],"n":["FONT_BACKGROUND_COLOR","FONT_FOREGROUND_COLOR","OffEndBound","ScrollError","Terminal","borrow","borrow","borrow_mut","borrow_mut","clear","cursor","cursor","display_cursor","from","from","get_cursor_offset_from_end","get_event","get_text_dimensions","insert_char","into","into","move_screen_line_down","move_screen_line_up","move_screen_page_down","move_screen_page_up","move_screen_to_begin","move_screen_to_end","new","print_to_terminal","refresh_display","remove_char","resize","try_from","try_from","try_into","try_into","type_id","type_id","update_cursor_pos","window","Cursor","blink","borrow","borrow_mut","default","disable","display","enable","from","into","offset_from_end","offset_from_end","reset","set_offset_from_end","set_underlying_char","show","try_from","try_into","type_id","underlying_char","underlying_char"],"q":["libterm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libterm::cursor","","","","","","","","","","","","","","","","","","","",""],"d":["","","Occurs when a index-calculation returns an index that is …","Error type for tracking different scroll errors that a …","An instance of a graphical terminal emulator.","","","","","Clear the scrollback buffer and reset the scroll …","","The cursor of the terminal.","Display the cursor of the terminal.","","","Gets the position of the cursor relative to the end of …","Gets an event from the window’s event queue.","Gets the width and height of the text displayable in …","Insert a character to the terminal.","","","Scroll the screen a line down.","Scroll the screen a line up.","Scroll the screen a page down.","Scroll the screen a page up.","Scroll the screen to the very beginning.","Scroll the screen to the very end.","Creates a new terminal and adds it to the window manager …","Adds a string to be printed to the terminal to the …","Actually refresh the screen. Currently it’s expensive.","Remove a character from the terminal.","Resizes this terminal and its underlying text display and …","","","","","","","Updates the position of a cursor.","The terminal’s own window.","The cursor structure used in the terminal. A cursor is a …","Let a cursor blink. It is invoked in a loop.","","","","Disable a cursor","Display a cursor in a framebuffer","Enable a cursor","","","Gets the position of the cursor relative to the end of …","The position of the cursor relative to the end of …","Reset the state of the cursor as unseen","Sets the position of the cursor relative to the end of …","Sets the character at the position of the cursor","Whether a cursor is seen","","","","Gets the character at the position of the cursor","The underlying character at the position of the cursor. …"],"i":[0,0,1,0,0,1,2,1,2,2,0,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,[[],[["result",4],["str",15]]],[[]],[[]],[[],["usize",15]],[[],[["option",4],["event",4]]],[[]],[[["usize",15],["char",15]],[["result",4],["str",15]]],[[]],[[]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[],[["str",15],["result",4],["terminal",3]]],[[["string",3]]],[[],[["result",4],["str",15]]],[[["usize",15]],[["result",4],["str",15]]],[[["rectangle",3]],[["result",4],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["u8",15]]],null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[["coord",3],["usize",15],["framebuffer",3]],[["str",15],["result",4],["rectangle",3]]],[[]],[[]],[[]],[[],["usize",15]],null,[[]],[[["usize",15]]],[[["u8",15]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u8",15]],null],"p":[[4,"ScrollError"],[3,"Terminal"],[3,"Cursor"]]},\
"libtest":{"doc":"","t":[14,3,17,11,11,5,5,5,11,11,5,5,5,11,12,12,12,12,12,5,12,12,5,5,12,5,11,11,11],"n":["CPU_ID","Stats","THRESHOLD_ERROR_RATIO","borrow","borrow_mut","calculate_stats","check_myrq","cycle_count_overhead","fmt","from","hpet_2_ns","hpet_2_us","hpet_timing_overhead","into","max","mean","median","min","mode","nr_tasks_in_rq","p_25","p_75","pick_free_core","start_counting_reference_cycles","std_dev","stop_counting_reference_cycles","try_from","try_into","type_id"],"q":["libtest","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","Helper function to calculate statistics of a provided …","True if only two tasks are running in the current …","Measures the overhead of using the PMU reference cycles …","","","Helper function to convert ticks to nano seconds","Helper function to convert ticks to micro seconds","Measures the overhead of using the hpet timer.  Calls …","","","","","","","Helper function return the tasks in a given core’s …","","","Helper function to pick a free child core if possible","Starts the PMU counter to measure reference cycles. The …","","Stops the PMU counter and stores the reference cycles …","","",""],"i":[0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,1],"f":[null,null,null,[[]],[[]],[[["vec",3]],[["option",4],["stats",3]]],[[],["bool",15]],[[],[["str",15],["result",4],["u64",15]]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[],[["str",15],["result",4],["u64",15]]],[[]],null,null,null,null,null,[[["u8",15]],[["option",4],["usize",15]]],null,null,[[],[["str",15],["u8",15],["result",4]]],[[],[["result",4],["counter",3],["str",15]]],null,[[["counter",3]],[["str",15],["result",4],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Stats"]]},\
"logger":{"doc":"A basic logger implementation for system-wide logging in …","t":[13,13,13,13,4,6,13,13,13,13,13,11,11,11,11,5,11,5,5,11,11,11,5,5],"n":["Black","Blue","Cyan","Green","LogColor","LogOutputFunc","Purple","Red","Reset","White","Yellow","as_terminal_string","borrow","borrow_mut","from","init","into","mirror_to_vga","set_log_level","try_from","try_into","type_id","write_fmt","write_str"],"q":["logger","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","See ANSI terminal formatting schemes","","","","","","","","","","","Initialize the Theseus system logger.","","Call this to enable mirroring logging macros to the screen","Set the log level, which determines whether a given log …","","","","Convenience function for writing formatted arguments to …","Convenience function for writing a simple string to the …"],"i":[1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[]],[[]],[[]],[[["level",4],["option",4]],[["setloggererror",3],["result",4]]],[[]],[[["logoutputfunc",6]]],[[["level",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arguments",3]],["result",6]],[[["str",15]],["result",6]]],"p":[[4,"LogColor"]]},\
"madt":{"doc":"Support for the MADT ACPI table,  which includes …","t":[13,13,13,13,17,3,4,3,3,3,3,3,3,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["IntSrcOverride","IoApic","LocalApic","LocalApicAddressOverride","MADT_SIGNATURE","Madt","MadtEntry","MadtIntSrcOverride","MadtIoApic","MadtIter","MadtLocalApic","MadtLocalApicAddressOverride","MadtNonMaskableInterrupt","NonMaskableInterrupt","UnknownOrCorrupt","address","apic_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bsp_init","bus_source","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","find_nmi_entry_for_processor","flags","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","gsi","gsi_base","handle","id","into","into","into","into","into","into","into","into","into_iter","irq_source","iter","lint","local_apic_phys_addr","next","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","phys_addr","processor","processor","sdt","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["madt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A Interrupt Source Override MADT entry.","A IOAPIC MADT entry.","A Local APIC MADT entry.","A Local APIC Address Override MADT entry.","","A wrapper around the MADT ACPI table (Multiple APIC …","The set of possible MADT Entries.","MADT Interrupt Source Override","MADT I/O APIC","An Iterator over the dynamic entries of the MADT. Its …","MADT Local APIC","MADT Local APIC Address Override.  If this struct exists, …","MADT Non-maskable Interrupt. Use these to configure the …","A Non-Maskable Interrupt MADT entry.","The MADT table had an entry of an unknown type or …","I/O APIC address","Local APIC ID","","","","","","","","","","","","","","","","","Performs initialization functions of the IOAPIC and …","Bus Source","","","","","","","","","","","","","","","Finds the Non-Maskable Interrupt (NMI) entry in the MADT …","Returns the <code>flags</code> value in this MADT table.","Flags. 1 means that the processor is enabled","Flags","Flags","","","","","","","","","","","","","","","Finds the MADT in the given <code>AcpiTables</code> and returns a …","Global system interrupt","Global system interrupt base","The handler for parsing the MADT table and adding it to …","I/O APIC ID","","","","","","","","","","IRQ Source","Returns an iterator over the MADT’s entries, which are …","LINT (either 0 or 1)","Returns the Local APIC physical address value in this …","","","","","","","Local APIC physical address","Processor ID","which processor this is for, 0xFF means all processors","Returns a reference to the <code>Sdt</code> header in this MADT table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,2,3,4,5,1,3,2,6,7,8,4,5,1,3,2,6,7,8,4,6,5,1,3,2,6,7,8,5,1,3,2,6,7,8,0,4,3,6,7,1,3,2,6,7,8,4,5,1,3,2,6,7,8,4,6,2,0,2,4,5,1,3,2,6,7,8,5,6,4,7,4,5,3,2,6,7,8,8,3,7,4,5,1,3,2,6,7,8,4,5,1,3,2,6,7,8,4,5,1,3,2,6,7,8,4,5,1,3,2,6,7,8],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagetable",3]],[["result",4],["str",15]]],null,[[],["madtiter",3]],[[],["madtentry",4]],[[],["madtlocalapic",3]],[[],["madtioapic",3]],[[],["madtintsrcoverride",3]],[[],["madtnonmaskableinterrupt",3]],[[],["madtlocalapicaddressoverride",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15],["madtiter",3]]],[[],["u32",15]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["acpitables",3]],[["option",4],["madt",3]]],null,null,[[["acpisignature",6],["acpitables",3],["usize",15],["physicaladdress",3]],[["result",4],["str",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["madtiter",3]],null,[[],["u32",15]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["sdt",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"MadtEntry"],[3,"MadtIoApic"],[3,"MadtLocalApic"],[3,"Madt"],[3,"MadtIter"],[3,"MadtIntSrcOverride"],[3,"MadtNonMaskableInterrupt"],[3,"MadtLocalApicAddressOverride"]]},\
"mapper_spillful":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"memfs":{"doc":"This crate contains an implementation of an in-memory …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MemFile","as_mapping","borrow","borrow_mut","from","from_mapped_pages","get_name","get_parent_dir","into","new","read","set_parent_dir","size","try_from","try_into","type_id","write"],"q":["memfs","","","","","","","","","","","","","","","",""],"d":["The struct that represents a file in memory that is …","","","","","Creates a new <code>MemFile</code> in the given <code>parent</code> directory with …","","","","Allocates writable memory space for the given <code>contents</code> …","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],[["str",15],["result",4],["mappedpages",3]]],[[]],[[]],[[]],[[["dirref",6],["string",3],["mappedpages",3],["usize",15]],[["fileref",6],["str",15],["result",4]]],[[],["string",3]],[[],[["option",4],["dirref",6]]],[[]],[[["string",3],["dirref",6]],[["fileref",6],["str",15],["result",4]]],[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[["weakdirref",6]]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],[["result",4],["usize",15],["str",15]]]],"p":[[3,"MemFile"]]},\
"memory":{"doc":"This crate implements the virtual memory subsystem for …","t":[18,3,3,3,7,18,3,3,18,3,3,13,3,3,13,18,18,3,3,3,4,6,18,18,13,18,3,3,3,3,3,3,13,3,3,18,13,4,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ACCESSED","AggregatedSectionMemoryBounds","AllocatedFrames","AllocatedPages","BROADCAST_TLB_SHOOTDOWN_FUNC","DIRTY","DeferredAllocAction","DeferredAllocAction","EXCLUSIVE","EntryFlags","EntryFlags","Exclusive","Frame","FrameRange","Free","GLOBAL","HUGE_PAGE","MappedPages","Mapper","MemoryManagementInfo","MemoryRegionType","MmiRef","NO_CACHE","NO_EXECUTE","NonExclusive","PRESENT","Page","PageRange","PageTable","PageTableEntry","PhysicalAddress","PhysicalMemoryRegion","Reserved","SectionMemoryBounds","TemporaryPage","USER_ACCESSIBLE","Unknown","UnmapResult","UnmappedFrames","VirtualAddress","WRITABLE","WRITE_THROUGH","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","address_at_offset","all","allocate_frames","allocate_frames_at","allocate_frames_by_bytes","allocate_frames_by_bytes_at","allocate_frames_by_bytes_deferred","allocate_frames_deferred","allocate_pages","allocate_pages_at","allocate_pages_by_bytes","allocate_pages_by_bytes_at","allocate_pages_by_bytes_deferred","allocate_pages_deferred","as_slice","as_slice_mut","as_type","as_type_mut","backward_checked","backward_checked","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","containing_address","containing_address","contains","contains_phys_addr","contains_virt_addr","create_contiguous_mapping","create_mapping","data","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","dump_pte","empty","empty","empty","empty","empty","empty","end","eq","eq","eq","eq","eq","eq","eq","eq","extend","extra_mapped_pages","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","forward_checked","frame_offset","frames","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_elf_program_flags","from_elf_section_flags","from_iter","from_multiboot2_section_flags","from_phys_addr","from_virt_addr","get_current_p4","get_kernel_mmi_ref","hash","hash","hash","init","init","init","init_post_heap","insert","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_exclusive","into_huge","into_iter","into_iter","into_non_exclusive","into_writable","is_all","is_empty","is_exclusive","is_executable","is_huge","is_unused","is_writable","map_allocated_pages","map_allocated_pages_to","map_table_frame","merge","merge","merge","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new_canonical","new_canonical","new_table","not","number","number","offset_from_start","offset_of_address","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","overlap","p1_index","p2_index","p3_index","p4_index","page_offset","page_table","page_table","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","physical_address","pointed_frame","remap","remove","rodata","set","set_broadcast_tlb_shootdown_cb","set_entry","set_unmapped","size_in_bytes","size_in_frames","size_in_pages","split","split","stack","start","start_address","start_address","start_address","start_address","steps_between","steps_between","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","switch","text","to_extended","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle","translate","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap_into_parts","unmap_into_parts","value","value","value","with","zero","zero","zero"],"q":["memoryd":["The hardware will set this bit when the page is accessed.","The address bounds and flags of the initial kernel …","Represents a range of allocated <code>PhysicalAddress</code>es, …","Represents a range of allocated <code>VirtualAddress</code>es, …","","The hardware will set this bit when the page has been …","A series of pending actions related to frame allocator …","A series of pending actions related to page allocator …","Set this bit to indicate that the frame pointed to by …","Page table entry flags on the x86_64 architecture. ","Page table entry flags on the x86_64 architecture. ","","A <code>Frame</code> is a chunk of <strong>physical</strong> memory, similar to how a …","A range of <code>Frame</code>s that are contiguous in physical memory.","Memory that is available for any general purpose.","Set this bit to indicate that this page is mapped across …","Set this bit if this page table entry represents a “huge…","Represents a contiguous range of virtual memory pages …","","This holds all the information for a <code>Task</code>’s memory …","Types of physical memory. See each variant’s …","A shareable reference to a <code>MemoryManagementInfo</code> struct …","If set, this page’s content is never cached, neither …","Set this bit to forbid execution of the mapped page. In …","","If set, this page is currently “present” in memory.  …","A virtual memory page, which contains the index of the …","An inclusive range of <code>Page</code>s that are contiguous in …","A top-level root (P4) page table.","A page table entry, which is a <code>u64</code> value under the hood.","A physical memory address, which is a <code>usize</code> under the …","A region of physical memory.","Memory that is reserved for special use and is only ever …","The address bounds and mapping flags of a section’s …","A Page that can be temporarily mapped to the recursive …","If set, userspace (ring 3) can access this page. If not …","Memory of an unknown type. This is a default value that …","The frames returned from the action of unmapping a page …","A range of frames that have been unmapped from a …","A virtual memory address, which is a <code>usize</code> under the hood.","If set, writes to this page are allowed. If not set, this …","If set, writes to this page go directly through the cache …","","","","","","","","","","","","","Returns the <code>VirtualAddress</code> at the given <code>offset</code> into this …","Returns the set containing all flags.","Allocates the given number of frames with no constraints …","Allocates the given number of frames starting at …","Allocates frames with no constraints on the starting …","Allocates frames starting at the given <code>PhysicalAddress</code> …","Similar to <code>allocated_frames_deferred()</code>, but accepts a …","The core frame allocation routine that allocates the …","Allocates the given number of pages with no constraints …","Allocates the given number of pages starting at …","Allocates pages with no constraints on the starting …","Allocates pages starting at the given <code>VirtualAddress</code> with …","Similar to <code>allocated_pages_deferred()</code>, but accepts a size …","The core page allocation routine that allocates the given …","Reinterprets this <code>MappedPages</code>’s underlying memory …","Same as <code>as_slice()</code>, but returns a <em>mutable</em> slice. ","Reinterprets this <code>MappedPages</code>’s underlying memory …","Same as <code>as_type()</code>, but returns a <em>mutable</em> reference to the …","","","","","Returns the intersection between the two sets of flags.","","","Disables all flags disabled in the set.","","","Returns the union of the two sets of flags.","","","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","","","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Frame</code> containing the given <code>PhysicalAddress</code>.","Returns the <code>Page</code> that contains the given <code>VirtualAddress</code>.","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Whether this <code>FrameRange</code> contains the given <code>PhysicalAddress</code>…","Whether this <code>PageRange</code> contains the given <code>VirtualAddress</code>.","A convenience function that creates a new memory mapping …","A convenience function that creates a new memory mapping. …","","","","","","","","","","","","","","","","","","","","","","Dumps all page table entries at all four page table …","Returns an empty MappedPages object that performs no …","Creates a FrameRange that will always yield <code>None</code>.","Creates a PageRange that will always yield <code>None</code>.","Returns an empty set of flags","Returns an empty AllocatedPages object that performs no …","Returns an empty AllocatedFrames object that performs no …","The ending virtual address and physical address.","","","","","","","","","","a list of additional virtual-mapped Pages that have the …","Returns the flags that describe this <code>MappedPages</code> page …","Returns this <code>PageTableEntry</code>’s flags.","The page table entry flags that should be used for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the offset that this PhysicalAddress specifies …","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Gets flags according to the properties of a program. ","Gets flags according to the properties of a section from …","","Gets flags according to the properties of a section from …","A convenience method for creating a new <code>FrameRange</code> that …","A convenience method for creating a new <code>PageRange</code> that …","Returns the current top-level (P4) root page table frame.","Returns a cloned reference to the kernel’s …","","","","Initialize the frame allocator with the given list of …","Initialize the page allocator.","Initializes the virtual memory management system. …","Finishes initializing the virtual memory management …","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the huge page …","","","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the writable …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if these flags are exclusive. ","Returns <code>true</code> if these flags are executable.","Returns <code>true</code> if the page the entry points to is a huge …","Returns <code>true</code> if this entry is unused, i.e., …","Returns <code>true</code> if the page is writable.","Maps the given <code>AllocatedPages</code> to randomly chosen …","Maps the given virtual <code>AllocatedPages</code> to the given …","Maps the temporary page to the given page table frame in …","Merges the given <code>MappedPages</code> object <code>mp</code> into this …","Merges the given <code>AllocatedPages</code> object <code>ap</code> into this …","Merges the given <code>AllocatedFrames</code> object <code>ap</code> into this …","","","","","","","","Creates a new [<code>TemporaryPage</code>] but does not yet map it to …","Creates a new <code>VirtualAddress</code>, checking that the address …","Creates a new <code>PhysicalAddress</code>, checking that the bits …","Creates a new range of <code>Frame</code>s that spans from <code>start</code> to <code>end</code>…","Creates a new range of <code>Page</code>s that spans from <code>start</code> to <code>end</code>,…","","Creates a new <code>VirtualAddress</code> that is guaranteed to be …","Creates a new <code>PhysicalAddress</code> that is guaranteed to be …","Initializes a brand new top-level P4 <code>PageTable</code> whose root …","Returns the complement of this set of flags.","","","Returns the offset of the given <code>PhysicalAddress</code> within …","Returns the offset of the given <code>VirtualAddress</code> within …","","","","Returns an inclusive <code>FrameRange</code> representing the frames …","Returns the 9-bit part of this page’s virtual address …","Returns the 9-bit part of this page’s virtual address …","Returns the 9-bit part of this page’s virtual address …","Returns the 9-bit part of this page’s virtual address …","Returns the offset that this VirtualAddress specifies …","the PageTable that should be switched to when this Task …","","","","","","","Returns the physical address of this page table’s …","Returns the physical <code>Frame</code> pointed to (mapped by) this …","Change the permissions (<code>new_flags</code>) of this <code>MappedPages</code>’…","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Set the function callback that will be invoked every time …","Sets this <code>PageTableEntry</code> to map the given <code>Frame</code> with the …","Removes the mapping represented by this page table entry. ","Returns the size in number of bytes.","Returns the number of <code>Frame</code>s covered by this iterator. …","Returns the size in number of <code>Page</code>s. Use this instead of …","Splits this <code>AllocatedPages</code> into two separate …","Splits this <code>AllocatedFrames</code> into two separate …","","The starting virtual address and physical address.","Returns the <code>PhysicalAddress</code> at the start of this <code>Frame</code>.","Returns the <code>PhysicalAddress</code> of the starting <code>Frame</code> in this …","Returns the <code>VirtualAddress</code> as the start of this <code>Page</code>.","Returns the <code>VirtualAddress</code> of the starting <code>Page</code>.","","","","","","","","","Returns the set difference of the two sets of flags.","","","","","","","Disables all flags enabled in the set.","Switches from the currently-active page table (this …","","Returns a new, separate <code>FrameRange</code> that is extended to …","","","","","","","","","","","","Toggles the specified flags in-place.","Translates a <code>VirtualAddress</code> to a <code>PhysicalAddress</code> by …","Translates a virtual memory <code>Page</code> to a physical memory …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Call this to clean up a <code>TemporaryPage</code> instead of just …","Consumes and unmaps this <code>MappedPages</code> object without …","Returns the underlying <code>usize</code> value for this <code>VirtualAddress</code>…","Returns the underlying <code>usize</code> value for this …","","Temporarily maps the given other <code>PageTable</code> to the …","Creates a VirtualAddress with the value 0.","Creates a PhysicalAddress with the value 0.","Zeroes out this entry, setting it as “unused”."],"i":[1,0,0,0,0,1,0,0,1,0,0,2,0,0,3,1,1,0,0,0,0,0,1,1,2,1,0,0,0,0,0,0,3,0,0,1,3,0,0,0,1,1,4,4,5,5,6,7,4,4,5,5,6,7,8,1,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,6,7,4,5,1,4,5,1,4,5,1,4,5,1,1,4,5,1,4,5,1,10,11,12,9,13,4,5,6,14,7,8,15,16,1,2,17,18,19,20,21,22,23,3,10,11,12,9,13,4,5,6,14,7,8,15,16,1,2,17,18,19,20,21,22,23,3,4,5,6,14,7,8,1,23,3,4,5,6,14,7,8,1,23,3,4,5,6,7,1,6,7,1,14,8,0,0,16,4,5,1,12,9,14,8,17,19,21,23,12,14,8,10,9,19,20,21,22,11,9,14,8,1,19,21,15,4,5,6,14,7,8,1,3,1,13,9,18,15,12,9,13,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,14,7,8,15,16,1,1,1,1,1,19,21,23,3,6,7,5,23,10,11,12,9,13,4,5,6,14,7,8,15,16,1,2,17,18,19,20,21,22,23,3,1,1,1,1,1,1,14,8,0,0,4,5,1,0,0,0,0,1,1,10,11,12,9,13,4,5,6,14,7,8,15,16,1,2,17,17,18,19,20,21,22,23,3,1,1,14,8,1,1,1,1,1,1,1,18,1,11,11,10,9,19,21,4,5,6,14,7,8,1,10,4,5,14,8,23,4,5,12,1,6,6,14,8,4,5,18,14,7,7,7,7,4,13,16,4,5,6,7,1,12,18,9,1,16,1,0,18,18,8,14,8,19,21,16,15,6,14,7,8,6,7,4,4,5,5,6,7,1,4,4,5,5,6,7,1,12,16,14,4,5,6,14,7,8,1,23,3,4,5,1,11,11,10,11,12,9,13,4,5,6,14,7,8,15,16,1,2,17,18,19,20,21,22,23,3,10,11,12,9,13,4,5,6,14,7,8,15,16,1,2,17,18,19,20,21,22,23,3,23,10,11,12,9,13,4,5,6,14,7,8,15,16,1,2,17,18,19,20,21,22,23,3,10,9,4,5,18,12,4,5,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["virtualaddress",3]],[[["virtualaddress",3]],["virtualaddress",3]],[[["usize",15]],["physicaladdress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["usize",15]],["frame",3]],[[["usize",15]],["page",3]],[[["virtualaddress",3]]],[[["usize",15]]],[[["physicaladdress",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["virtualaddress",3],["option",4]]],[[],["entryflags",3]],[[["usize",15]],[["option",4],["allocatedframes",3]]],[[["physicaladdress",3],["usize",15]],[["allocatedframes",3],["result",4],["str",15]]],[[["usize",15]],[["option",4],["allocatedframes",3]]],[[["physicaladdress",3],["usize",15]],[["allocatedframes",3],["result",4],["str",15]]],[[["physicaladdress",3],["usize",15],["option",4]],[["str",15],["result",4]]],[[["physicaladdress",3],["usize",15],["option",4]],[["str",15],["result",4]]],[[["usize",15]],[["option",4],["allocatedpages",3]]],[[["virtualaddress",3],["usize",15]],[["str",15],["allocatedpages",3],["result",4]]],[[["usize",15]],[["option",4],["allocatedpages",3]]],[[["virtualaddress",3],["usize",15]],[["str",15],["allocatedpages",3],["result",4]]],[[["virtualaddress",3],["option",4],["usize",15]],[["result",4],["str",15]]],[[["virtualaddress",3],["option",4],["usize",15]],[["result",4],["str",15]]],[[["usize",15]],[["result",4],["str",15]]],[[["usize",15]],[["str",15],["result",4]]],[[["usize",15]],[["str",15],["result",4]]],[[["usize",15]],[["str",15],["result",4]]],[[["usize",15],["frame",3]],[["option",4],["frame",3]]],[[["usize",15],["page",3]],[["option",4],["page",3]]],[[["virtualaddress",3]],["virtualaddress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["entryflags",3]],["entryflags",3]],[[["virtualaddress",3]]],[[["physicaladdress",3]]],[[["entryflags",3]]],[[["virtualaddress",3]],["virtualaddress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["entryflags",3]],["entryflags",3]],[[["virtualaddress",3]]],[[["physicaladdress",3]]],[[["entryflags",3]]],[[],["u64",15]],[[["virtualaddress",3]],["virtualaddress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["entryflags",3]],["entryflags",3]],[[["virtualaddress",3]]],[[["physicaladdress",3]]],[[["entryflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["virtualaddress",3]],[[],["physicaladdress",3]],[[],["frame",3]],[[],["framerange",3]],[[],["page",3]],[[],["pagerange",3]],[[],["entryflags",3]],[[],["physicalmemoryregion",3]],[[],["memoryregiontype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["virtualaddress",3]],["ordering",4]],[[["physicaladdress",3]],["ordering",4]],[[["frame",3]],["ordering",4]],[[["page",3]],["ordering",4]],[[["entryflags",3]],["ordering",4]],[[["physicaladdress",3]],["frame",3]],[[["virtualaddress",3]],["page",3]],[[["entryflags",3]],["bool",15]],[[["physicaladdress",3]],["bool",15]],[[["virtualaddress",3]],["bool",15]],[[["usize",15],["entryflags",3]],[["str",15],["result",4]]],[[["usize",15],["entryflags",3]],[["str",15],["result",4],["mappedpages",3]]],null,[[],["virtualaddress",3]],[[],["physicaladdress",3]],[[],["entryflags",3]],[[],["mapper",3]],[[],["pagerange",3]],[[],["rangeinclusive",3]],[[],["rangeinclusive",3]],[[],["framerange",3]],[[],["pagerange",3]],[[],["framerange",3]],[[],["framerange",3]],[[],["mapper",3]],[[],["rangeinclusive",3]],[[],["rangeinclusive",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["virtualaddress",3]],["result",6]],[[],["mappedpages",3]],[[],["framerange",3]],[[],["pagerange",3]],[[],["entryflags",3]],[[],["allocatedpages",3]],[[],["allocatedframes",3]],null,[[["virtualaddress",3]],["bool",15]],[[["physicaladdress",3]],["bool",15]],[[["frame",3]],["bool",15]],[[["framerange",3]],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["entryflags",3]],["bool",15]],[[["memoryregiontype",4]],["bool",15]],[[]],null,[[],["entryflags",3]],[[],["entryflags",3]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["usize",15],["frame",3]],[["option",4],["frame",3]]],[[["usize",15],["page",3]],[["option",4],["page",3]]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["entryflags",3],["option",4]]],[[["u64",15]],["entryflags",3]],[[["flags",3]],["entryflags",3]],[[["u64",15]],["entryflags",3]],[[],["entryflags",3]],[[["elfsection",3]],["entryflags",3]],[[["physicaladdress",3],["usize",15]],["framerange",3]],[[["virtualaddress",3],["usize",15]],["pagerange",3]],[[],["frame",3]],[[],[["mmiref",6],["option",4]]],[[]],[[]],[[]],[[],[["str",15],["result",4]]],[[["virtualaddress",3]],[["str",15],["result",4]]],[[["bootinformation",3]],[["str",15],["result",4]]],[[["pagetable",3],["mappedpages",3]],[["result",4],["str",15]]],[[["entryflags",3]]],[[["entryflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["allocatedframes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["entryflags",3]],[[],["entryflags",3]],[[]],[[]],[[],["entryflags",3]],[[],["entryflags",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["allocatedpages",3],["entryflags",3]],[["str",15],["result",4],["mappedpages",3]]],[[["allocatedpages",3],["entryflags",3],["allocatedframes",3]],[["str",15],["result",4],["mappedpages",3]]],[[["pagetable",3],["allocatedframes",3]],[["str",15],["table",3],["result",4]]],[[["mappedpages",3]],["result",4]],[[["allocatedpages",3]],[["allocatedpages",3],["result",4]]],[[["allocatedframes",3]],[["allocatedframes",3],["result",4]]],[[["virtualaddress",3]],["bool",15]],[[["physicaladdress",3]],["bool",15]],[[["frame",3]],["bool",15]],[[["framerange",3]],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["entryflags",3]],["bool",15]],[[],["temporarypage",3]],[[["usize",15]],[["str",15],["virtualaddress",3],["result",4]]],[[["usize",15]],[["physicaladdress",3],["str",15],["result",4]]],[[["frame",3]],["framerange",3]],[[["page",3]],["pagerange",3]],[[["memoryregiontype",4],["framerange",3]],["physicalmemoryregion",3]],[[["usize",15]],["virtualaddress",3]],[[["usize",15]],["physicaladdress",3]],[[["pagetable",3],["temporarypage",3],["allocatedframes",3]],[["result",4],["pagetable",3],["str",15]]],[[],["entryflags",3]],[[],["usize",15]],null,[[["physicaladdress",3]],[["usize",15],["option",4]]],[[["virtualaddress",3]],[["usize",15],["option",4]]],[[]],[[]],[[]],[[["framerange",3]],[["option",4],["framerange",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[["virtualaddress",3]],[["option",4],["ordering",4]]],[[["physicaladdress",3]],[["option",4],["ordering",4]]],[[["frame",3]],[["option",4],["ordering",4]]],[[["page",3]],[["option",4],["ordering",4]]],[[["entryflags",3]],[["option",4],["ordering",4]]],[[],["physicaladdress",3]],[[],[["option",4],["frame",3]]],[[["mapper",3],["entryflags",3]],[["result",4],["str",15]]],[[["entryflags",3]]],null,[[["bool",15],["entryflags",3]]],[[]],[[["entryflags",3],["frame",3]]],[[],["unmapresult",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["page",3]],[["result",4],["allocatedpages",3]]],[[["frame",3]],[["allocatedframes",3],["result",4]]],null,null,[[],["physicaladdress",3]],[[],["physicaladdress",3]],[[],["virtualaddress",3]],[[],["virtualaddress",3]],[[["frame",3]],[["usize",15],["option",4]]],[[["page",3]],[["usize",15],["option",4]]],[[["usize",15]],["virtualaddress",3]],[[["virtualaddress",3]],["virtualaddress",3]],[[["usize",15]],["physicaladdress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["usize",15]],["frame",3]],[[["usize",15]],["page",3]],[[["entryflags",3]],["entryflags",3]],[[["usize",15]]],[[["virtualaddress",3]]],[[["physicaladdress",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["entryflags",3]]],[[["pagetable",3]]],null,[[["frame",3]],["framerange",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["entryflags",3]]],[[["virtualaddress",3]],[["physicaladdress",3],["option",4]]],[[["page",3]],[["option",4],["frame",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["pagetable",3]],[["result",4],["str",15]]],[[["mapper",3]],["result",4]],[[],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[["pagetable",3],["temporarypage",3]],[["result",4],["str",15]]],[[],["virtualaddress",3]],[[],["physicaladdress",3]],[[]]],"p":[[3,"EntryFlags"],[4,"UnmapResult"],[4,"MemoryRegionType"],[3,"VirtualAddress"],[3,"PhysicalAddress"],[3,"Frame"],[3,"Page"],[3,"PageRange"],[3,"MappedPages"],[3,"TemporaryPage"],[3,"Mapper"],[3,"PageTable"],[3,"MemoryManagementInfo"],[3,"FrameRange"],[3,"SectionMemoryBounds"],[3,"AggregatedSectionMemoryBounds"],[3,"UnmappedFrames"],[3,"PageTableEntry"],[3,"AllocatedPages"],[3,"DeferredAllocAction"],[3,"AllocatedFrames"],[3,"DeferredAllocAction"],[3,"PhysicalMemoryRegion"]]},\
"memory_initialization":{"doc":"","t":[3,11,11,12,11,11,5,11,12,11,12,11,11,11],"n":["BootloaderModule","borrow","borrow_mut","end","fmt","from","init_memory_management","into","name","size_in_bytes","start","try_from","try_into","type_id"],"q":["memory_initialization","","","","","","","","","","","","",""],"d":["A record of a bootloader module’s name and location in …","","","The ending address of this module, exclusive.","","","Initializes the virtual memory management system and …","","The name of this module, i.e., the filename it was given …","","The starting address of this module, inclusive.","","",""],"i":[0,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,[[]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[["bootinformation",3]],[["str",15],["result",4]]],[[]],null,[[],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"BootloaderModule"]]},\
"memory_structs":{"doc":"This crate contains common types used for memory mapping. ","t":[18,3,18,18,3,3,3,18,18,18,18,18,3,3,3,3,18,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ACCESSED","AggregatedSectionMemoryBounds","DIRTY","EXCLUSIVE","EntryFlags","Frame","FrameRange","GLOBAL","HUGE_PAGE","NO_CACHE","NO_EXECUTE","PRESENT","Page","PageRange","PhysicalAddress","SectionMemoryBounds","USER_ACCESSIBLE","VirtualAddress","WRITABLE","WRITE_THROUGH","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","address_at_offset","all","backward_checked","backward_checked","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","containing_address","containing_address","contains","contains_phys_addr","contains_virt_addr","data","default","default","default","deref","deref","deref_mut","deref_mut","empty","empty","empty","end","eq","eq","eq","eq","eq","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","forward_checked","frame_offset","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_elf_program_flags","from_elf_section_flags","from_iter","from_multiboot2_section_flags","from_phys_addr","from_virt_addr","hash","hash","hash","insert","intersects","into","into","into","into","into","into","into","into","into","into_exclusive","into_huge","into_iter","into_iter","into_non_exclusive","into_writable","is_all","is_empty","is_exclusive","is_executable","is_huge","is_writable","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new_canonical","new_canonical","not","number","number","offset_from_start","offset_of_address","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","overlap","p1_index","p2_index","p3_index","p4_index","page_offset","page_table","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","rodata","set","size_in_bytes","size_in_frames","size_in_pages","stack","start","start_address","start_address","start_address","start_address","steps_between","steps_between","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","text","to_extended","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","zero","zero"],"q":["memory_structsd":["The hardware will set this bit when the page is accessed.","The address bounds and flags of the initial kernel …","The hardware will set this bit when the page has been …","Set this bit to indicate that the frame pointed to by …","Page table entry flags on the x86_64 architecture. ","A <code>Frame</code> is a chunk of <strong>physical</strong> memory, similar to how a …","A range of <code>Frame</code>s that are contiguous in physical memory.","Set this bit to indicate that this page is mapped across …","Set this bit if this page table entry represents a “huge…","If set, this page’s content is never cached, neither …","Set this bit to forbid execution of the mapped page. In …","If set, this page is currently “present” in memory.  …","A virtual memory page, which contains the index of the …","An inclusive range of <code>Page</code>s that are contiguous in …","A physical memory address, which is a <code>usize</code> under the …","The address bounds and mapping flags of a section’s …","If set, userspace (ring 3) can access this page. If not …","A virtual memory address, which is a <code>usize</code> under the hood.","If set, writes to this page are allowed. If not set, this …","If set, writes to this page go directly through the cache …","","","","","","","","","","","","","Returns the <code>VirtualAddress</code> at the given <code>offset</code> into this …","Returns the set containing all flags.","","","","","Returns the intersection between the two sets of flags.","","","Disables all flags disabled in the set.","","","Returns the union of the two sets of flags.","","","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","","","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Frame</code> containing the given <code>PhysicalAddress</code>.","Returns the <code>Page</code> that contains the given <code>VirtualAddress</code>.","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Whether this <code>FrameRange</code> contains the given <code>PhysicalAddress</code>…","Whether this <code>PageRange</code> contains the given <code>VirtualAddress</code>.","","","","","","","","","Creates a FrameRange that will always yield <code>None</code>.","Creates a PageRange that will always yield <code>None</code>.","Returns an empty set of flags","The ending virtual address and physical address.","","","","","","","","","The page table entry flags that should be used for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the offset that this PhysicalAddress specifies …","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Gets flags according to the properties of a program. ","Gets flags according to the properties of a section from …","","Gets flags according to the properties of a section from …","A convenience method for creating a new <code>FrameRange</code> that …","A convenience method for creating a new <code>PageRange</code> that …","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the huge page …","","","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the writable …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if these flags are exclusive. ","Returns <code>true</code> if these flags are executable.","Returns <code>true</code> if the page the entry points to is a huge …","Returns <code>true</code> if the page is writable.","","","","","","","","Creates a new <code>VirtualAddress</code>, checking that the address …","Creates a new <code>PhysicalAddress</code>, checking that the bits …","Creates a new range of <code>Frame</code>s that spans from <code>start</code> to <code>end</code>…","Creates a new range of <code>Page</code>s that spans from <code>start</code> to <code>end</code>,…","Creates a new <code>VirtualAddress</code> that is guaranteed to be …","Creates a new <code>PhysicalAddress</code> that is guaranteed to be …","Returns the complement of this set of flags.","","","Returns the offset of the given <code>PhysicalAddress</code> within …","Returns the offset of the given <code>VirtualAddress</code> within …","","","Returns an inclusive <code>FrameRange</code> representing the frames …","Returns the 9-bit part of this page’s virtual address …","Returns the 9-bit part of this page’s virtual address …","Returns the 9-bit part of this page’s virtual address …","Returns the 9-bit part of this page’s virtual address …","Returns the offset that this VirtualAddress specifies …","","","","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the size in number of bytes.","Returns the number of <code>Frame</code>s covered by this iterator. …","Returns the size in number of <code>Page</code>s. Use this instead of …","","The starting virtual address and physical address.","Returns the <code>PhysicalAddress</code> at the start of this <code>Frame</code>.","Returns the <code>PhysicalAddress</code> of the starting <code>Frame</code> in this …","Returns the <code>VirtualAddress</code> as the start of this <code>Page</code>.","Returns the <code>VirtualAddress</code> of the starting <code>Page</code>.","","","","","","","","","Returns the set difference of the two sets of flags.","","","","","","","Disables all flags enabled in the set.","","Returns a new, separate <code>FrameRange</code> that is extended to …","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the underlying <code>usize</code> value for this <code>VirtualAddress</code>…","Returns the underlying <code>usize</code> value for this …","Creates a VirtualAddress with the value 0.","Creates a PhysicalAddress with the value 0."],"i":[1,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,2,2,3,3,4,5,2,2,3,3,4,5,6,1,4,5,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,4,7,5,6,8,9,1,2,3,4,7,5,6,8,9,1,2,3,4,7,5,6,1,2,3,4,5,1,4,5,1,7,6,9,2,3,1,7,6,7,6,7,6,1,8,2,3,4,7,5,6,1,1,8,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,7,5,6,8,9,1,1,1,1,1,4,5,3,2,3,4,7,5,6,8,9,1,1,1,1,1,1,1,7,6,2,3,1,1,1,2,3,4,7,5,6,8,9,1,1,1,7,6,1,1,1,1,1,1,1,1,2,3,4,7,5,6,1,2,3,7,6,2,3,1,4,4,7,6,2,3,7,5,5,5,5,2,9,2,3,4,5,1,1,9,1,6,7,6,9,8,4,7,5,6,4,5,2,2,3,3,4,5,1,2,2,3,3,4,5,1,9,7,1,2,3,4,7,5,6,8,9,1,2,3,4,7,5,6,8,9,1,2,3,4,7,5,6,8,9,1,2,3,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["virtualaddress",3]],["virtualaddress",3]],[[["usize",15]],["virtualaddress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["usize",15]],["physicaladdress",3]],[[["usize",15]],["frame",3]],[[["usize",15]],["page",3]],[[["usize",15]]],[[["virtualaddress",3]]],[[["usize",15]]],[[["physicaladdress",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["virtualaddress",3],["option",4]]],[[],["entryflags",3]],[[["usize",15],["frame",3]],[["option",4],["frame",3]]],[[["usize",15],["page",3]],[["page",3],["option",4]]],[[["virtualaddress",3]],["virtualaddress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["entryflags",3]],["entryflags",3]],[[["virtualaddress",3]]],[[["physicaladdress",3]]],[[["entryflags",3]]],[[["virtualaddress",3]],["virtualaddress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["entryflags",3]],["entryflags",3]],[[["virtualaddress",3]]],[[["physicaladdress",3]]],[[["entryflags",3]]],[[],["u64",15]],[[["virtualaddress",3]],["virtualaddress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["entryflags",3]],["entryflags",3]],[[["virtualaddress",3]]],[[["physicaladdress",3]]],[[["entryflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["virtualaddress",3]],[[],["physicaladdress",3]],[[],["frame",3]],[[],["framerange",3]],[[],["page",3]],[[],["pagerange",3]],[[],["entryflags",3]],[[["virtualaddress",3]],["ordering",4]],[[["physicaladdress",3]],["ordering",4]],[[["frame",3]],["ordering",4]],[[["page",3]],["ordering",4]],[[["entryflags",3]],["ordering",4]],[[["physicaladdress",3]],["frame",3]],[[["virtualaddress",3]],["page",3]],[[["entryflags",3]],["bool",15]],[[["physicaladdress",3]],["bool",15]],[[["virtualaddress",3]],["bool",15]],null,[[],["virtualaddress",3]],[[],["physicaladdress",3]],[[],["entryflags",3]],[[],["rangeinclusive",3]],[[],["rangeinclusive",3]],[[],["rangeinclusive",3]],[[],["rangeinclusive",3]],[[],["framerange",3]],[[],["pagerange",3]],[[],["entryflags",3]],null,[[["virtualaddress",3]],["bool",15]],[[["physicaladdress",3]],["bool",15]],[[["frame",3]],["bool",15]],[[["framerange",3]],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["entryflags",3]],["bool",15]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["usize",15],["frame",3]],[["option",4],["frame",3]]],[[["usize",15],["page",3]],[["page",3],["option",4]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4],["entryflags",3]]],[[["u64",15]],["entryflags",3]],[[["flags",3]],["entryflags",3]],[[["u64",15]],["entryflags",3]],[[],["entryflags",3]],[[["elfsection",3]],["entryflags",3]],[[["usize",15],["physicaladdress",3]],["framerange",3]],[[["virtualaddress",3],["usize",15]],["pagerange",3]],[[]],[[]],[[]],[[["entryflags",3]]],[[["entryflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["entryflags",3]],[[],["entryflags",3]],[[]],[[]],[[],["entryflags",3]],[[],["entryflags",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["virtualaddress",3]],["bool",15]],[[["physicaladdress",3]],["bool",15]],[[["frame",3]],["bool",15]],[[["framerange",3]],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["entryflags",3]],["bool",15]],[[["usize",15]],[["virtualaddress",3],["str",15],["result",4]]],[[["usize",15]],[["str",15],["result",4],["physicaladdress",3]]],[[["frame",3]],["framerange",3]],[[["page",3]],["pagerange",3]],[[["usize",15]],["virtualaddress",3]],[[["usize",15]],["physicaladdress",3]],[[],["entryflags",3]],[[],["usize",15]],null,[[["physicaladdress",3]],[["option",4],["usize",15]]],[[["virtualaddress",3]],[["option",4],["usize",15]]],[[]],[[]],[[["framerange",3]],[["option",4],["framerange",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["virtualaddress",3]],[["ordering",4],["option",4]]],[[["physicaladdress",3]],[["ordering",4],["option",4]]],[[["frame",3]],[["ordering",4],["option",4]]],[[["page",3]],[["ordering",4],["option",4]]],[[["entryflags",3]],[["option",4],["ordering",4]]],[[["entryflags",3]]],null,[[["bool",15],["entryflags",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[],["physicaladdress",3]],[[],["physicaladdress",3]],[[],["virtualaddress",3]],[[],["virtualaddress",3]],[[["frame",3]],[["option",4],["usize",15]]],[[["page",3]],[["option",4],["usize",15]]],[[["virtualaddress",3]],["virtualaddress",3]],[[["usize",15]],["virtualaddress",3]],[[["physicaladdress",3]],["physicaladdress",3]],[[["usize",15]],["physicaladdress",3]],[[["usize",15]],["frame",3]],[[["usize",15]],["page",3]],[[["entryflags",3]],["entryflags",3]],[[["virtualaddress",3]]],[[["usize",15]]],[[["physicaladdress",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["entryflags",3]]],null,[[["frame",3]],["framerange",3]],[[["entryflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[],["virtualaddress",3]],[[],["physicaladdress",3]]],"p":[[3,"EntryFlags"],[3,"VirtualAddress"],[3,"PhysicalAddress"],[3,"Frame"],[3,"Page"],[3,"PageRange"],[3,"FrameRange"],[3,"SectionMemoryBounds"],[3,"AggregatedSectionMemoryBounds"]]},\
"memory_x86_64":{"doc":"This crate implements the virtual memory subsystem …","t":[18,3,18,18,3,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11],"n":["ACCESSED","BootInformation","DIRTY","EXCLUSIVE","EntryFlags","GLOBAL","HUGE_PAGE","NO_CACHE","NO_EXECUTE","PRESENT","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","boot_loader_name_tag","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","command_line_tag","contains","default","efi_32_ih","efi_64_ih","efi_memory_map_tag","efi_sdt_32_tag","efi_sdt_64_tag","elf_sections_tag","empty","end_address","eq","extend","find_section_memory_bounds","fmt","fmt","fmt","fmt","fmt","fmt","framebuffer_tag","from","from","from_bits","from_bits_truncate","from_elf_program_flags","from_elf_section_flags","from_iter","from_multiboot2_section_flags","get_boot_info_mem_area","get_kernel_address","get_modules_address","get_p4","get_vga_mem_addr","hash","insert","intersects","into","into","into_exclusive","into_huge","into_non_exclusive","into_writable","is_all","is_empty","is_exclusive","is_executable","is_huge","is_writable","load_base_addr","memory_map_tag","module_tags","ne","not","partial_cmp","remove","rsdp_v1_tag","rsdp_v2_tag","set","start_address","sub","sub_assign","tlb_flush_all","tlb_flush_virt_addr","to_owned","toggle","total_size","try_from","try_from","try_into","try_into","type_id","type_id","vbe_info_tag"],"q":["memory_x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The hardware will set this bit when the page is accessed.","A Multiboot 2 Boot Information struct.","The hardware will set this bit when the page has been …","Set this bit to indicate that the frame pointed to by …","Page table entry flags on the x86_64 architecture. ","Set this bit to indicate that this page is mapped across …","Set this bit if this page table entry represents a “huge…","If set, this page’s content is never cached, neither …","Set this bit to forbid execution of the mapped page. In …","If set, this page is currently “present” in memory.  …","If set, userspace (ring 3) can access this page. If not …","If set, writes to this page are allowed. If not set, this …","If set, writes to this page go directly through the cache …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Search for the BootLoader name tag.","","","","","","","","Search for the Command line tag.","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Search for the EFI 32-bit image handle pointer.","Search for the EFI 64-bit image handle pointer.","Search for the EFI Memory map tag.","Search for the EFI 32-bit SDT tag.","Search for the EFI 64-bit SDT tag.","Search for the ELF Sections tag.","Returns an empty set of flags","Get the end address of the boot info.","","","Finds the addresses in memory of the main kernel …","","","","","","","Search for the VBE framebuffer tag.","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Gets flags according to the properties of a program. ","Gets flags according to the properties of a section from …","","Gets flags according to the properties of a section from …","Gets the physical memory area occupied by the bootloader …","Finds and returns the relevant addresses for the kernel …","Gets the address bounds of physical memory occupied by …","Returns the current top-level page table address.","Gets the physical memory occupied by vga.","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the huge page …","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the writable …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if these flags are exclusive. ","Returns <code>true</code> if these flags are executable.","Returns <code>true</code> if the page the entry points to is a huge …","Returns <code>true</code> if the page is writable.","Search for the Image Load Base Physical Address.","Search for the Memory map tag.","Get an iterator of all module tags.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Search for the (ACPI 1.0) RSDP tag.","Search for the (ACPI 2.0 or later) RSDP tag.","Inserts or removes the specified flags depending on the …","Get the start address of the boot info.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Flushes the whole TLB. ","Flushes the specific virtual address in TLB. ","","Toggles the specified flags in-place.","Get the total size of the boot info struct.","","","","","","","Search for the VBE information tag."],"i":[1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,1,1,1,2,1,1,2,2,2,2,2,2,1,2,1,1,0,2,1,1,1,1,1,2,2,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,2,2,1,2,1,1,0,0,1,1,2,2,1,2,1,2,1,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["entryflags",3]],[[["entryflags",3]],["entryflags",3]],[[["entryflags",3]]],[[["entryflags",3]],["entryflags",3]],[[["entryflags",3]]],[[],["u64",15]],[[["entryflags",3]],["entryflags",3]],[[["entryflags",3]]],[[],[["option",4],["bootloadernametag",3]]],[[]],[[]],[[]],[[]],[[],["entryflags",3]],[[]],[[["entryflags",3]],["ordering",4]],[[],[["option",4],["commandlinetag",3]]],[[["entryflags",3]],["bool",15]],[[],["entryflags",3]],[[],[["efiimagehandle32",3],["option",4]]],[[],[["option",4],["efiimagehandle64",3]]],[[],[["option",4],["efimemorymaptag",3]]],[[],[["option",4],["efisdt32",3]]],[[],[["efisdt64",3],["option",4]]],[[],[["elfsectionstag",3],["option",4]]],[[],["entryflags",3]],[[],["usize",15]],[[["entryflags",3]],["bool",15]],[[]],[[["bootinformation",3]],[["str",15],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],[["framebuffertag",3],["option",4]]],[[]],[[]],[[["u64",15]],[["entryflags",3],["option",4]]],[[["u64",15]],["entryflags",3]],[[["flags",3]],["entryflags",3]],[[["u64",15]],["entryflags",3]],[[],["entryflags",3]],[[["elfsection",3]],["entryflags",3]],[[["bootinformation",3]],[["str",15],["result",4]]],[[["bootinformation",3]],[["str",15],["result",4]]],[[["bootinformation",3]]],[[],["physicaladdress",3]],[[],[["str",15],["result",4]]],[[]],[[["entryflags",3]]],[[["entryflags",3]],["bool",15]],[[]],[[]],[[],["entryflags",3]],[[],["entryflags",3]],[[],["entryflags",3]],[[],["entryflags",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["imageloadphysaddr",3],["option",4]]],[[],[["memorymaptag",3],["option",4]]],[[],["moduleiter",3]],[[["entryflags",3]],["bool",15]],[[],["entryflags",3]],[[["entryflags",3]],[["option",4],["ordering",4]]],[[["entryflags",3]]],[[],[["option",4],["rsdpv1tag",3]]],[[],[["option",4],["rsdpv2tag",3]]],[[["entryflags",3],["bool",15]]],[[],["usize",15]],[[["entryflags",3]],["entryflags",3]],[[["entryflags",3]]],[[]],[[["virtualaddress",3]]],[[]],[[["entryflags",3]]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["vbeinfotag",3],["option",4]]]],"p":[[3,"EntryFlags"],[3,"BootInformation"]]},\
"mod_mgmt":{"doc":"","t":[13,3,13,13,17,3,4,17,13,13,13,13,13,4,13,3,3,3,17,17,3,13,17,3,13,17,4,6,6,3,6,6,6,17,13,13,6,3,6,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,5,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,12,12,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,12,12,12,0,11,12,12,12,5,0,11,12,12,12,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["AbsolutePath","AppCrateRef","Application","Bss","CRATE_HASH_DELIMITER","CrateNamespace","CrateType","DATA_BSS_SECTION_FLAGS","Data","EhFrame","Executable","File","GccExceptTable","IntoCrateObjectFile","Kernel","LoadedCrate","LoadedSection","LoadedSectionInner","MODULE_PREFIX_DELIMITER","NAMESPACES_DIRECTORY_NAME","NamespaceDir","Prefix","RODATA_SECTION_FLAGS","RelocationEntry","Rodata","SECTION_HASH_DELIMITER","SectionType","Shndx","StrongCrateRef","StrongDependency","StrongSectionRef","SymbolMap","SymbolMapIter","TEXT_SECTION_FLAGS","Text","Userspace","WeakCrateRef","WeakDependent","WeakSectionRef","add_symbols","addend","address_range","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_on_write","copy_section_data_to","crate_name","crate_name_as_prefix","crate_name_from_path","crate_name_without_hash","crate_names","crates_dependent_on_me","crates_i_depend_on","create_application_namespace","data_pages","data_sections","data_sections_iter","debug_symbols_file","default","default_namespace_name","deref","deref","dir","drop","drop","dump_symbol_map","dump_symbol_map_recursive","eq","eq","eq","find_section","find_symbol_table","find_symbols_starting_with","find_symbols_starting_with_and_namespace","find_weak_dependent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_crate","from","from","from","from","from","from","from","from","from","from","from","from","from_elf_relocation","from_module_name","get_containing_crate_name","get_crate","get_crate_and_namespace","get_crate_containing_address","get_crate_object_file","get_crate_object_file_starting_with","get_crate_object_files_starting_with","get_crate_starting_with","get_crates_starting_with","get_file_and_dir_names_starting_with","get_file_starting_with","get_files_starting_with","get_function_section","get_initial_kernel_namespace","get_namespaces_directory","get_section_containing_address","get_symbol","get_symbol_and_namespace","get_symbol_or_load","get_symbol_starting_with","get_type","global","global_sections","global_sections_iter","init","inner","into","into","into","into","into","into","into","into","into","into","into","into","is_absolute","is_data_or_bss","load_crate","load_crate_as_application","load_crates","mapped_pages","mapped_pages_offset","method_get_crate_object_file_starting_with","method_get_crate_object_files_starting_with","name","name","name_without_hash","ne","new","new","new","object_file","offset","parent_crate","parse_nano_core","recursive_namespace","reexported_symbols","relocation","relocation","replace_containing_crate_name","replace_nano_core_crates","rewrite_section_dependents","rodata_pages","section","section","section_name_without_hash","sections","sections_dependent_on_me","sections_i_depend_on","size","start_address","text_pages","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_dependencies","write_crate_object_file","write_relocation","parse_nano_core","replace_nano_core_crates"],"q":["mod_mgmtmod_mgmt::parse_nano_core","mod_mgmt::replace_nano_core_crates"],"d":["An absolute path that points to the crate object file. ","An application crate that has been loaded into a …","","A <code>bss</code> section is just like a data section, but is …","A crate’s name and its hash are separated by “-”, …","This struct represents a namespace of crates and their “…","The type of a crate, based on its object file naming …","<code>.data</code> and <code>.bss</code> sections are read-write and non-executable.","A <code>data</code> section contains data that is both readable and …","The <code>.eh_frame</code> section contains information about stack …","","A direct reference to the crate object file. This will be …","A <code>.gcc_except_table</code> section contains landing pads for …","A type that can be converted into a crate object file.","","Represents a single crate whose object file has been  …","Represents a section that has been loaded and is part of …","The parts of a <code>LoadedSection</code> that may be mutable, i.e.,  …","The Theseus Makefile appends prefixes onto bootloader …","The name of the directory that contains all of the …","A wrapper around a <code>Directory</code> reference that offers …","A string prefix that will be used to search for the crate …","<code>.rodata</code> sections are read-only and non-executable.","The information necessary to calculate and write a …","An <code>rodata</code> section contains read-only data, i.e., …","A section’s demangled name and its hash are separated …","The possible types of sections that can be loaded from a …","A Section Header iNDeX (SHNDX), as specified by the ELF …","A Strong reference to a <code>LoadedCrate</code>.","A representation that the owner <code>A</code> of (a <code>LoadedSection</code> …","A Strong reference (<code>Arc</code>) to a <code>LoadedSection</code>.","A “symbol map” from a fully-qualified demangled …","","<code>.text</code> sections are read-only and executable.","A <code>text</code> section contains executable code, i.e., functions. ","","A Weak reference to a <code>LoadedCrate</code>.","A representation that the <code>section</code> <code>A</code> in this struct …","A Weak reference (<code>Weak</code>) to a <code>LoadedSection</code>.","Adds only <em>global</em> symbols in the given <code>sections</code> iterator …","The value that is added to the source section’s address …","The range of <code>VirtualAddress</code>es covered by this section, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Duplicates this <code>CrateNamespace</code> into a new <code>CrateNamespace</code>, …","Copies the actual data contents of this <code>LoadedSection</code> to …","The name of this crate.","Returns this crate name as a symbol prefix, including a …","Returns the crate name that is derived from a crate …","Returns the substring of this crate’s name that …","Returns a list of all of the crate names currently loaded …","Currently may contain duplicates!","Returns the set of crates that this crate depends on.  …","Create a new application <code>CrateNamespace</code> that uses the …","A tuple of:","The set of <code>.data</code> and <code>.bss</code> sections in this crate. The …","A convenience function to iterate over only the data …","The file that contains debug symbols for this crate.  …","","Returns the string suffix for use as the name  of the …","","","Returns the directory that this <code>CrateNamespace</code> is based …","","","Simple debugging function that returns the entire symbol …","Same as <code>dump_symbol_map()</code>,  but includes symbols from …","","","","Returns the <strong>first</strong> <code>LoadedSection</code> that matches the given …","Returns a reference to the symbol table in the given …","Returns a copied list of the corresponding <code>LoadedSection</code>s …","Similar to <code>find_symbols_starting_with</code>, but also includes …","Returns the index of the first <code>WeakDependent</code> object in …","","","","","","","","","","Iterates over all crates in this namespace and calls the …","","","","","","","","","","","","","","Returns a tuple of (CrateType, &str, &str) based on the …","Parses the given symbol string to try to find the name of …","Acquires the lock on this <code>CrateNamespace</code>’s crate list …","Acquires the lock on this <code>CrateNamespace</code>’s crate list …","Finds the crate that contains the given <code>VirtualAddress</code> in …","Gets the given object file based on its crate name …","Like <code>get_crate_starting_with()</code>, but for crate <em>object file</em>…","Like <code>get_crates_starting_with()</code>, but for crate <em>object file</em>…","Finds the <code>LoadedCrate</code> whose name starts with the given …","Finds the <code>LoadedCrate</code>s whose names start with the given …","Returns the list of file and directory names in this …","Finds the single file in this directory whose name starts …","Returns the list of files in this Directory whose name …","Returns the <code>LoadedSection</code> of type <code>SectionType::Text</code> that …","Returns a reference to the default kernel namespace,  …","Returns the top-level directory that contains all of the …","Finds the section that contains the given <code>VirtualAddress</code> …","Finds the corresponding <code>LoadedSection</code> reference for the …","Like <code>get_symbol()</code>, but also returns the exact …","Finds the corresponding <code>LoadedSection</code> reference for the …","Returns a weak reference to the <code>LoadedSection</code> whose name …","Returns the type of this section.","Whether or not this section’s symbol was exported …","The set of global symbols in this crate, including …","A convenience function to iterate over only the global …","Initializes the module management system based on the …","The inner contents of a section that could possibly change…","","","","","","","","","","","","","Returns true if the relocation type results in a …","Returns <code>true</code> if <code>Data</code> or <code>Bss</code>, otherwise <code>false</code>.","Loads the specified crate into memory, allowing it to be …","Loads the specified application crate into this …","This function first loads all of the given crates’ …","The <code>MappedPages</code> that cover this section.","The offset into the <code>mapped_pages</code> where this section starts","Same as <code>get_crate_object_file_starting_with()</code>, but is a …","Same as <code>get_crate_object_files_starting_with()</code>, but is a …","Returns the name of this <code>CrateNamespace</code>, which is just …","The full String name of this section, a fully-qualified …","Returns the substring of this section’s name that …","","Creates a new <code>CrateNamespace</code> that is completely empty (no …","Creates a new <code>NamespaceDir</code> that wraps the given <code>DirRef</code>.","Create a new <code>LoadedSection</code>, with an empty <code>dependencies</code> …","The object file that this crate was loaded from.","The offset from the starting virtual address of the …","The <code>LoadedCrate</code> object that contains/owns this section","Routines for parsing the <code>nano_core</code>, the fully-linked, …","Returns the recursive namespace that this <code>CrateNamespace</code> …","The set of symbols that this crate’s global symbols are …","The details of the relocation action that was performed.","The details of the relocation action that was performed.","Replaces the <code>old_crate_name</code> substring in the given …","Routines for replacing the crates that comprise the …","Finds all of the weak dependents (sections that depend on …","A tuple of:","A strong reference to the <code>LoadedSection</code> <code>B</code> that the owner …","A weak reference to the <code>LoadedSection</code> <code>A</code> that depends on …","Returns the substring of the given section’s name that …","A map containing all the sections in this crate. In …","The list of sections in foreign crates that depend on …","The list of sections in foreign crates that this section …","Returns the size in bytes of this section.","Returns the starting <code>VirtualAddress</code> of where this section …","A tuple of:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of this section, e.g., <code>.text</code>, <code>.rodata</code>, <code>.data</code>, …","The type of relocation calculation that is performed  to …","","","","","","","","","","","","","Same as [new()<code>](#method.new), but uses the given </code>…","Insert the given crate object file based on its crate …","Write an actual relocation entry.","Parses the nano_core object file that represents the …","See the module-level documentation for how this works. "],"i":[1,0,2,3,0,0,0,0,3,3,2,1,3,0,2,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,3,2,0,0,0,4,5,6,1,7,4,8,9,6,2,3,10,11,12,5,1,7,4,8,9,6,2,3,10,11,12,5,8,3,11,12,5,8,3,11,12,5,4,6,9,9,0,9,4,9,9,0,9,9,9,9,10,2,7,8,4,7,9,4,4,2,3,5,9,0,4,4,6,1,8,9,6,2,3,11,12,5,4,1,7,4,8,9,6,2,3,10,11,12,5,5,2,0,4,4,4,8,4,4,4,4,8,8,8,9,0,0,4,4,4,4,4,6,6,9,9,0,6,1,7,4,8,9,6,2,3,10,11,12,5,5,3,4,4,4,6,6,4,4,4,6,6,5,4,8,6,9,5,6,0,4,9,11,12,0,0,4,9,11,12,6,9,10,10,6,6,9,8,3,11,12,5,1,7,4,8,9,6,2,3,10,11,12,5,1,7,4,8,9,6,2,3,10,11,12,5,6,5,1,7,4,8,9,6,2,3,10,11,12,5,6,8,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["namespacedir",3]],[[],["sectiontype",4]],[[],["strongdependency",3]],[[],["weakdependent",3]],[[],["relocationentry",3]],[[]],[[]],[[]],[[]],[[]],[[],["cratenamespace",3]],[[["loadedsection",3]],[["str",15],["result",4]]],null,[[],["string",3]],[[["path",3]],["str",15]],[[],["str",15]],[[["bool",15]],[["vec",3],["string",3]]],[[],[["cowweak",3],["global",3],["vec",3]]],[[],[["cowweak",3],["global",3],["vec",3]]],[[["option",4],["arc",3]],[["str",15],["arc",3],["result",4]]],null,null,[[]],null,[[],["loadedsectioninner",3]],[[],["str",15]],[[],["strongcrateref",6]],[[],["dirref",6]],[[],["namespacedir",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["cratetype",4]],["bool",15]],[[["sectiontype",4]],["bool",15]],[[["relocationentry",3]],["bool",15]],[[],[["option",4],["arc",3]]],[[["elffile",3]],[["str",15],["result",4]]],[[["str",15]],["vec",3]],[[["str",15]],["vec",3]],[[["arc",3]],[["usize",15],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rela",3]],["relocationentry",3]],[[["str",15]],[["result",4],["str",15]]],[[["str",15]],[["global",3],["vec",3],["str",15]]],[[["str",15]],[["option",4],["strongcrateref",6]]],[[["arc",3],["str",15]],["option",4]],[[["bool",15],["virtualaddress",3]],[["option",4],["strongcrateref",6]]],[[["str",15]],[["option",4],["fileref",6]]],[[["arc",3],["str",15]],["option",4]],[[["arc",3],["str",15]],["vec",3]],[[["arc",3],["str",15]],["option",4]],[[["arc",3],["str",15]],["vec",3]],[[["str",15]],[["vec",3],["string",3]]],[[["str",15]],[["option",4],["fileref",6]]],[[["str",15]],[["vec",3],["fileref",6]]],[[["str",15]],[["option",4],["arc",3]]],[[],[["option",4],["arc",3]]],[[],[["dirref",6],["option",4]]],[[["bool",15],["virtualaddress",3]],["option",4]],[[["str",15]],["weaksectionref",6]],[[["str",15]],["option",4]],[[["option",4],["str",15],["cratenamespace",3],["bool",15],["mmiref",6]],["weaksectionref",6]],[[["str",15]],["weaksectionref",6]],[[],["sectiontype",4]],null,null,[[]],[[["memorymanagementinfo",3],["vec",3],["bootloadermodule",3]],[["str",15],["arc",3],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["option",4],["cratenamespace",3],["bool",15],["fileref",6],["mmiref",6]],[["str",15],["result",4]]],[[["bool",15],["fileref",6],["arc",3],["mmiref",6]],[["appcrateref",3],["str",15],["result",4]]],[[["option",4],["cratenamespace",3],["bool",15],["mmiref",6]],[["result",4],["str",15]]],null,null,[[["str",15]],["option",4]],[[["str",15]],["vec",3]],[[],["str",15]],null,[[],["str",15]],[[["relocationentry",3]],["bool",15]],[[["string",3],["arc",3],["option",4],["namespacedir",3]],["cratenamespace",3]],[[["dirref",6]],["namespacedir",3]],[[["arc",3],["string",3],["usize",15],["loadedcrate",3],["virtualaddress",3],["bool",15],["cowweak",3],["mutex",3],["sectiontype",4]],["loadedsection",3]],null,null,null,null,[[],[["option",4],["arc",3]]],null,null,null,[[["str",15]],[["string",3],["option",4]]],null,[[["strongsectionref",6],["mmiref",6]],[["result",4],["str",15]]],null,null,null,[[["str",15]],["str",15]],null,null,null,[[],["usize",15]],[[],["virtualaddress",3]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vec",3],["arc",3],["string",3],["usize",15],["loadedcrate",3],["global",3],["vec",3],["virtualaddress",3],["bool",15],["cowweak",3],["strongdependency",3],["mutex",3],["sectiontype",4],["weakdependent",3]],["loadedsection",3]],[[["str",15]],[["str",15],["result",4],["fileref",6]]],[[["relocationentry",3],["mappedpages",3],["virtualaddress",3],["bool",15],["usize",15]],[["str",15],["result",4]]],[[["bool",15],["arc",3],["mappedpages",3]],["result",4]],[[["mmiref",6],["arc",3],["strongcrateref",6]],[["result",4],["str",15]]]],"p":[[4,"IntoCrateObjectFile"],[4,"CrateType"],[4,"SectionType"],[3,"CrateNamespace"],[3,"RelocationEntry"],[3,"LoadedSection"],[3,"AppCrateRef"],[3,"NamespaceDir"],[3,"LoadedCrate"],[3,"LoadedSectionInner"],[3,"StrongDependency"],[3,"WeakDependent"]]},\
"mouse":{"doc":"","t":[5,5,5],"n":["handle_mouse_input","init","mouse_to_print"],"q":["mouse","",""],"d":["return a Mouse Event according to the data","Initialize the mouse driver.","print the mouse actions"],"i":[0,0,0],"f":[[[["u32",15]],[["result",4],["str",15]]],[[["event",4],["queue",3]]],[[["mouseevent",3]]]],"p":[]},\
"multicore_bringup":{"doc":"Functions for initializing and bringing up other CPU …","t":[7,3,11,11,11,11,11,11,5,12,11,11,12,11,11,11,11,12],"n":["GRAPHIC_INFO","GraphicInfo","borrow","borrow_mut","clone","clone_into","fmt","from","handle_ap_cores","height","into","only_derive_is_allowed_to_implement_this_trait","physical_address","to_owned","try_from","try_into","type_id","width"],"q":["multicore_bringup","","","","","","","","","","","","","","","","",""],"d":["Graphic mode information that will be updated after …","A structure to access information about the graphical …","","","","","","","Starts up and sets up AP cores based on system …","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1],"f":[null,null,[[]],[[]],[[],["graphicinfo",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[["virtualaddress",3],["option",4],["arc",3],["mutexirqsafe",3]],[["result",4],["usize",15],["str",15]]],null,[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[3,"GraphicInfo"]]},\
"multiple_heaps":{"doc":"An implementation of an allocator that uses multiple …","t":[3,17,11,11,11,11,11,11,5,11,5,11,11,11],"n":["MultipleHeaps","PER_CORE_HEAP_INITIAL_SIZE_PAGES","alloc","borrow","borrow_mut","dealloc","empty","from","init_individual_heap","into","switch_to_multiple_heaps","try_from","try_into","type_id"],"q":["multiple_heaps","","","","","","","","","","","","",""],"d":["An allocator that contains multiple heaps. The heap that …","Starting size of each per-core heap. ","Allocates the given <code>layout</code> from the heap of the core the …","","","Deallocates the memory at the address given by <code>ptr</code>. …","","","Initializes the heap given by <code>key</code>. There are 11 size …","","The setup routine for multiple heaps. It creates and …","","",""],"i":[0,0,1,1,1,1,1,1,0,1,0,1,1,1],"f":[null,null,[[["layout",3]]],[[]],[[]],[[["layout",3]]],[[],["multipleheaps",3]],[[]],[[["usize",15],["multipleheaps",3]],[["result",4],["str",15]]],[[]],[[],[["result",4],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"MultipleHeaps"]]},\
"mutex_sleep":{"doc":"A mutex that puts tasks to sleep while they wait for the …","t":[3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MutexSleep","MutexSleepGuard","MutexSleepGuardRef","MutexSleepGuardRefMut","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","from","from","into","into","into_inner","lock","new","try_from","try_from","try_into","try_into","try_lock","type_id","type_id"],"q":["mutex_sleep","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A mutual exclusion wrapper that puts a <code>Task</code> to sleep …","A guard that allows the locked data to be accessed, …","Typedef of a owning reference that uses a <code>MutexSleepGuard</code> …","Typedef of a mutable owning reference that uses a …","","","","","","","","","","","","","","Consumes this <code>MutexSleep</code>, returning the underlying data.","Blocks until the lock is acquired by putting this <code>Task</code> to …","Creates a new lock wrapping the supplied data.","","","","","Tries to lock the MutexSleep. If it is already locked, it …","",""],"i":[0,0,0,0,1,2,1,2,1,2,2,2,1,1,2,1,2,1,1,1,1,2,1,2,1,1,2],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[],["mutexsleep",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],[["str",15],["result",4],["mutexsleepguard",3]]],[[],["mutexsleep",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4],["mutexsleepguard",3]]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"MutexSleep"],[3,"MutexSleepGuard"]]},\
"nano_core":{"doc":"The aptly-named tiny crate containing the first OS code …","t":[5],"n":["nano_core_start"],"q":["nano_core"],"d":["The main entry point into Theseus, that is, the first …"],"i":[0],"f":[[[["usize",15]]]],"p":[]},\
"network_interface_card":{"doc":"","t":[8,10,10,10,10],"n":["NetworkInterfaceCard","get_received_frame","mac_address","poll_receive","send_packet"],"q":["network_interface_card","","","",""],"d":["A trait that defines the necessary minimum functions that …","Returns the earliest <code>ReceivedFrame</code>, which is essentially …","Returns the MAC address that this NIC is configured with. …","Poll the NIC for received frames.  Can be used as an …","Sends a packet contained in the given <code>transmit_buffer</code> out …"],"i":[0,1,1,1,1],"f":[null,[[],[["option",4],["receivedframe",3]]],[[]],[[],[["result",4],["str",15]]],[[["transmitbuffer",3]],[["result",4],["str",15]]]],"p":[[8,"NetworkInterfaceCard"]]},\
"network_manager":{"doc":"","t":[3,8,6,5,11,11,11,10,11,10,11,11,10,10,10,10,10,11,11,11],"n":["NETWORK_INTERFACES","NetworkInterface","NetworkInterfaceRef","add_to_network_interfaces","borrow","borrow_mut","deref","ethernet_addr","from","has_ip_addr","initialize","into","ip_addrs","poll","routes","routes_mut","set_ethernet_addr","try_from","try_into","type_id"],"q":["network_manager","","","","","","","","","","","","","","","","","","",""],"d":["A list of all of the available and initialized network …","A trait that represents a Network Interface within …","A trait object wrapped in an Arc and Mutex that allows  …","Add a Nic to the global list of network interfaces. The …","","","","Get the Ethernet address of the interface.","","Check whether the interface has the given IP address …","","","Get the IP addresses of the interface.","Polls (or flushes) the network interface, which should be …","","","Set the Ethernet address of the interface.","","",""],"i":[0,0,0,0,1,1,1,2,1,2,1,1,2,2,2,2,2,1,1,1],"f":[null,null,null,[[["networkinterface",8],["send",8]]],[[]],[[]],[[],["mutex",6]],[[],["ethernetaddress",3]],[[]],[[["ipaddress",4]],["bool",15]],[[]],[[]],[[]],[[["socketset",3],["instant",3]],[["result",6],["bool",15]]],[[],["routes",3]],[[],["routes",3]],[[["ethernetaddress",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"NETWORK_INTERFACES"],[8,"NetworkInterface"]]},\
"nic_buffers":{"doc":"Defines buffers that are used to send and receive packets.","t":[12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11],"n":["0","ReceiveBuffer","ReceivedFrame","TransmitBuffer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","from","from","from","into","into","into","length","length","mp","mp","new","new","phys_addr","phys_addr","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["nic_buffers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A buffer that stores a packet (a piece of an Ethernet …","A network (e.g., Ethernet) frame that has been received …","A buffer that stores a packet to be transmitted through …","","","","","","","","","","","","","","","","","","","","","","Creates a new TransmitBuffer with the specified size in …","Creates a new ReceiveBuffer with the given <code>MappedPages</code>, …","","","","","","","","","","",""],"i":[1,0,0,0,2,3,1,2,3,1,2,3,2,3,3,2,3,1,2,3,1,2,3,2,3,2,3,2,3,2,3,1,2,3,1,2,3,1],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["mappedpages",3]],[[],["mappedpages",3]],[[],["mappedpages",3]],[[],["mappedpages",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["u16",15]],[["str",15],["result",4],["transmitbuffer",3]]],[[["u16",15],["mappedpages",3],["queue",3],["physicaladdress",3]],["receivebuffer",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"ReceivedFrame"],[3,"TransmitBuffer"],[3,"ReceiveBuffer"]]},\
"nic_initialization":{"doc":"Functions that are used in a NIC initialization procedure.","t":[17,5,5,5,5,5],"n":["NIC_MAPPING_FLAGS","allocate_device_register_memory","allocate_memory","init_rx_buf_pool","init_rx_queue","init_tx_queue"],"q":["nic_initialization","","","","",""],"d":["The mapping flags used for pages that the NIC will map.","Allocates memory for the NIC registers","Helper function to allocate memory at required address","Initialize the receive buffer pool from where receive …","Steps to create and initialize a receive descriptor queue","Steps to create and initialize a transmit descriptor queue"],"i":[0,0,0,0,0,0],"f":[null,[[["pcidevice",3],["physicaladdress",3]],[["str",15],["result",4],["mappedpages",3]]],[[["usize",15],["physicaladdress",3]],[["str",15],["result",4],["mappedpages",3]]],[[["usize",15],["queue",3],["u16",15]],[["result",4],["str",15]]],[[["usize",15],["queue",3]],[["result",4],["str",15]]],[[["usize",15]],[["boxrefmut",6],["str",15],["result",4]]]],"p":[]},\
"nic_queues":{"doc":"Defines the receive and transmit queues that store a ring …","t":[17,3,8,3,8,11,11,11,11,12,12,12,11,11,12,12,11,11,12,12,11,12,12,12,11,12,12,12,12,12,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,12,12,11,11],"n":["NIC_MAPPING_FLAGS","RxQueue","RxQueueRegisters","TxQueue","TxQueueRegisters","borrow","borrow","borrow_mut","borrow_mut","cpu_id","cpu_id","filter_num","from","from","id","id","into","into","num_rx_descs","num_tx_descs","poll_queue_and_store_received_packets","received_frames","regs","regs","return_frame","rx_buffer_pool","rx_buffer_size_bytes","rx_bufs_in_use","rx_cur","rx_descs","send_on_queue","set_rdbah","set_rdbal","set_rdh","set_rdlen","set_rdt","set_tdbah","set_tdbal","set_tdh","set_tdlen","set_tdt","try_from","try_from","try_into","try_into","tx_cur","tx_descs","type_id","type_id"],"q":["nic_queues","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The mapping flags used for pages that the NIC will map.","A struct that holds all information for one receive queue.…","The register trait that gives access to only those …","A struct that holds all information for a transmit queue. …","The register trait that gives access to only those …","","","","","The cpu which this queue is mapped to.  This in itself …","The cpu which this queue is mapped to.  This in itself …","The filter id for the physical NIC filter that is set for …","","","The number of the queue, stored here for our convenience.","The number of the queue, stored here for our convenience.","","","The number of receive descriptors in the descriptor ring","The number of transmit descriptors in the descriptor ring","Polls the queue and removes all received packets from it. …","The queue of received Ethernet frames, ready for …","Registers for this receive queue","Registers for this transmit queue","Returns the earliest received ethernet frame.","Pool where <code>ReceiveBuffer</code>s are stored.","","The list of rx buffers, in which the index in the vector …","Current receive descriptor index","Receive descriptors","Sends a packet on the transmit queue","","","","","","","","","","","","","","","Current transmit descriptor index","Transmit descriptors ","",""],"i":[0,0,0,0,0,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,1,1,2,1,1,1,1,1,1,2,3,3,3,3,3,4,4,4,4,4,1,2,1,2,2,2,1,2],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],null,null,[[]],[[]],null,null,[[],[["result",4],["str",15]]],null,null,null,[[],[["option",4],["receivedframe",3]]],null,null,null,null,null,[[["transmitbuffer",3]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"RxQueue"],[3,"TxQueue"],[8,"RxQueueRegisters"],[8,"TxQueueRegisters"]]},\
"ota_update_client":{"doc":"Functions to communicate with a network server that …","t":[4,17,3,3,13,13,5,11,11,11,11,11,11,12,5,5,5,5,5,11,11,11,11,11,11,11,12,12,5,12,11,11,11,11,11,11,11,11,11],"n":["CrateSet","DIFF_FILE_NAME","Diff","DownloadedFile","Exclude","Include","as_lines","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","content","default_remote_endpoint","download_available_update_builds","download_crates","download_diff","download_listing","from","from","from","includes","into","into","into","name","pairs","parse_diff_lines","state_transfer_functions","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["ota_update_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An enum used for specifying which crate files to download …","The name (and relative path) of the diff file inside each …","A representation of an diff file used to define an …","A file that has been downloaded over the network,  …","The set of crates to exclude, i.e., all crates except for …","The set of crates to include, i.e., only these crates …","Convenience function for converting a byte stream that is …","","","","","","","","The default remote endpoint, server IP and port, of the …","Connects to the update server over the given network …","Connects to the update server over the given network …","Connects to the update server over the given network …","Connects to the update server over the given network …","","","","Returns true if this <code>CrateSet</code> specifies that the given …","","","","","A list of tuples in which the first element is the old …","Parses a series of diff lines into a representation of an …","The list of state transfer functions which should be …","","","","","","","","",""],"i":[0,0,0,0,1,1,0,2,1,3,2,1,3,2,0,0,0,0,0,2,1,3,1,2,1,3,2,3,0,3,2,1,3,2,1,3,2,1,3],"f":[null,null,null,null,null,null,[[],[["result",4],["str",15],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["ipendpoint",3]],[[["ipendpoint",3],["networkinterfaceref",6]],[["result",4],["str",15],["vec",3]]],[[["string",3],["ipendpoint",3],["str",15],["networkinterfaceref",6],["btreeset",3]],[["str",15],["result",4],["vec",3]]],[[["ipendpoint",3],["str",15],["networkinterfaceref",6]],[["result",4],["str",15],["vec",3]]],[[["ipendpoint",3],["str",15],["networkinterfaceref",6]],[["result",4],["str",15],["vec",3]]],[[]],[[]],[[]],[[["str",15]],["bool",15]],[[]],[[]],[[]],null,null,[[["vec",3]],[["diff",3],["str",15],["result",4]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"CrateSet"],[3,"DownloadedFile"],[3,"Diff"]]},\
"page_allocator":{"doc":"Provides an allocator for virtual memory pages. The …","t":[3,3,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11],"n":["AllocatedPages","DeferredAllocAction","allocate_pages","allocate_pages_at","allocate_pages_by_bytes","allocate_pages_by_bytes_at","allocate_pages_by_bytes_deferred","allocate_pages_deferred","borrow","borrow","borrow_mut","borrow_mut","deref","drop","drop","empty","fmt","from","from","init","into","into","merge","split","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["page_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a range of allocated <code>VirtualAddress</code>es, …","A series of pending actions related to page allocator …","Allocates the given number of pages with no constraints …","Allocates the given number of pages starting at …","Allocates pages with no constraints on the starting …","Allocates pages starting at the given <code>VirtualAddress</code> with …","Similar to <code>allocated_pages_deferred()</code>, but accepts a size …","The core page allocation routine that allocates the given …","","","","","","","","Returns an empty AllocatedPages object that performs no …","","","","Initialize the page allocator.","","","Merges the given <code>AllocatedPages</code> object <code>ap</code> into this …","Splits this <code>AllocatedPages</code> into two separate …","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,1,2,1,1,2,1,1,1,2,0,1,2,1,1,1,2,1,2,1,2],"f":[null,null,[[["usize",15]],[["allocatedpages",3],["option",4]]],[[["usize",15],["virtualaddress",3]],[["str",15],["result",4],["allocatedpages",3]]],[[["usize",15]],[["allocatedpages",3],["option",4]]],[[["usize",15],["virtualaddress",3]],[["str",15],["result",4],["allocatedpages",3]]],[[["option",4],["virtualaddress",3],["usize",15]],[["result",4],["str",15]]],[[["option",4],["virtualaddress",3],["usize",15]],[["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[],["pagerange",3]],[[]],[[]],[[],["allocatedpages",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[["virtualaddress",3]],[["result",4],["str",15]]],[[]],[[]],[[["allocatedpages",3]],[["allocatedpages",3],["result",4]]],[[["page",3]],[["result",4],["allocatedpages",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"AllocatedPages"],[3,"DeferredAllocAction"]]},\
"page_table_entry":{"doc":"Defines the structure of Page Table Entries (PTEs) on …","t":[13,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Exclusive","NonExclusive","PageTableEntry","UnmapResult","UnmappedFrames","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","flags","from","from","from","into","into","into","is_unused","only_derive_is_allowed_to_implement_this_trait","pointed_frame","set_entry","set_unmapped","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","zero"],"q":["page_table_entry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","A page table entry, which is a <code>u64</code> value under the hood.","The frames returned from the action of unmapping a page …","A range of frames that have been unmapped from a …","","","","","","","","Returns this <code>PageTableEntry</code>’s flags.","","","","","","","Returns <code>true</code> if this entry is unused, i.e., …","","Returns the physical <code>Frame</code> pointed to (mapped by) this …","Sets this <code>PageTableEntry</code> to map the given <code>Frame</code> with the …","Removes the mapping represented by this page table entry. ","","","","","","","","","","","Zeroes out this entry, setting it as “unused”."],"i":[1,1,0,0,0,1,2,3,1,2,3,2,3,1,2,3,1,2,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,3,3],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["framerange",3]],[[],["entryflags",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],[["option",4],["frame",3]]],[[["entryflags",3],["frame",3]]],[[],["unmapresult",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u64",15]],[[]]],"p":[[4,"UnmapResult"],[3,"UnmappedFrames"],[3,"PageTableEntry"]]},\
"panic_entry":{"doc":"Provides the default entry points and lang items for …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"panic_wrapper":{"doc":"Provides types and simple routines for handling panics. …","t":[5],"n":["panic_wrapper"],"q":["panic_wrapper"],"d":["Performs the standard panic handling routine, which …"],"i":[0],"f":[[[["panicinfo",3]],[["result",4],["str",15]]]],"p":[]},\
"path":{"doc":"","t":[13,17,17,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CurrentDir","EXTENSION_DELIMITER","PATH_DELIMITER","ParentDir","Path","PathComponent","RootDir","as_string","basename","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","components","deref","deref_mut","eq","extension","file_stem","fmt","fmt","from","from","from","get","get_absolute","get_dir","get_file","hash","into","into","is_absolute","ne","new","rcomponents","relative","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","A structure that represents a file  ","","","","Returns just the file name, i.e., the trailling component …","","","","","","","Returns an iterator over the components of this <code>Path</code>, …","","","","Returns the file extension, if present.  If there are …","Like <code>basename()</code>, but excludes the file extension, if …","","","","","","Returns the file or directory specified by the given …","Returns the file or directory specified by the given …","Returns the file specified by the given path, which can …","Returns the file specified by the given path, which can …","","","","Returns a boolean indicating whether this Path is …","","Creates a new <code>Path</code> from the given String.","Returns a reverse iterator over the components of this …","Expresses the current Path, self, relative to another …","","","","","","","",""],"i":[1,0,0,1,0,0,1,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,1,2,1,2],"f":[null,null,null,null,null,null,null,[[],["string",3]],[[],["str",15]],[[]],[[]],[[]],[[]],[[],["path",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["path",3]],["bool",15]],[[],[["str",15],["option",4]]],[[],["str",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[]],[[["string",3]]],[[]],[[["dirref",6]],[["option",4],["fileordir",4]]],[[["path",3]],[["option",4],["fileordir",4]]],[[["dirref",6]],[["dirref",6],["option",4]]],[[["dirref",6]],[["fileref",6],["option",4]]],[[]],[[]],[[]],[[],["bool",15]],[[["path",3]],["bool",15]],[[["string",3]]],[[]],[[["path",3]],[["option",4],["path",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"PathComponent"],[3,"Path"]]},\
"pause":{"doc":"Offers the <code>pause</code> instruction, which rustc used to use for …","t":[5],"n":["spin_loop_hint"],"q":["pause"],"d":["A wrapper around the <code>pause</code> x86 ASM function.  On …"],"i":[0],"f":[[[]]],"p":[]},\
"pci":{"doc":"","t":[13,17,17,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,4,3,3,12,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,11,12,12,12,11,11,11,11,12,12,11,5,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["IoPort","MSIX_CAPABILITY","MSI_CAPABILITY","MemoryMapped","PCI_BAR0","PCI_BAR1","PCI_BAR2","PCI_BAR3","PCI_BAR4","PCI_BAR5","PCI_BIST","PCI_CACHE_LINE_SIZE","PCI_CAPABILITIES","PCI_CARDBUS_CIS","PCI_CLASS","PCI_COMMAND","PCI_DEVICE_ID","PCI_EXPANSION_ROM_BASE","PCI_HEADER_TYPE","PCI_INTERRUPT_LINE","PCI_INTERRUPT_PIN","PCI_LATENCY_TIMER","PCI_MAX_LATENCY","PCI_MIN_GRANT","PCI_PROG_IF","PCI_REVISION_ID","PCI_STATUS","PCI_SUBCLASS","PCI_SUBSYSTEM_ID","PCI_SUBSYSTEM_VENDOR_ID","PCI_VENDOR_ID","PciBus","PciConfigSpaceAccessMechanism","PciDevice","PciLocation","bars","bist","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","bus_number","cache_line_size","class","clone","clone_into","command","deref","deref_mut","determine_mem_base","determine_mem_size","device_id","devices","eq","find_pci_capability","fmt","fmt","fmt","fmt","from","from","from","from","function","get_pci_buses","get_pci_device_bsf","hash","header_type","int_line","int_pin","into","into","into","into","latency_timer","location","ne","pci_device_iter","pci_enable_msi","pci_enable_msix","pci_read_16","pci_read_32","pci_read_8","pci_set_command_bus_master_bit","pci_set_interrupt_disable_bit","pci_write","prog_if","revision_id","slot","status","subclass","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vendor_id"],"q":["pci","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A PCI bus, which contains a list of PCI devices on that …","Lists the 2 possible PCI configuration space access …","Contains information common to every type of PCI Device, …","The bus, slot, and function number of a given PCI device. …","The six Base Address Registers (BARs)","","","","","","","","","","","The number identifier of this PCI bus.","","The class code, used to determine device type: …","","","","","","Returns the base address of the memory region specified …","Returns the size in bytes of the memory region specified …","","The list of devices attached to this PCI bus.","","Explores the PCI config space and returns address of …","","","","","","","","","","Returns a list of all PCI buses in this system. If the …","Returns a reference to the <code>PciDevice</code> with the given bus, …","","","","","","","","","","the bus, slot, and function number that locates this PCI …","","Returns an iterator that iterates over all <code>PciDevice</code>s, in …","Enable MSI interrupts for a PCI device. We assume the …","Enable MSI-X interrupts for a PCI device. Only the enable …","Read 16-bit data at the specified <code>offset</code> from this PCI …","read 32-bit data at the specified <code>offset</code> from the PCI …","Read 8-bit data at the specified <code>offset</code> from the PCI …","Sets the PCI device’s bit 3 in the command portion, …","Sets the PCI device’s command bit 10 to disable legacy …","Write 32-bit data to the specified <code>offset</code> for the PCI …","The programming interface of this PCI device","","","","The subclass code, used to determine device type: …","","","","","","","","","","","","","","",""],"i":[1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,3,4,2,1,3,4,2,4,3,2,2,4,4,2,2,2,2,2,2,3,4,4,3,4,4,2,1,3,4,2,4,0,0,4,2,2,2,1,3,4,2,2,2,4,0,2,2,4,4,4,4,4,4,2,2,4,2,2,4,4,1,3,4,2,1,3,4,2,1,3,4,2,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],null,null,null,[[],["pcilocation",3]],[[]],null,[[],["pcilocation",3]],[[],["pcilocation",3]],[[["usize",15]],[["str",15],["result",4],["physicaladdress",3]]],[[["usize",15]],["u32",15]],null,null,[[["pcilocation",3]],["bool",15]],[[["u16",15]],[["option",4],["u16",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["vec",3]],[[["u16",15]],[["option",4],["pcidevice",3]]],[[]],null,null,null,[[]],[[]],[[]],[[]],null,null,[[["pcilocation",3]],["bool",15]],[[]],[[["u8",15]],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[["u16",15]],["u16",15]],[[["u16",15]],["u32",15]],[[["u16",15]],["u8",15]],[[]],[[]],[[["u32",15],["u16",15]]],null,null,[[],["u16",15]],null,null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"PciConfigSpaceAccessMechanism"],[3,"PciDevice"],[3,"PciBus"],[3,"PciLocation"]]},\
"physical_nic":{"doc":"Defines a trait <code>PhysicalNic</code> that must be implemented by …","t":[8,10,10],"n":["PhysicalNic","return_rx_queues","return_tx_queues"],"q":["physical_nic","",""],"d":["This trait must be implemented by any NIC driver that …","Returns the <code>RxQueue</code>s owned by a virtual NIC back to the …","Returns the <code>TxQueue</code>s owned by a virtual NIC back to the …"],"i":[0,1,1],"f":[null,[[["rxqueue",3],["vec",3]]],[[["vec",3],["txqueue",3]]]],"p":[[8,"PhysicalNic"]]},\
"pic":{"doc":"Support for the x86 PIC (8259 Programmable Interrupt …","t":[3,3,17,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11],"n":["ChainedPics","IrqStatusRegisters","PIC_MASTER_OFFSET","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","init","into","into","mask_irqs","master_irr","master_isr","notify_end_of_interrupt","read_isr_irr","slave_irr","slave_isr","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["pic","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A pair of chained PIC controllers.  This is the standard …","Each PIC chip has two interrupt status registers:  the …","","","","","","","","","","Create a new interface for the standard PIC1 and PIC2 …","","","Each mask is a bitwise mask for each IRQ line, with the …","","","Figure out which (if any) PICs in our chain need to know …","Reads the ISR and IRR registers of both the master and …","","","","","","","","",""],"i":[0,0,0,1,2,1,2,1,1,1,2,2,1,2,2,1,1,2,2,1,1,1,1,2,1,2,1,2],"f":[null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u8",15]],["chainedpics",3]],[[]],[[]],[[["u8",15]]],null,null,[[["u8",15]]],[[],["irqstatusregisters",3]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"IrqStatusRegisters"],[3,"ChainedPics"]]},\
"pit_clock":{"doc":"Support for the Programmable Interval Timer (PIT) system …","t":[5,5,5],"n":["handle_timer_interrupt","init","pit_wait"],"q":["pit_clock","",""],"d":["this occurs on every PIT timer tick. Called by the PIT’…","","Wait a certain number of microseconds, max 55555 …"],"i":[0,0,0],"f":[[[]],[[["u32",15]]],[[["u32",15]],[["result",4],["str",15]]]],"p":[]},\
"pmu_x86":{"doc":"Support for the Performance Monitoring Unit ","t":[13,13,3,4,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,5,12,11,11,11,11,5,5,5,11,5,0,12,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BranchInstructionsRetired","BranchMissesRetired","Counter","EventType","InstructionsRetired","LastLevelCacheMisses","LastLevelCacheReferences","SampleResults","UnhaltedCoreCycles","UnhaltedReferenceCycles","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","diff","drop","end","find_function_names_from_samples","from","from","from","get_count_since_start","handle_sample","init","instruction_pointers","into","into","into","new","print_samples","reset_pmu","retrieve_samples","start","start_samples","stat","task_ids","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","PMUResults","PerformanceCounters","borrow","borrow","borrow_mut","borrow_mut","end","fmt","from","from","into","into","new","start","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["pmu_x86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pmu_x86::stat","","","","","","","","","","","","","","","","","","",""],"d":["This event counts branch instructions at retirement. It …","This event counts mispredicted branch instructions at …","A logical counter object to correspond to a physical PMC","Used to select the event type to count. Event types are …","This event counts the number of instructions at …","This event counts each cache miss condition for …","This event counts requests originating from the core that …","Stores the instruction pointers and corresponding task …","This event counts core clock cycles when the clock signal …","This event counts reference clock cycles at a fixed …","","","","","","","lightweight function with no checks to get the counter …","","Stops counting, releases the counter, and returns the …","Finds the corresponding function for each instruction …","","","","Allows user to get count since start without …","This function is designed to be invoked from an interrupt …","Initialization function that enables the PMU if one is …","","","","","Creates a Counter object and assigns a physical counter …","Simple function to print values from SampleResults in a …","Frees all counters and make them available to be used. …","Returns the samples that were stored during sampling in …","Starts the count.","Start interrupt process in order to take samples using …","This module implements the equivalent of “perf stat”. …","","","","","","","","","","","","","","","","","Stop the counters and return the counter values. The …","","","","","","Initialize seven performance monitoring counters. They …","Start running all the counters ","","","","","",""],"i":[1,1,0,0,1,1,1,0,1,1,1,2,3,1,2,3,2,2,2,0,1,2,3,2,0,0,3,1,2,3,2,0,0,0,2,0,0,3,1,2,3,1,2,3,1,2,3,0,0,4,5,4,5,4,5,4,5,4,5,4,4,4,5,4,5,4,5],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[],[["str",15],["result",4],["u64",15]]],[[["sampleresults",3]],[["result",4],["str",15]]],[[]],[[]],[[]],[[],[["str",15],["result",4],["u64",15]]],[[["exceptionstackframe",3]],[["str",15],["result",4],["bool",15]]],[[],[["result",4],["str",15]]],null,[[]],[[]],[[]],[[["eventtype",4]],[["str",15],["result",4],["counter",3]]],[[["sampleresults",3]]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15],["sampleresults",3]]],[[],[["result",4],["str",15]]],[[["option",4],["u32",15],["eventtype",4],["usize",15]],[["result",4],["str",15]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],[["str",15],["result",4],["pmuresults",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["result",4],["performancecounters",3],["str",15]]],[[],[["result",4],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"EventType"],[3,"Counter"],[3,"SampleResults"],[3,"PerformanceCounters"],[3,"PMUResults"]]},\
"print":{"doc":"Allows crates in the kernel to log messages to the …","t":[14,5,14,5],"n":["print","print_to_default_output","println","set_default_print_output"],"q":["print","","",""],"d":["The main printing macro, which simply pushes an output …","Enqueues the given <code>fmt_args</code> as a String onto the default …","Calls <code>print!()</code> with an extra newilne <code>\\\\n</code> appended to the …","Gives the kernel an endpoint (queue producer) to which it …"],"i":[0,0,0,0],"f":[null,[[["arguments",3]]],null,[[["event",4],["dfqueueproducer",3]]]],"p":[]},\
"ps2":{"doc":"","t":[13,4,13,13,11,11,5,5,5,5,5,11,5,5,5,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,5],"n":["AncientATKeyboard","KeyboardType","MF2Keyboard","MF2KeyboardWithPSControllerTranslator","borrow","borrow_mut","check_mouse_id","command_to_keyboard","command_to_mouse","data_to_port1","data_to_port2","from","handle_mouse_packet","init_ps2_port1","init_ps2_port2","into","keyboard_detect","keyboard_led","keyboard_scancode_set","mouse_packet_streaming","mouse_resend","mouse_resolution","ps2_clean_buffer","ps2_read_config","ps2_read_data","ps2_status_register","ps2_write_command","ps2_write_config","reset_mouse","set_mouse_id","set_sampling_rate","test_ps2_port1","test_ps2_port2","try_from","try_into","type_id","write_to_second_output_buffer"],"q":["ps2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","check the mouse’s id","write command to the keyboard and return the result","write command to the mouse and return the result","write data to the first ps2 data port and return the …","write data to the second ps2 data port and return the …","","read mouse data packet","initialize the first ps2 data port","initialize the second ps2 data port","","detect the keyboard’s type","set LED status of the keyboard parameter : 0: ScrollLock; …","set the scancode set of the keyboard 0: get the current …","enable or disable the packet streaming also return the …","resend the most recent packet again","set the resolution of the mouse parameter : 0x00: 1 …","clean the PS2 data port (0x60) output buffer also return …","read the config of the ps2 port","read dat from ps2 data port (0x60)","read the ps2 status register","write command to the command ps2 port (0x64)","write the new config to the ps2 command port (0x64)","reset the mouse","set the mouse ID (3 or 4 ) by magic sequence 3 means that …","set ps2 mouse’s sampling rate","test the first ps2 data port","test the second ps2 data port","","","","write data to the second ps2 output buffer"],"i":[1,0,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],"f":[null,null,null,null,[[]],[[]],[[],[["str",15],["u8",15],["result",4]]],[[["u8",15]],[["result",4],["str",15]]],[[["u8",15]],[["result",4],["str",15]]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[],[["str",15],["keyboardtype",4],["result",4]]],[[["u8",15]]],[[["u8",15]],[["result",4],["str",15]]],[[["bool",15]],[["vec",3],["str",15],["result",4]]],[[],[["result",4],["str",15]]],[[["u8",15]],[["result",4],["str",15]]],[[],[["u8",15],["vec",3]]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["u8",15]]],[[["u8",15]]],[[],[["result",4],["str",15]]],[[["u8",15]],[["result",4],["str",15]]],[[["u8",15]],[["result",4],["str",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u8",15]]]],"p":[[4,"KeyboardType"]]},\
"rendezvous":{"doc":"A rendezvous-based channel for synchronous Inter-Task …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","into","into","new_channel","receive","send","to_owned","to_owned","try_from","try_from","try_into","try_into","try_receive","try_send","type_id","type_id"],"q":["rendezvous","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The receiver side of a channel.","The sender (transmit) side of a channel.","","","","","","","","","","","","","Create a new channel that requires a sender a receiver to …","Receive a message, blocking until a sender is ready. ","Send a message, blocking until a receiver is ready.","","","","","","","Tries to receive a message, only succeeding if a sender …","Tries to send the message, only succeeding if a receiver …","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,0,2,1,1,2,1,2,1,2,2,1,1,2],"f":[null,null,[[]],[[]],[[]],[[]],[[],["sender",3]],[[],["receiver",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["str",15]]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Sender"],[3,"Receiver"]]},\
"root":{"doc":"This crate contains the implementation of the special …","t":[3,17,3,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ROOT","ROOT_DIRECTORY_NAME","RootDirectory","borrow","borrow","borrow_mut","borrow_mut","deref","from","from","get","get_absolute_path","get_name","get_parent_dir","get_root","initialize","insert","into","into","list","remove","set_parent_dir","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["root","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The root directory Returns a tuple for easy access to the …","","A struct that represents a node in the VFS ","","","","","","","","","Recursively gets the absolute pathname as a String","","we just return the root itself because it is the top of …","Returns a reference to the root directory.","","","","","","","","","","","","",""],"i":[0,0,0,1,2,1,2,2,1,2,1,1,1,1,0,2,1,1,2,1,1,1,1,2,1,2,1,2],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["option",4],["fileordir",4]]],[[],["string",3]],[[],["string",3]],[[],[["option",4],["dirref",6]]],[[],["dirref",6]],[[]],[[["fileordir",4]],[["result",4],["option",4],["str",15]]],[[]],[[]],[[],[["vec",3],["string",3]]],[[["fileordir",4]],[["option",4],["fileordir",4]]],[[["weakdirref",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"RootDirectory"],[3,"ROOT"]]},\
"rsdp":{"doc":"Support for ACPI RSDP (Root System Descriptor Pointer).","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Rsdp","borrow","borrow_mut","clone","clone_into","fmt","from","get_rsdp","into","only_derive_is_allowed_to_implement_this_trait","sdt_address","to_owned","try_from","try_into","type_id"],"q":["rsdp","","","","","","","","","","","","","",""],"d":["The Root System Descriptor Pointer,  which contains the …","","","","","","","Search for the RSDP in the BIOS memory area from 0xE_0000 …","","","Returns the <code>PhysicalAddress</code> of the RSDT or XSDT.","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],["rsdp",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[["pagetable",3]],[["str",15],["result",4],["boxref",6]]],[[]],[[]],[[],["physicaladdress",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Rsdp"]]},\
"rsdt":{"doc":"Definitions for the ACPI RSDT and XSDT system tables.","t":[17,3,17,11,11,11,11,11,5,11,11,11,11,11],"n":["RSDT_SIGNATURE","RsdtXsdt","XSDT_SIGNATURE","addresses","borrow","borrow_mut","from","get","handle","into","sdt","try_from","try_into","type_id"],"q":["rsdt","","","","","","","","","","","","",""],"d":["","The Root/Extended System Descriptor Table, RSDT or XSDT.  …","","Returns an iterator over the <code>PhysicalAddress</code>es of the SDT …","","","","Finds the RSDT or XSDT in the given <code>AcpiTables</code> and …","The handler for parsing RSDT/XSDT tables and adding them …","","Returns a reference to the SDT header of this RSDT or …","","",""],"i":[0,0,0,1,1,1,1,1,0,1,1,1,1,1],"f":[null,null,null,[[]],[[]],[[]],[[]],[[["acpitables",3]],[["option",4],["rsdtxsdt",3]]],[[["physicaladdress",3],["acpitables",3],["usize",15],["acpisignature",6]],[["result",4],["str",15]]],[[]],[[],["sdt",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"RsdtXsdt"]]},\
"rtc":{"doc":"","t":[6,3,11,11,12,5,11,11,11,5,12,11,12,12,5,12,5,11,11,11,11,12],"n":["RtcInterruptFunction","RtcTime","borrow","borrow_mut","days","enable_rtc_interrupt","fmt","fmt","from","get_rtc_ticks","hours","into","minutes","months","read_rtc","seconds","set_rtc_frequency","to_string","try_from","try_into","type_id","years"],"q":["rtc","","","","","","","","","","","","","","","","","","","","",""],"d":["","A timestamp obtained from the real-time clock.","","","","turn on IRQ 8 (mapped to 0x28), rtc begins sending …","","","","","","","","","","","sets the period of the RTC interrupt.  <code>rate</code> must be a …","","","","",""],"i":[0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1],"f":[null,null,[[]],[[]],null,[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[],[["result",4],["usize",15]]],null,[[]],null,null,[[],["rtctime",3]],null,[[["usize",15]],["result",4]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[3,"RtcTime"]]},\
"runqueue":{"doc":"This crate contains the API of the <code>RunQueue</code> structure, …","t":[5,5,5,5,5,5],"n":["add_task_to_any_runqueue","add_task_to_specific_runqueue","get_least_busy_core","get_runqueue","init","remove_task_from_all"],"q":["runqueue","","","","",""],"d":["Chooses the “least busy” core’s runqueue and adds …","Adds the given <code>Task</code> reference to given core’s runqueue.","Returns the “least busy” core","Returns the <code>RunQueue</code> of the given core, which is an …","Creates a new <code>RunQueue</code> for the given core, which is an …","Removes a <code>TaskRef</code> from all <code>RunQueue</code>s that exist on the …"],"i":[0,0,0,0,0,0],"f":[[[["taskref",3]],[["result",4],["str",15]]],[[["taskref",3],["u8",15]],[["result",4],["str",15]]],[[],[["option",4],["u8",15]]],[[["u8",15]],[["option",4],["rwlockirqsafe",3]]],[[["u8",15]],[["result",4],["str",15]]],[[["taskref",3]],[["result",4],["str",15]]]],"p":[]},\
"runqueue_priority":{"doc":"This crate contains the <code>RunQueue</code> structure, for priority …","t":[17,17,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11],"n":["DEFAULT_PRIORITY","INITIAL_TOKENS","MAX_PRIORITY","PriorityTaskRef","RunQueue","add_task_to_any_runqueue","add_task_to_specific_runqueue","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","fmt","fmt","from","from","get_least_busy_core","get_priority","get_runqueue","increment_context_switches","init","into","into","lock","new","priority","remove_task","remove_task_from_all","set_priority","to_owned","tokens_remaining","try_from","try_from","try_into","try_into","type_id","type_id","update_and_move_to_end"],"q":["runqueue_priority","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","A cloneable reference to a <code>Taskref</code> that exposes more …","A list of references to <code>Task</code>s (<code>PriorityTaskRef</code>s)  that is …","Chooses the “least busy” core’s runqueue (based on …","Convenience method that adds the given <code>Task</code> reference to …","","","","","","","","","","","","","","","Returns the “least busy” core, which is currently …","Output the priority of the given task. Outputs None if …","Returns <code>RunQueue</code> for the given core, which is an <code>apic_id</code>.","Increment the number of times the task is picked","Creates a new <code>RunQueue</code> for the given core, which is an …","","","Obtains the lock on the underlying <code>Task</code> in a read-only, …","Creates a new <code>PriorityTaskRef</code> that wraps the given <code>TaskRef</code>…","Priority assigned for the task. Max priority = 40, Min …","Removes a <code>TaskRef</code> from this RunQueue.","Removes a <code>TaskRef</code> from all <code>RunQueue</code>s that exist on the …","Sets the priority of the given <code>Task</code> in all the <code>RunQueue</code> …","","Remaining tokens in this epoch. A task will be scheduled …","","","","","","","Moves the <code>TaskRef</code> at the given index in this <code>RunQueue</code> to …"],"i":[0,0,0,0,0,1,1,2,1,2,1,2,2,2,1,2,1,2,1,2,1,1,1,1,2,1,2,1,2,2,2,1,1,1,2,2,2,1,2,1,2,1,1],"f":[null,null,null,null,null,[[["taskref",3]],[["result",4],["str",15]]],[[["u8",15],["taskref",3]],[["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[],["prioritytaskref",3]],[[]],[[],["taskref",3]],[[],["vecdeque",3]],[[],["taskref",3]],[[],["vecdeque",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["option",4],["u8",15]]],[[["taskref",3]],[["option",4],["u8",15]]],[[["u8",15]],[["option",4],["rwlockirqsafe",3]]],[[]],[[["u8",15]],[["result",4],["str",15]]],[[]],[[]],[[],[["task",3],["mutexirqsafeguardref",6]]],[[["taskref",3]],["prioritytaskref",3]],null,[[["taskref",3]],[["result",4],["str",15]]],[[["taskref",3]],[["result",4],["str",15]]],[[["taskref",3],["u8",15]],[["result",4],["str",15]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],[["option",4],["taskref",3]]]],"p":[[3,"RunQueue"],[3,"PriorityTaskRef"]]},\
"runqueue_round_robin":{"doc":"This crate contains the <code>RunQueue</code> structure, for round …","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["RUNQUEUES","RoundRobinTaskRef","RunQueue","add_task_to_any_runqueue","add_task_to_specific_runqueue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","fmt","fmt","from","from","from","get_least_busy_core","get_runqueue","increment_context_switches","init","initialize","into","into","into","move_to_end","new","remove_task","remove_task_from_all","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["runqueue_round_robin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["There is one runqueue per core, each core only accesses …","A cloneable reference to a <code>Taskref</code> that exposes more …","A list of references to <code>Task</code>s (<code>RoundRobinTaskRef</code>s).  This …","Chooses the “least busy” core’s runqueue (based on …","Convenience method that adds the given <code>Task</code> reference to …","","","","","","","","","","","","","","","","","","","Returns the “least busy” core, which is currently …","Returns the <code>RunQueue</code> for the given core, which is an …","Increment the number of times the task is picked","Creates a new <code>RunQueue</code> for the given core, which is an …","","","","","Moves the <code>TaskRef</code> at the given index into this <code>RunQueue</code> …","Creates a new <code>RoundRobinTaskRef</code> that wraps the given …","Removes a <code>TaskRef</code> from this RunQueue.","Removes a <code>TaskRef</code> from all <code>RunQueue</code>s that exist on the …","","","","","","","","","",""],"i":[0,0,0,1,1,2,3,1,2,3,1,2,2,2,3,1,2,1,2,1,2,3,1,1,1,2,1,3,2,3,1,1,2,1,1,2,2,3,1,2,3,1,2,3,1],"f":[null,null,null,[[["taskref",3]],[["result",4],["str",15]]],[[["taskref",3],["u8",15]],[["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["roundrobintaskref",3]],[[]],[[],["taskref",3]],[[],["atomicmap",3]],[[],["vecdeque",3]],[[],["taskref",3]],[[],["vecdeque",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["option",4],["u8",15]]],[[["u8",15]],[["option",4],["rwlockirqsafe",3]]],[[]],[[["u8",15]],[["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[["usize",15]],[["option",4],["taskref",3]]],[[["taskref",3]],["roundrobintaskref",3]],[[["taskref",3]],[["result",4],["str",15]]],[[["taskref",3]],[["result",4],["str",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"RunQueue"],[3,"RoundRobinTaskRef"],[3,"RUNQUEUES"]]},\
"scheduler":{"doc":"","t":[5,5,5],"n":["get_priority","schedule","set_priority"],"q":["scheduler","",""],"d":["Returns the priority of a given task. This function …","Yields the current CPU by selecting a new <code>Task</code> to run  …","Changes the priority of the given task with the given …"],"i":[0,0,0],"f":[[[["taskref",3]],[["option",4],["u8",15]]],[[],["bool",15]],[[["taskref",3],["u8",15]],[["result",4],["str",15]]]],"p":[]},\
"scheduler_priority":{"doc":"This crate picks the next task on token based scheduling …","t":[5,5,5],"n":["get_priority","select_next_task","set_priority"],"q":["scheduler_priority","",""],"d":["Returns the priority of the given task.","This defines the priority scheduler policy. Returns None …","Changes the priority of the given task with the given …"],"i":[0,0,0],"f":[[[["taskref",3]],[["option",4],["u8",15]]],[[["u8",15]],[["taskref",3],["option",4]]],[[["taskref",3],["u8",15]],[["result",4],["str",15]]]],"p":[]},\
"scheduler_round_robin":{"doc":"This crate picks the next task in round robin fashion. …","t":[5],"n":["select_next_task"],"q":["scheduler_round_robin"],"d":["This defines the round robin scheduler policy. Returns …"],"i":[0],"f":[[[["u8",15]],[["option",4],["taskref",3]]]],"p":[]},\
"sdt":{"doc":"ACPI table definitions and basic SDT structures.","t":[3,17,3,12,12,12,12,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,12,12,12,12,11,11,12,12,12,11,11,11,11,11,11],"n":["GenericAddressStructure","SDT_SIZE_IN_BYTES","Sdt","access_size","address_space","bit_offset","bit_width","borrow","borrow","borrow_mut","borrow_mut","checksum","clone","clone","creator_id","creator_revision","fmt","fmt","from","from","into","into","length","oem_id","oem_revision","oem_table_id","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","phys_addr","revision","signature","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["sdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A struct used to describe the position and layout of …","The size in bytes of the ACPI SDT Header (<code>Sdt</code> struct).","An ACPI System Descriptor Table. This is the header (the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,2,1,2,1,2,2,1,2,2,2,1,2,1,2,1,2,2,2,2,2,1,1,2,2,2,1,2,1,2,1],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["sdt",3]],[[],["genericaddressstructure",3]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"GenericAddressStructure"],[3,"Sdt"]]},\
"serial_port":{"doc":"Support for basic serial port access, including …","t":[17,17,17,17,3,11,11,11,11,11,11,11,11,11,11,11],"n":["COM1_BASE_PORT","COM2_BASE_PORT","COM3_BASE_PORT","COM4_BASE_PORT","SerialPort","borrow","borrow_mut","from","into","new","out_byte","out_str","try_from","try_into","type_id","write_str"],"q":["serial_port","","","","","","","","","","","","","","",""],"d":["","","","","A serial port and its various data and control registers.","","","","","Creates and returns a new serial port structure,  and …","Write the given byte to the serial port.","Write the given string to the serial port.","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[["u16",15]],["serialport",3]],[[["u8",15]]],[[["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["str",15]],["result",6]]],"p":[[3,"SerialPort"]]},\
"shapes":{"doc":"This crate defines the basic shapes used for display.","t":[3,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12],"n":["Coord","Rectangle","add","add","add","borrow","borrow","borrow_mut","borrow_mut","bottom_right","clone","clone","cmp","eq","eq","fmt","fmt","from","from","hash","hash","height","into","into","ne","ne","new","partial_cmp","sub","sub","sub","top_left","try_from","try_from","try_into","try_into","type_id","type_id","width","x","y"],"q":["shapes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A 2-D integer coordinate.","A rectangle given by its top-left coordinate and …","","","","","","","","The bottom-right point","","","","","","","","","","","","Returns the height of this Rectangle.","","","","","Creates a new coordinate.","","","","","The top-left point","","","","","","","Returns the width of this Rectangle.","The x coordinate","The y coordinate"],"i":[0,0,1,1,2,1,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,2,1,1,1,1,2,2,1,2,1,2,1,2,2,1,1],"f":[null,null,[[["coord",3]],["coord",3]],[[],["coord",3]],[[["coord",3]],["rectangle",3]],[[]],[[]],[[]],[[]],null,[[],["coord",3]],[[],["rectangle",3]],[[],["ordering",4]],[[["coord",3]],["bool",15]],[[["rectangle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[["coord",3]],["bool",15]],[[["rectangle",3]],["bool",15]],[[["isize",15]],["coord",3]],[[],[["option",4],["ordering",4]]],[[],["coord",3]],[[["coord",3]],["coord",3]],[[["coord",3]],["rectangle",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],null,null],"p":[[3,"Coord"],[3,"Rectangle"]]},\
"simd_personality":{"doc":"Management of two kernel personalities, one for …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"simd_test":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"simple_ipc":{"doc":"An implementation of a shared buffer for IPC that can be …","t":[3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11],"n":["Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new_channel","receive","send","try_from","try_from","try_into","try_into","try_receive","try_send","type_id","type_id"],"q":["simple_ipc","","","","","","","","","","","","","","","","","","","",""],"d":["Channel endpoint that only allows receiving messages.","Channel endpoint that only allows sending messages.","","","","","","","","","Creates a new channel and returns the endpoints","Tries to receive a message until succesful. Task will …","Tries to send a message until succesful. Task will spin …","","","","","Tries to receive a message once. If the buffer is empty, …","Tries to send a message once. If the buffer is full, then …","",""],"i":[0,0,1,2,1,2,1,2,1,2,0,2,1,1,2,1,2,2,1,1,2],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["str",15],["u8",15],["result",4]]],[[["u8",15]],[["result",4],["str",15]]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Sender"],[3,"Receiver"]]},\
"single_simd_task_optimization":{"doc":"Implements the performance optimization that allows a …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"slabmalloc":{"doc":"A slab allocator implementation for objects less than …","t":[8,18,18,18,18,18,18,18,18,18,18,18,3,3,3,3,18,18,18,3,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,10,11,10,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocablePage","BASE_ALLOC_SIZES","BUFFER_SIZE","HEAP_ID_OFFSET","HEAP_ID_OFFSET","HEAP_ID_OFFSET","MAX_ALLOC_SIZE","MAX_BASE_ALLOC_SIZE","MAX_BASE_SIZE_CLASSES","METADATA_SIZE","METADATA_SIZE","METADATA_SIZE","MappedPages8k","ObjectPage8k","Rawlink","SCAllocator","SIZE","SIZE","SIZE","ZoneAllocator","allocate","allocate","allocate","allocate","bitfield","bitfield","bitfield_mut","bitfield_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_size","buffer_size","clear_metadata","clear_metadata","deallocate","deallocate","deallocate","deallocate","default","default","default","empty_pages","exchange_pages_within_heap","first_fit","first_fit","fmt","from","from","from","from","from","get_max_size","heap_id","heap_id","heap_id","heap_id","into","into","into","into","into","is_empty","is_empty","is_full","is_full","mp","new","new","new","new","new","next","next","prev","prev","refill","refill","retrieve_empty_page","retrieve_empty_page","retrieve_mapped_pages","retrieve_mapped_pages","set_heap_id","set_heap_id","size","start_address","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["slabmalloc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This trait is used to define a page from which objects …","The set of sizes the allocator has lists for.","","","","","Maximum size that allocated within 2 pages. (8 KiB - …","Maximum size which is allocated with ObjectPages8k (8 …","How many allocators of type SCAllocator we have.","","","","A wrapper type around MappedPages which ensures that the …","Holds allocated data within 2 4-KiB pages.","Rawlink is a type like Option but for holding a raw …","A slab allocator allocates elements of a fixed size.","The total size (in bytes) of the page.","The total size (in bytes) of the page.","","A zone allocator for arbitrary sized allocations.","Tries to allocate an object within this page.","Tries to allocate an object within this page.","Allocates a block of memory described by <code>layout</code>.","Allocate a pointer to a block of memory described by …","","","","","","","","","","","","","","","","","","clears the metadata section of the page","Deallocates a memory object within this page.","Deallocates a memory object within this page.","Deallocates a previously allocated <code>ptr</code> described by <code>layout</code>…","Deallocates a pointer to a block of memory, which was …","","","","The total number of empty pages in this zone allocator","","Tries to find a free block within <code>data</code> that satisfies …","Tries to find a free block within <code>data</code> that satisfies …","","","","","","","Return maximum size an object of size <code>current_size</code> can …","","","","","","","","","","Checks if the page has currently no allocations.","Checks if the page has currently no allocations.","Checks if we can still allocate more objects of a given …","Checks if we can still allocate more objects of a given …","The MappedPages this memory area belongs to","","Creates a new 8KiB allocable page and stores the …","Creates a MappedPages8k object from MappedPages that have …","Create a new SCAllocator.","","","","","","Refill the SCAllocator","Refills the SCAllocator for a given Layout with a …","Returns an empty page from the allocator if available. It …","Returns a MappedPages8k from the SCAllocator with the …","","Returns the MappedPages object that was stored in the …","","","Returns the maximum supported object size of this …","","","","","","","","","","","","","","","",""],"i":[0,1,2,3,3,2,1,1,1,3,3,2,0,0,0,0,3,3,2,0,3,3,4,1,3,5,3,5,5,2,6,4,1,5,2,6,4,1,3,5,3,5,3,3,4,1,5,6,1,1,1,3,3,5,5,2,6,4,1,1,3,5,5,1,5,2,6,4,1,3,3,3,3,5,3,5,2,4,1,3,5,3,5,4,1,4,1,3,5,3,5,4,2,5,2,6,4,1,5,2,6,4,1,5,2,6,4,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["layout",3]]],[[["layout",3]]],[[["layout",3]],[["nonnull",3],["str",15],["result",4]]],[[["layout",3]],[["nonnull",3],["str",15],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["layout",3],["u8",15],["nonnull",3]],[["result",4],["str",15]]],[[["layout",3],["u8",15],["nonnull",3]],[["result",4],["str",15]]],[[["layout",3],["u8",15],["nonnull",3]],[["result",4],["str",15]]],[[["layout",3],["u8",15],["nonnull",3]],[["result",4],["str",15]]],[[],["objectpage8k",3]],[[]],[[],["zoneallocator",3]],[[],["usize",15]],[[["layout",3]],[["result",4],["str",15]]],[[["layout",3]],["option",4]],[[["layout",3]],["option",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["option",4],["usize",15]]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["usize",15],["mappedpages8k",3]]],[[["usize",15],["mappedpages8k",3]],["objectpage8k",3]],[[["mappedpages",3]],[["mappedpages8k",3],["str",15],["result",4]]],[[["usize",15]],["scallocator",3]],[[["usize",15]],["zoneallocator",3]],[[],["rawlink",3]],[[],["rawlink",3]],[[],["rawlink",3]],[[],["rawlink",3]],[[["usize",15],["mappedpages8k",3]]],[[["layout",3],["mappedpages8k",3]],[["result",4],["str",15]]],[[],[["mappedpages8k",3],["option",4]]],[[["usize",15]],[["mappedpages8k",3],["option",4]]],[[],[["mappedpages8k",3],["option",4]]],[[],[["mappedpages8k",3],["option",4]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["virtualaddress",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"ZoneAllocator"],[3,"MappedPages8k"],[8,"AllocablePage"],[3,"SCAllocator"],[3,"ObjectPage8k"],[3,"Rawlink"]]},\
"slabmalloc_safe":{"doc":"A slab allocator implementation for objects less than …","t":[8,18,18,18,18,18,18,18,18,18,18,18,18,3,3,3,18,18,18,3,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocablePage","BASE_ALLOC_SIZES","BUFFER_SIZE","HEAP_ID_OFFSET","HEAP_ID_OFFSET","HEAP_ID_OFFSET","MAX_ALLOC_SIZE","MAX_BASE_ALLOC_SIZE","MAX_BASE_SIZE_CLASSES","MAX_PAGE_LIST_SIZE","METADATA_SIZE","METADATA_SIZE","METADATA_SIZE","MappedPages8k","ObjectPage8k","SCAllocator","SIZE","SIZE","SIZE","ZoneAllocator","allocate","allocate","allocate","allocate","allocate","bitfield","bitfield","bitfield_mut","bitfield_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_metadata","clear_metadata","deallocate","deallocate","deallocate","deallocate","deallocate","default","empty_pages","exchange_pages_within_heap","first_fit","first_fit","first_fit","from","from","from","from","get_max_size","heap_id","into","into","into","into","is_empty","is_empty","is_empty","is_full","is_full","is_full","new","new","new","refill","refill","retrieve_empty_page","retrieve_empty_page","size","start_address","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["slabmalloc_safe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This trait is used to define a page from which objects …","The set of sizes the allocator has lists for.","","","","","Maximum size that allocated within 2 pages. (8 KiB - …","Maximum size which is allocated with ObjectPages8k (8 …","How many allocators of type SCAllocator we have.","The maximum number of allocable pages the SCAllocator can …","","","","A wrapper type around MappedPages which ensures that the …","Holds allocated data within 2 4-KiB pages.","A slab allocator allocates elements of a fixed size.","The total size (in bytes) of the page.","The total size (in bytes) of the page.","","A zone allocator for arbitrary sized allocations.","Tries to allocate an object within this page.","Tries to allocate an object within this page.","Tries to allocate an object within this page.","Allocates a block of memory descriped by <code>layout</code>.","Allocate a pointer to a block of memory described by …","","","","","","","","","","","","","","clears the metadata section of the page","Deallocates a memory object within this page.","Deallocates a memory object within this page.","Deallocates a memory object within this page.","Deallocates a previously allocated <code>ptr</code> described by <code>Layout</code>…","Deallocates a pointer to a block of memory, which was …","","The total number of empty pages in this zone allocator","","Tries to find a free block within <code>data</code> that satisfies …","Tries to find a free block within <code>data</code> that satisfies …","Tries to find a free block within <code>data</code> that satisfies …","","","","","Return maximum size an object of size <code>current_size</code> can …","","","","","","Checks if the page has currently no allocations.","Checks if the page has currently no allocations.","Checks if the page has currently no allocations.","Checks if we can still allocate more objects of a given …","Checks if we can still allocate more objects of a given …","Checks if we can still allocate more objects of a given …","Creates a MappedPages8k object from MappedPages that have …","Creates a new SCAllocator and initializes the page lists …","","Refill the SCAllocator","Refills the SCAllocator for a given Layout with a …","Returns an empty page from the allocator if available.","Returns a MappedPages8k from the SCAllocator with the …","Returns the maximum supported object size of this …","","","","","","","","","","","","",""],"i":[0,1,2,3,3,2,1,1,1,4,3,3,2,0,0,0,3,3,2,0,3,3,5,4,1,3,5,3,5,5,2,4,1,5,2,4,1,3,5,3,3,5,4,1,1,1,1,3,3,5,5,2,4,1,1,1,5,2,4,1,3,3,5,3,3,5,2,4,1,4,1,4,1,4,2,5,2,4,1,5,2,4,1,5,2,4,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["layout",3]]],[[["layout",3]]],[[["layout",3]]],[[["layout",3]],[["str",15],["result",4],["nonnull",3]]],[[["layout",3]],[["str",15],["result",4],["nonnull",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[],["zoneallocator",3]],[[],["usize",15]],[[["layout",3]],[["result",4],["str",15]]],[[["layout",3]],["option",4]],[[["layout",3]],["option",4]],[[["layout",3]],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15]],[["option",4],["usize",15]]],null,[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["mappedpages",3]],[["str",15],["result",4],["mappedpages8k",3]]],[[["usize",15]],["scallocator",3]],[[["usize",15]],["zoneallocator",3]],[[["usize",15],["mappedpages8k",3]],[["result",4],["str",15]]],[[["layout",3],["mappedpages8k",3]],[["result",4],["str",15]]],[[],[["option",4],["mappedpages8k",3]]],[[["usize",15]],[["option",4],["mappedpages8k",3]]],[[],["usize",15]],[[],["virtualaddress",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"ZoneAllocator"],[3,"MappedPages8k"],[8,"AllocablePage"],[3,"SCAllocator"],[3,"ObjectPage8k"]]},\
"slabmalloc_unsafe":{"doc":"A slab allocator implementation for objects less than …","t":[8,18,18,18,18,18,18,18,18,3,3,3,18,18,3,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocablePage","BASE_ALLOC_SIZES","HEAP_ID_OFFSET","HEAP_ID_OFFSET","MAX_ALLOC_SIZE","MAX_BASE_ALLOC_SIZE","MAX_BASE_SIZE_CLASSES","METADATA_SIZE","METADATA_SIZE","ObjectPage8k","Rawlink","SCAllocator","SIZE","SIZE","ZoneAllocator","allocate","allocate","allocate","allocate","bitfield","bitfield","bitfield_mut","bitfield_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_size","buffer_size","clear_metadata","clear_metadata","deallocate","deallocate","deallocate","deallocate","default","default","default","empty_pages","exchange_pages_within_heap","first_fit","first_fit","fmt","from","from","from","from","get_max_size","heap_id","heap_id","heap_id","heap_id","into","into","into","into","is_empty","is_empty","is_full","is_full","new","new","next","next","prev","prev","refill","refill","retrieve_empty_page","retrieve_empty_page","set_heap_id","set_heap_id","size","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["slabmalloc_unsafe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This trait is used to define a page from which objects …","The set of sizes the allocator has lists for.","","","Maximum size that allocated within 2 pages. (8 KiB - …","Maximum size which is allocated with ObjectPages8k (8 …","How many allocators of type SCAllocator we have.","","","Holds allocated data within 2 4-KiB pages.","Rawlink is a type like Option but for holding a raw …","A slab allocator allocates elements of a fixed size.","The total size (in bytes) of the page.","The total size (in bytes) of the page.","A zone allocator for arbitrary sized allocations.","Tries to allocate an object within this page.","Tries to allocate an object within this page.","Allocates a block of memory described by <code>layout</code>.","Allocate a pointer to a block of memory described by …","","","","","","","","","","","","","","","","clears the metadata section of the page","Deallocates a memory object within this page.","Deallocates a memory object within this page.","Deallocates a previously allocated <code>ptr</code> described by <code>layout</code>…","Deallocates a pointer to a block of memory, which was …","","","","The total number of empty pages in this zone allocator","","Tries to find a free block within <code>data</code> that satisfies …","Tries to find a free block within <code>data</code> that satisfies …","","","","","","Return maximum size an object of size <code>current_size</code> can …","","","","","","","","","Checks if the page has currently no allocations.","Checks if the page has currently no allocations.","Checks if we can still allocate more objects of a given …","Checks if we can still allocate more objects of a given …","Create a new SCAllocator.","","","","","","Refill the SCAllocator","Refills the SCAllocator for a given Layout with an object …","Returns an empty page from the allocator if available.","Returns an ObjectPage from the SCAllocator with the …","","","Returns the maximum supported object size of this …","","","","","","","","","","","",""],"i":[0,1,2,2,1,1,1,2,2,0,0,0,2,2,0,2,2,3,1,2,4,2,4,4,5,3,1,4,5,3,1,2,4,2,4,2,2,3,1,4,5,1,1,1,2,2,4,4,5,3,1,1,2,4,4,1,4,5,3,1,2,2,2,2,3,1,2,4,2,4,3,1,3,1,2,4,3,4,5,3,1,4,5,3,1,4,5,3,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["layout",3]]],[[["layout",3]]],[[["layout",3]],[["str",15],["nonnull",3],["result",4]]],[[["layout",3]],[["str",15],["nonnull",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[["layout",3],["nonnull",3],["u8",15]],[["result",4],["str",15]]],[[],["objectpage8k",3]],[[]],[[],["zoneallocator",3]],[[],["usize",15]],[[["layout",3]],[["result",4],["str",15]]],[[["layout",3]],["option",4]],[[["layout",3]],["option",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",15]],[["option",4],["usize",15]]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["scallocator",3]],[[["usize",15]],["zoneallocator",3]],[[],["rawlink",3]],[[],["rawlink",3]],[[],["rawlink",3]],[[],["rawlink",3]],[[["usize",15]]],[[["layout",3],["objectpage8k",3]],[["result",4],["str",15]]],[[],["option",4]],[[["usize",15]],[["option",4],["objectpage8k",3]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"ZoneAllocator"],[8,"AllocablePage"],[3,"SCAllocator"],[3,"ObjectPage8k"],[3,"Rawlink"]]},\
"smoltcp_helper":{"doc":"Collection of functions to set up a TCP connection using …","t":[17,5,5,14,5,5],"n":["STARTING_FREE_PORT","connect","get_default_iface","hpet_ticks","millis_since","poll_iface"],"q":["smoltcp_helper","","","","",""],"d":["The starting number for freely-available (non-reserved) …","A convenience function for connecting a socket. If the …","Returns the first network interface available in the …","A simple macro to get the current HPET clock ticks.","Function to calculate the currently elapsed time (in …","A convenience function to poll the given network …"],"i":[0,0,0,0,0,0],"f":[null,[[["u16",15],["u64",15],["networkinterfaceref",6],["socketset",3],["sockethandle",3],["ipendpoint",3]],[["result",4],["str",15]]],[[],[["networkinterfaceref",6],["str",15],["result",4]]],null,[[["u64",15]],[["str",15],["result",4],["u64",15]]],[[["u64",15],["networkinterfaceref",6],["socketset",3]],[["str",15],["result",4],["bool",15]]]],"p":[]},\
"spawn":{"doc":"This crate offers routines for spawning new tasks and …","t":[3,3,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11],"n":["BootstrapTaskRef","TaskBuilder","argument","block","borrow","borrow","borrow_mut","borrow_mut","create_idle_task","deref","drop","from","from","idle","init","into","into","name","new_application_task_builder","new_task_builder","pin_on_core","spawn","spawn_restartable","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["spawn","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A wrapper around a <code>TaskRef</code> that is for bootstrapped …","A struct that offers a builder pattern to create and …","Set the argument that will be passed to the new Task’s …","Set the new Task’s <code>RunState</code> to be <code>Blocked</code> instead of …","","","","","Spawns an idle task on the given <code>core</code> if specified, …","","","","","Sets this new Task to be the idle task for the given …","Initializes tasking for the given AP core, including …","","","Set the String name for the new Task.","Creates a builder for a new application <code>Task</code>. ","Creates a builder for a new <code>Task</code> that starts at the given …","Pin the new Task to a specific core.","Finishes this <code>TaskBuilder</code> and spawns the new task as …","Like <code>spawn()</code>, this finishes this <code>TaskBuilder</code> and spawns …","","","","","",""],"i":[0,0,1,1,2,1,2,1,0,2,2,2,1,1,0,2,1,1,0,0,1,1,1,2,1,2,1,2,1],"f":[null,null,[[],["taskbuilder",3]],[[],["taskbuilder",3]],[[]],[[]],[[]],[[]],[[["option",4],["u8",15]],[["taskref",3],["str",15],["result",4]]],[[],["taskref",3]],[[]],[[]],[[]],[[["u8",15]],["taskbuilder",3]],[[["arc",3],["mutexirqsafe",3],["stack",3],["u8",15]],[["str",15],["result",4],["bootstraptaskref",3]]],[[]],[[]],[[["string",3]],["taskbuilder",3]],[[["arc",3],["option",4],["path",3]],[["taskbuilder",3],["str",15],["result",4]]],[[],["taskbuilder",3]],[[["u8",15]],["taskbuilder",3]],[[],[["taskref",3],["str",15],["result",4]]],[[],[["taskref",3],["str",15],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"TaskBuilder"],[3,"BootstrapTaskRef"]]},\
"stack":{"doc":"Provides the <code>Stack</code> type that represents a Task’s stack  …","t":[3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Stack","alloc_stack","borrow","borrow_mut","bottom","deref","deref_mut","fmt","from","from_pages","guard_page","into","top_unusable","top_usable","try_from","try_into","type_id"],"q":["stack","","","","","","","","","","","","","","","",""],"d":["A range of mapped memory designated for use as a task’s …","Allocates a new stack and maps it to the active page …","","","Returns the bottom of this stack, its lowest usable …","","","","","Creates a stack from its constituent parts:  a guard page …","Returns the guard page(s) for this stack. ","","Returns the address just beyond the top of this stack,  …","Returns the highest usable address of this Stack,  which …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["mapper",3],["usize",15]],[["option",4],["stack",3]]],[[]],[[]],[[],["virtualaddress",3]],[[],["mappedpages",3]],[[],["mappedpages",3]],[[["formatter",3]],["result",6]],[[]],[[["mappedpages",3],["allocatedpages",3]],[["result",4],["stack",3]]],[[],["pagerange",3]],[[]],[[],["virtualaddress",3]],[[],["virtualaddress",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Stack"]]},\
"stack_trace":{"doc":"Stack trace (backtrace) functionality using DWARF …","t":[5],"n":["stack_trace"],"q":["stack_trace"],"d":["Get a stack trace using the default stack tracer based on …"],"i":[0],"f":[[[["option",4],["fn",8],["usize",15]],[["result",4],["str",15]]]],"p":[]},\
"stack_trace_frame_pointers":{"doc":"Stack trace (backtrace) functionality using frame …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"state_store":{"doc":"","t":[3,11,11,11,11,5,5,5,11,11,11,11],"n":["SSCached","borrow","borrow_mut","from","get","get_state","init","insert_state","into","try_from","try_into","type_id"],"q":["state_store","","","","","","","","","","",""],"d":["A thread-safe cached reference to a system-wide state. …","","","","Tries to upgrade the internal Weak pointer to a Strong …","Returns a Weak reference to the SystemState of the …","","Inserts a new SystemState-implementing type into the map. ","","","",""],"i":[0,1,1,1,1,0,0,0,1,1,1,1],"f":[null,[[]],[[]],[[]],[[],[["option",4],["arc",3]]],[[],[["sscached",3],["any",8]]],[[]],[[["any",8]],[["option",4],["any",8]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"SSCached"]]},\
"state_transfer":{"doc":"","t":[5],"n":["prio_sched"],"q":["state_transfer"],"d":["This function is used for live evolution from a round …"],"i":[0],"f":[[[["arc",3],["cratenamespace",3]],[["result",4],["str",15]]]],"p":[]},\
"storage_device":{"doc":"Trait definitions for storage devices and storage …","t":[8,6,8,6,10,11,11,11,11,10,10,11,10,10],"n":["StorageController","StorageControllerRef","StorageDevice","StorageDeviceRef","devices","downcast","downcast_mut","downcast_ref","is","read_sectors","sector_size_in_bytes","size_in_bytes","size_in_sectors","write_sectors"],"q":["storage_device","","","","","","","","","","","","",""],"d":["A trait that represents a storage controller, such as an …","A trait object wrapped in an Arc and Mutex that allows  …","A trait that represents a storage device, such as hard …","A trait object wrapped in an Arc and Mutex that allows  …","Returns an iterator of references to all <code>StorageDevice</code>s …","Returns a boxed object from a boxed trait object if the …","Returns a mutable reference to the object within the …","Returns a reference to the object within the trait object …","Returns true if the trait object wraps an object of type …","Reads content from the storage device into the given …","Returns the size of a single sector in bytes, as defined …","Returns the size of this drive in bytes, rounded up to …","Returns the number of sectors in this drive.","Writes content from the given <code>buffer</code> to the storage …"],"i":[0,0,0,0,1,2,2,2,2,2,2,2,2,2],"f":[null,null,null,null,[[],[["box",3],["iterator",8]]],[[["box",3]],[["box",3],["box",3],["result",4]]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],[["result",4],["usize",15],["str",15]]]],"p":[[8,"StorageController"],[8,"StorageDevice"]]},\
"storage_manager":{"doc":"Manages and handles initialization of all storage devices …","t":[3,8,6,8,6,11,11,11,11,11,10,11,11,11,11,5,11,11,11,11,10,10,11,10,11,11,11,10],"n":["STORAGE_CONTROLLERS","StorageController","StorageControllerRef","StorageDevice","StorageDeviceRef","as_any","as_any_mut","borrow","borrow_mut","deref","devices","downcast","downcast_mut","downcast_ref","from","init_device","initialize","into","into_any","is","read_sectors","sector_size_in_bytes","size_in_bytes","size_in_sectors","try_from","try_into","type_id","write_sectors"],"q":["storage_manager","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A list of all of the available and initialized storage …","A trait that represents a storage controller, such as an …","A trait object wrapped in an Arc and Mutex that allows  …","A trait that represents a storage device, such as hard …","A trait object wrapped in an Arc and Mutex that allows  …","","","","","","Returns an iterator of references to all <code>StorageDevice</code>s …","Returns a boxed object from a boxed trait object if the …","Returns a mutable reference to the object within the …","Returns a reference to the object within the trait object …","","Attempts to handle the initialization of the given …","","","","Returns true if the trait object wraps an object of type …","Reads content from the storage device into the given …","Returns the size of a single sector in bytes, as defined …","Returns the size of this drive in bytes, rounded up to …","Returns the number of sectors in this drive.","","","","Writes content from the given <code>buffer</code> to the storage …"],"i":[0,0,0,0,0,1,1,1,1,1,2,3,3,3,1,0,1,1,1,3,3,3,3,3,1,1,1,3],"f":[null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["mutex",6]],[[],[["iterator",8],["global",3],["box",3]]],[[["global",3],["box",3],["storagedevice",8]],[["box",3],["box",3],["result",4]]],[[],["option",4]],[[],["option",4]],[[]],[[["pcidevice",3]],[["str",15],["result",4],["bool",15]]],[[]],[[]],[[["global",3],["box",3]],[["global",3],["box",3],["any",8]]],[[],["bool",15]],[[["usize",15]],[["str",15],["usize",15],["result",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],[["str",15],["usize",15],["result",4]]]],"p":[[3,"STORAGE_CONTROLLERS"],[8,"StorageController"],[8,"StorageDevice"]]},\
"task":{"doc":"This crate contains the <code>Task</code> structure for supporting …","t":[13,13,13,4,13,6,13,6,4,13,13,3,13,13,3,4,13,3,3,3,12,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,5,11,5,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,11,11,12,12,12,12,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Blocked","Completed","Exception","ExitValue","Exited","FailureCleanupFunction","Initing","KillHandler","KillReason","Killed","Panic","PanicInfoOwned","Reaped","Requested","RestartInfo","RunState","Runnable","TASKLIST","Task","TaskRef","app_crate","argument","block","bootstrap_task","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","deref","drop","env","eq","failure_cleanup_function","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","func","get_env","get_exit_value","get_my_current_task","get_my_current_task_id","get_namespace","get_task","has_exited","id","initialize","into","into","into","into","into","into","into","into","is_an_idle_task","is_application","is_restartable","is_runnable","is_running","is_userspace","join","kill","kill_handler","kstack","line","lock","mmi","msg","name","namespace","new","new","pinned_core","restart_info","running_on_cpu","runstate","saved_sp","set_env","set_kill_handler","set_kill_handler","set_my_kill_handler","take_exit_value","take_exit_value","take_kill_handler","take_kill_handler","task_switch","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unblock"],"q":["task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["blocked on something, like I/O or a wait event","The Task ran to completion and returned the enclosed <code>Any</code> …","A non-language-level problem, such as a Page Fault or …","The list of ways that a Task can exit, including possible …","The <code>Task</code> has exited and can no longer be run, either by …","The signature of a Task’s failure cleanup function.","in the midst of setting up the task","The function signature of the callback that will be …","The list of possible reasons that a given <code>Task</code> was killed …","The Task did NOT run to completion, and was instead …","A Rust-level panic occurred while running this <code>Task</code>.","Just like <code>core::panic::PanicInfo</code>, but with owned String …","This <code>Task</code> had already exited and now its ExitValue has …","The user or another task requested that this <code>Task</code> be …","A data structure to hold data related to restart the …","The set of possible runstates that a task can be in, e.g.,…","able to be scheduled in, but not necessarily currently …","The list of all Tasks in the system.","A structure that contains contextual information for a …","A shareable, cloneable reference to a <code>Task</code> that exposes …","For application <code>Task</code>s, this is a reference to the …","Stores the argument of the task for restartable tasks","Blocks this <code>Task</code> by setting its <code>RunState</code> to blocked.","Bootstrap a new task from the current thread of execution.","","","","","","","","","","","","","","","","","","","","","","","","The environment of the task, Wrapped in an Arc & Mutex …","","The function that should be run as a last-ditch attempt …","","","","","","","","","","","","","","","","","","","","Stores the function of the task for restartable tasks","Gets a reference to this task’s <code>Environment</code>.","Returns a reference to the exit value of this <code>Task</code>,  if …","Returns a reference to the current task by using the …","Returns the current Task’s id by using the <code>TaskLocalData</code>…","Gets a reference to this task’s <code>CrateNamespace</code>.","returns a shared reference to the <code>Task</code> specified by the …","Returns true if this <code>Task</code> has been exited, i.e., if its …","the unique id of this Task.","","","","","","","","","","Whether this Task is an idle task, the task that runs by …","Returns <code>true</code> if this is an application <code>Task</code>.  This will …","","Returns true if this <code>Task</code> is Runnable, i.e., able to be …","returns true if this Task is currently running on any cpu.","Returns true if this is a userspace<code>Task</code>. Currently …","Waits until the given <code>task</code> has finished executing,  i.e., …","Kills this <code>Task</code> (not a clean exit) without allowing it to …","The function that will be called when this <code>Task</code> panics or …","The kernel stack, which all <code>Task</code>s must have in order to …","","Obtains the lock on the underlying <code>Task</code> in a read-only, …","Memory management details: page tables, mappings, …","","the simple name of this Task","This <code>Task</code> is linked into and runs within the context of  …","Creates a new Task structure and initializes it to be …","Creates a new <code>TaskRef</code> that wraps the given <code>Task</code>.","Whether or not this task is pinned to a certain core. The …","Stores the restartable information of the task.  …","Which cpu core the Task is currently running on. <code>None</code> if …","the runnability status of this task, basically whether it…","the saved stack pointer value, used for task switching.","Sets the <code>Environment</code> of this Task.","Registers a function or closure that will be called if …","Registers a function or closure that will be called if …","Sets the kill handler function for the current <code>Task</code>","Takes ownership of this <code>Task</code>’s exit value and returns …","Takes ownership of this <code>Task</code>’s exit value and returns …","Takes ownership of this <code>Task</code>’s <code>KillHandler</code> …","Takes ownership of this <code>Task</code>’s <code>KillHandler</code> …","Switches from the current (<code>self</code>)  to the given <code>next</code> Task.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unblocks this <code>Task</code> by setting its <code>RunState</code> to runnable."],"i":[1,2,3,0,1,0,1,0,0,2,3,0,1,3,0,0,1,0,0,0,4,5,6,0,5,4,7,8,3,2,1,6,5,4,7,8,3,2,1,6,7,6,7,6,7,8,4,4,6,4,7,4,4,7,7,3,3,2,1,6,5,4,7,7,8,3,2,1,6,5,6,4,0,0,6,0,4,4,8,5,4,7,8,3,2,1,6,4,4,6,4,4,4,6,6,4,4,7,6,4,7,4,4,4,6,4,4,4,4,4,6,4,6,0,4,6,4,6,4,7,6,4,7,3,5,4,7,8,3,2,1,6,5,4,7,8,3,2,1,6,5,4,7,8,3,2,1,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["stack",3],["u8",15],["mmiref",6]],[["result",4],["str",15],["taskref",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["panicinfoowned",3]],[[],["taskref",3]],[[]],[[]],null,[[],["mutexirqsafe",3]],[[]],null,[[["taskref",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["panicinfo",3]],["panicinfoowned",3]],[[]],[[]],[[]],[[]],[[]],null,[[],[["mutex",6],["arc",3]]],[[],[["option",4],["exitvalue",4]]],[[],[["option",4],["taskref",3]]],[[],[["option",4],["usize",15]]],[[],[["cratenamespace",3],["arc",3]]],[[["usize",15]],[["taskref",3],["option",4]]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["str",15]]],[[["killreason",4]],[["result",4],["str",15]]],null,null,null,[[],[["mutexirqsafeguardref",6],["task",3]]],null,null,null,null,[[["stack",3],["option",4],["failurecleanupfunction",6]],[["task",3],["str",15],["result",4]]],[[["task",3]],["taskref",3]],null,null,null,null,null,[[["mutex",6],["arc",3]]],[[["killhandler",6]]],[[["killhandler",6]]],[[["killhandler",6]],[["result",4],["str",15]]],[[],[["option",4],["exitvalue",4]]],[[],[["option",4],["exitvalue",4]]],[[],[["option",4],["killhandler",6]]],[[],[["option",4],["killhandler",6]]],[[["u8",15],["task",3]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[4,"RunState"],[4,"ExitValue"],[4,"KillReason"],[3,"Task"],[3,"RestartInfo"],[3,"TaskRef"],[3,"PanicInfoOwned"],[3,"TASKLIST"]]},\
"task_fs":{"doc":"This crate contains the direcotires and files that …","t":[3,3,17,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MmiDir","MmiFile","TASKS_DIRECTORY_NAME","TASKS_DIRECTORY_PATH","TaskDir","TaskFile","TaskFs","as_mapping","as_mapping","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","get","get","get","get_absolute_path","get_absolute_path","get_absolute_path","get_absolute_path","get_absolute_path","get_name","get_name","get_name","get_name","get_name","get_parent_dir","get_parent_dir","get_parent_dir","get_parent_dir","get_parent_dir","init","insert","insert","insert","into","into","into","into","into","list","list","list","name","new","new","new","new","read","read","remove","remove","remove","set_parent_dir","set_parent_dir","set_parent_dir","set_parent_dir","set_parent_dir","size","size","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write"],"q":["task_fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Lazily computed directory that contains subfiles and …","Lazily computed file that contains information  about a …","The name of the VFS directory that exposes task info in …","The absolute path of the tasks directory, which is …","A lazily computed directory that holds files and …","Lazily computed file that holds information about this …","The top level directory that includes a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes the tasks virtual filesystem directory within …","This function adds a newly created fs node (the argument) …","","","","","","","","Returns a string listing all the children in the directory","Returns a string listing all the children in the directory","Returns a string listing all the children in the directory","The name of the directory","Creates a new directory and passes a pointer to the new …","","Creates a new directory and passes a pointer to the new …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,5,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,0,3,4,5,3,4,1,5,2,3,4,5,4,4,1,5,2,1,2,3,4,5,3,4,1,5,2,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,1,2],"f":[null,null,null,null,null,null,null,[[],[["mappedpages",3],["result",4],["str",15]]],[[],[["mappedpages",3],["result",4],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["fileordir",4],["option",4]]],[[["str",15]],[["fileordir",4],["option",4]]],[[["str",15]],[["fileordir",4],["option",4]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["option",4],["dirref",6]]],[[],[["option",4],["dirref",6]]],[[],[["option",4],["dirref",6]]],[[],[["option",4],["dirref",6]]],[[],[["option",4],["dirref",6]]],[[],[["result",4],["str",15]]],[[["fileordir",4]],[["result",4],["str",15],["option",4]]],[[["fileordir",4]],[["result",4],["str",15],["option",4]]],[[["fileordir",4]],[["result",4],["str",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["string",3]]],[[],[["vec",3],["string",3]]],[[],[["vec",3],["string",3]]],null,[[["dirref",6],["taskref",3],["string",3]],[["taskdir",3],["result",4],["str",15]]],[[["taskref",3]],["taskfile",3]],[[["taskref",3]],["mmidir",3]],[[["taskref",3]],["mmifile",3]],[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[["fileordir",4]],[["fileordir",4],["option",4]]],[[["fileordir",4]],[["fileordir",4],["option",4]]],[[["fileordir",4]],[["fileordir",4],["option",4]]],[[["weakdirref",6]]],[[["weakdirref",6]]],[[["weakdirref",6]]],[[["weakdirref",6]]],[[["weakdirref",6]]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[["usize",15]],[["result",4],["usize",15],["str",15]]]],"p":[[3,"TaskFile"],[3,"MmiFile"],[3,"TaskFs"],[3,"TaskDir"],[3,"MmiDir"]]},\
"terminal_print":{"doc":"Applications that want to print to their parent terminal …","t":[5,14,5,14,5],"n":["add_child","print","print_to_stdout_args","println","remove_child"],"q":["terminal_print","","","",""],"d":["Adds the (child application’s task ID, parent terminal …","The main printing macro, which simply pushes an output …","Converts the given <code>core::fmt::Arguments</code> to a <code>String</code> and …","Calls <code>print!()</code> with an extra newline (‘\\\\n’) appended …","Removes the (child application’s task ID, parent …"],"i":[0,0,0,0,0],"f":[[[["dfqueueproducer",3],["usize",15],["event",4]],[["result",4],["str",15]]],null,[[["arguments",3]]],null,[[["usize",15]],[["result",4],["str",15]]]],"p":[]},\
"text_display":{"doc":"This crate defines a text displayable. A text displayable …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["TextDisplay","borrow","borrow_mut","display","fmt","from","get_bg_color","get_dimensions","get_index","get_location","get_next_index","get_size","into","new","reset_cache","set_size","set_text","try_from","try_into","type_id"],"q":["text_display","","","","","","","","","","","","","","","","","","",""],"d":["A text displayable profiles the size and color of a block …","","","","","","Gets the background color of the text area","Gets the size of a text displayable in number of …","Translate the location of a character to its index in the …","Translate the index of a character in the text to the …","Gets the index of next character to be displayabled. It …","","","Creates a new text displayable.","Clear the cache of the text displayable.","","Sets the text of the text displayable","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[["coord",3],["framebuffer",3]],[["str",15],["result",4],["rectangle",3]]],[[["formatter",3]],["result",6]],[[]],[[],["color",3]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[],["usize",15]],[[]],[[]],[[["color",3],["usize",15]],[["textdisplay",3],["str",15],["result",4]]],[[]],[[["usize",15]]],[[["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"TextDisplay"]]},\
"tlb_shootdown":{"doc":"Support for broadcasting and handling TLB shootdown IPIs. ","t":[7,17,7,7,5,5,5],"n":["TLB_SHOOTDOWN_IPI_COUNT","TLB_SHOOTDOWN_IPI_IRQ","TLB_SHOOTDOWN_IPI_LOCK","TLB_SHOOTDOWN_IPI_PAGES","handle_tlb_shootdown_ipi","init","send_tlb_shootdown_ipi"],"q":["tlb_shootdown","","","","","",""],"d":["The number of remaining cores that still need to handle …","The IRQ number used for IPIs","The lock that makes sure only one set of TLB shootdown …","The range of pages for a TLB shootdown IPI.","Handles a TLB shootdown ipi by flushing the <code>VirtualAddress</code>…","Initializes data, functions, and structures for the TLB …","Sends an IPI to all other cores (except me) to trigger  a …"],"i":[0,0,0,0,0,0,0],"f":[null,null,null,null,[[["pagerange",3]]],[[]],[[["pagerange",3],["localapic",3]]]],"p":[]},\
"tsc":{"doc":"","t":[3,11,11,11,11,11,5,11,11,11,11,11,11,5,11],"n":["TscTicks","add","borrow","borrow_mut","fmt","from","get_tsc_frequency","into","into","sub","to_ns","try_from","try_into","tsc_ticks","type_id"],"q":["tsc","","","","","","","","","","","","","",""],"d":["","Checked addition. Computes <code>self + other</code>,  returning <code>None</code> …","","","","","Returns the frequency of the TSC for the system,  …","Get the inner value, the number of ticks.","","Checked subtraction. Computes <code>self - other</code>,  returning …","Converts ticks to nanoseconds.  Returns None if the TSC …","","","Returns the current number of ticks from the TSC, i.e., …",""],"i":[0,1,1,1,1,1,0,1,1,1,1,1,1,0,1],"f":[null,[[["tscticks",3]],[["tscticks",3],["option",4]]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[],[["str",15],["result",4],["u64",15]]],[[],["u64",15]],[[]],[[["tscticks",3]],[["tscticks",3],["option",4]]],[[],[["u64",15],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["tscticks",3]],[[],["typeid",3]]],"p":[[3,"TscTicks"]]},\
"tss":{"doc":"","t":[17,5,5],"n":["DOUBLE_FAULT_IST_INDEX","create_tss","tss_set_rsp0"],"q":["tss","",""],"d":["The index of the double fault stack in a TaskStateSegment …","set up TSS entry for the given AP core.  Returns a …","Sets the current core’s TSS privilege stack 0 (RSP0) …"],"i":[0,0,0],"f":[null,[[["u8",15],["virtualaddress",3]],["mutex",6]],[[["virtualaddress",3]],[["result",4],["str",15]]]],"p":[]},\
"unified_channel":{"doc":"A cfg-based wrapper that unifies rendezvous channels and …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11],"n":["StringReceiver","StringSender","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","into","into","new_string_channel","receive","send","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["unified_channel","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,0,2,1,1,2,1,2,1,2,1,2],"f":[null,null,[[]],[[]],[[]],[[]],[[],["stringsender",3]],[[],["stringreceiver",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],[["string",3],["result",4],["str",15]]],[[["string",3]],[["result",4],["str",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"StringSender"],[3,"StringReceiver"]]},\
"unwind":{"doc":"Support for unwinding the call stack and cleaning up …","t":[25,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FuncWithRegisters","StackFrame","StackFrameIter","UnwindingContext","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_site_address","fmt","fmt","from","from","from","initial_address","into","into","into","into","into_fallible_iter","invoke_with_current_registers","lsda","namespace","next","personality","registers","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["unwind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A single frame in the stack, which contains …","An iterator over the stack frames on the current task’s …","This is the context/state that is used during unwinding …","","","","","","","The <em>call site</em> of this stack frame, i.e., the address of …","","","","","","The address (starting instruction pointer) of the function…","","","","","","This function saves the current CPU register values onto …","The address of the Language-Specific Data Area (LSDA) …","Returns a reference to the underlying <code>CrateNamespace</code> that …","","The address of the personality function that corresponds …","Returns the array of register values as they existed …","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,3,2,3,1,2,3,3,1,1,2,3,2,0,3,2,2,3,2,1,2,3,1,2,3,1,2,3],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["str",15]]],[[],[["u64",15],["option",4]]],[[],["arc",3]],[[],[["result",4],["option",4]]],[[],[["u64",15],["option",4]]],[[],["registers",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"UnwindingContext"],[3,"StackFrameIter"],[3,"StackFrame"]]},\
"vfs_node":{"doc":"This crate contains a very basic, generic concrete …","t":[3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["VFSDirectory","VFSFile","as_mapping","borrow","borrow","borrow_mut","borrow_mut","children","from","from","get","get_name","get_name","get_parent_dir","get_parent_dir","insert","into","into","list","name","new","new","parent","read","remove","set_parent_dir","set_parent_dir","size","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":["vfs_node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A struct that represents a node in the VFS ","","","","","","","A list of child filesystem nodes","","","","","","Returns a pointer to the parent if it exists","","","","","Returns a string listing all the children in the directory","The name of the directory","Creates a new directory and passes a pointer to the new …","","A weak reference to the parent directory","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,2,1,2,2,1,2,1,2,2,1,2,2,2,1,2,1,2,2,1,1,2,1,2,1,2,1,1],"f":[null,null,[[],[["result",4],["str",15],["mappedpages",3]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[["str",15]],[["fileordir",4],["option",4]]],[[],["string",3]],[[],["string",3]],[[],[["option",4],["dirref",6]]],[[],[["option",4],["dirref",6]]],[[["fileordir",4]],[["str",15],["result",4],["option",4]]],[[]],[[]],[[],[["string",3],["vec",3]]],null,[[["dirref",6],["string",3]],[["str",15],["result",4],["dirref",6]]],[[["dirref",6],["usize",15],["string",3]],[["fileref",6],["str",15],["result",4]]],null,[[["usize",15]],[["result",4],["usize",15],["str",15]]],[[["fileordir",4]],[["fileordir",4],["option",4]]],[[["weakdirref",6]]],[[["weakdirref",6]]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],[["result",4],["usize",15],["str",15]]]],"p":[[3,"VFSFile"],[3,"VFSDirectory"]]},\
"vga_buffer":{"doc":"Support for basic printing to a simple 80x25 text-mode …","t":[13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Black","Blue","Brown","Color","ColorCode","Cyan","DarkGray","Green","LightBlue","LightCyan","LightGray","LightGreen","LightRed","Magenta","Pink","Red","ScreenChar","White","Yellow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","from","from","from","into","into","into","new","new","print_raw","println_raw","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["vga_buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,2,3,1,2,3,1,2,3,1,2,3,2,1,2,3,1,2,3,1,2,3,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["color",4]],[[],["colorcode",3]],[[],["screenchar",3]],[[]],[[]],[[]],[[],["colorcode",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["color",4]],["colorcode",3]],[[["u8",15],["colorcode",3]],["screenchar",3]],null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Color"],[3,"ColorCode"],[3,"ScreenChar"]]},\
"virtual_nic":{"doc":"This crate defines a struct that enables language-level …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["VirtualNic","borrow","borrow_mut","drop","from","get_received_frame","id","into","mac_address","new","poll_receive","send_packet","send_packet_on_queue","try_from","try_into","type_id"],"q":["virtual_nic","","","","","","","","","","","","","","",""],"d":["A structure that contains a set of <code>RxQueue</code>s and <code>TxQueue</code>s …","","","","","","","","","Create a new <code>VirtualNIC</code> with the given parameters. For …","","","Send a packet on the specified queue.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[]],[[],[["option",4],["receivedframe",3]]],[[],["u8",15]],[[]],[[]],[[["txqueue",3],["vec",3],["mutexirqsafe",3],["usize",15],["vec",3],["rxqueue",3]],[["virtualnic",3],["str",15],["result",4]]],[[],[["result",4],["str",15]]],[[["transmitbuffer",3]],[["result",4],["str",15]]],[[["usize",15],["transmitbuffer",3]],[["result",4],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"VirtualNic"]]},\
"wait_condition":{"doc":"Simple condition variables that are convenience wrappers …","t":[3,3,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["SatisfiedWaitCondition","WaitCondition","WaitConditionFn","borrow","borrow","borrow_mut","borrow_mut","condition_satisfied","from","from","into","into","new","notify_one","notify_specific","try_from","try_from","try_into","try_into","type_id","type_id","wait"],"q":["wait_condition","","","","","","","","","","","","","","","","","","","","",""],"d":["A type wrapper that guarantees a given condition has been …","A condition variable that allows multiple <code>Task</code>s to wait …","The closure type that can be used within a <code>WaitCondition</code>: …","","","","","This function should be invoked after the wait condition …","","","","","Create a new <code>WaitCondition</code> in which <code>Task</code>s can wait for a …","Wake up a random <code>Task</code> that is waiting on this condition.","Wake up a specific <code>Task</code> that is waiting on this condition.","","","","","","","Waits for the condition to be true in a blocking fashion  …"],"i":[0,0,0,1,2,1,2,1,1,2,1,2,1,2,2,1,2,1,2,1,2,1],"f":[null,null,null,[[]],[[]],[[]],[[]],[[],[["option",4],["satisfiedwaitcondition",3]]],[[]],[[]],[[]],[[]],[[],["waitcondition",3]],[[],["bool",15]],[[["taskref",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4],["waiterror",4]]]],"p":[[3,"WaitCondition"],[3,"SatisfiedWaitCondition"]]},\
"wait_queue":{"doc":"","t":[13,13,13,13,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Interrupted","NoCurrentTask","SpuriousWakeup","Timeout","WaitError","WaitGuard","WaitQueue","block_again","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","eq","fmt","from","from","from","into","into","into","new","new","notify_one","notify_specific","task","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wait","wait_until","wait_until_mut","with_capacity"],"q":["wait_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Errors that may occur while waiting on a …","An object that holds a blocked <code>Task</code>  that will be …","A queue in which multiple <code>Task</code>s can wait for other <code>Task</code>s …","Blocks the task guarded by this waitguard, which is …","","","","","","","","","","","","","","","","Blocks the given <code>Task</code> and returns a new <code>WaitGuard</code> object …","Create a new empty WaitQueue.","Wake up one random <code>Task</code> that is waiting on this queue.","Wake up a specific <code>Task</code> that is waiting on this queue.","Returns a reference to the <code>Task</code> being blocked in this …","","","","","","","","","","Puts the current <code>Task</code> to sleep where it blocks on this …","Similar to <code>wait</code>, but this function blocks until the given …","Similar to <code>wait_until</code>, but this function accepts a …","Create a new empty WaitQueue."],"i":[1,1,1,1,0,0,0,2,2,3,1,2,3,1,2,1,1,2,3,1,2,3,1,2,3,3,3,2,2,3,1,2,3,1,2,3,1,3,3,3,3],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["waiterror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["taskref",3]],["waitguard",3]],[[],["waitqueue",3]],[[],["bool",15]],[[["taskref",3]],["bool",15]],[[],["taskref",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["waiterror",4],["result",4]]],[[["fn",8]],[["result",4],["waiterror",4]]],[[["fnmut",8]],[["result",4],["waiterror",4]]],[[["usize",15]],["waitqueue",3]]],"p":[[4,"WaitError"],[3,"WaitGuard"],[3,"WaitQueue"]]},\
"window":{"doc":"A <code>Window</code> object should be owned by an application. It can …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Window","area","borrow","borrow_mut","drop","framebuffer","framebuffer_mut","from","handle_event","into","is_active","new","render","try_from","try_into","type_id"],"q":["window","","","","","","","","","","","","","","",""],"d":["This struct is the application-facing representation of a …","Returns a <code>Rectangle</code> describing the position and …","","","","Returns an immutable reference to this window’s virtual …","Returns a mutable reference to this window’s virtual …","","Tries to receive an <code>Event</code> that has been sent to this …","","Returns <code>true</code> if this window is the currently active …","Creates a new window to be displayed on screen. ","Renders the area of this <code>Window</code> specified by the given …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["rectangle",3]],[[]],[[]],[[]],[[],[["windowinner",3],["mutexguardref",6],["framebuffer",3]]],[[],[["mutexguardrefmut",6],["windowinner",3],["framebuffer",3]]],[[]],[[],[["str",15],["result",4],["option",4]]],[[]],[[],["bool",15]],[[["usize",15],["color",3],["coord",3]],[["str",15],["window",3],["result",4]]],[[["option",4],["rectangle",3]],[["result",4],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Window"]]},\
"window_inner":{"doc":"The <code>WindowInner</code> struct is the internal representation of …","t":[17,17,13,13,3,4,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11],"n":["DEFAULT_BORDER_SIZE","DEFAULT_TITLE_BAR_HEIGHT","Moving","Stationary","WindowInner","WindowMovingStatus","border_size","borrow","borrow","borrow_mut","borrow_mut","contains","content_area","framebuffer","framebuffer_mut","from","from","get_border_size","get_pixel","get_position","get_size","get_title_bar_height","into","into","moving","new","resize","send_event","set_position","title_bar_height","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["window_inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","The window is currently in motion.  The enclosed <code>Coord</code> …","The window is not in motion.","The <code>WindowInner</code> struct is the internal system-facing …","Whether a window is moving (being dragged by the mouse).","The width of the border in pixels. By default, there is a …","","","","","Returns <code>true</code> if the given <code>coordinate</code> (relative to the …","Returns the position and dimensions of the Window’s …","Returns an immutable reference to this window’s virtual …","Returns a mutable reference to this window’s virtual …","","","Returns the size of the Window border in pixels.  There …","Returns the pixel value at the given <code>coordinate</code>, if the …","Gets the top-left position of the window relative to the …","Gets the size of a window in pixels","Returns the size of the Window title bar in pixels.  …","","","Whether a window is moving or stationary.","Creates a new <code>WindowInner</code> object backed by the given …","Resizes and moves this window to fit the given <code>Rectangle</code> …","Sends the given <code>event</code> to this window.","Sets the top-left position of the window relative to the …","The height of title bar in pixels. By default, there is …","","","","","",""],"i":[0,0,1,1,0,0,2,1,2,1,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,1,2,1,2],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["coord",3]],["bool",15]],[[],["rectangle",3]],[[],["framebuffer",3]],[[],["framebuffer",3]],[[]],[[]],[[],["usize",15]],[[["coord",3]],[["option",4],["alphapixel",3]]],[[],["coord",3]],[[]],[[],["usize",15]],[[]],[[]],null,[[["queue",3],["alphapixel",3],["framebuffer",3],["coord",3],["event",4]],["windowinner",3]],[[["rectangle",3]],[["result",4],["str",15]]],[[["event",4]],[["event",4],["result",4]]],[[["coord",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"WindowMovingStatus"],[3,"WindowInner"]]},\
"window_manager":{"doc":"This crate acts as a manager of a list of windows. It …","t":[7,3,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["WINDOW_MANAGER","WindowManager","borrow","borrow_mut","delete_window","final_fb","from","get_screen_size","init","into","is_active","move_active_window","move_floating_border","refresh_active_window","refresh_bottom_windows","refresh_mouse","refresh_top","refresh_windows","set_active","try_from","try_into","type_id"],"q":["window_manager","","","","","","","","","","","","","","","","","","","","",""],"d":["The instance of the default window manager","Window manager structure which maintains a list of …","","","delete a window and refresh its region","The final framebuffer which is mapped to the screen (the …","","Returns the <code>(width, height)</code> in pixels of the screen …","Initialize the window manager. It returns …","","Returns true if the given <code>window</code> is the currently active …","take active window’s base position and current mouse, …","Move the floating border when a window is moving.","Refresh the part in <code>bounding_box</code> of the active window. …","Refresh the region in <code>bounding_box</code>. Only render the …","Refresh the mouse display","Refresh the region of <code>bounding_box</code> in the top framebuffer","Refresh the part in <code>bounding_box</code> of every window. …","Sets one window as active, push last active (if exists) …","","",""],"i":[0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,[[]],[[]],[[["arc",3]],[["result",4],["str",15]]],null,[[]],[[]],[[],[["str",15],["result",4]]],[[]],[[["arc",3]],["bool",15]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[["option",4],["rectangle",3]],[["result",4],["str",15]]],[[["bool",15]],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[],[["result",4],["str",15]]],[[["bool",15],["arc",3]],[["str",15],["result",4],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"WindowManager"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};